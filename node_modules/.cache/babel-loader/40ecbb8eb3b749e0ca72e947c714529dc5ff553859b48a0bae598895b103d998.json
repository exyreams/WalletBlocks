{"ast":null,"code":"var _regeneratorRuntime = require(\"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar Mutex = require('async-mutex').Mutex;\nvar _require = require('json-rpc-engine'),\n  createAsyncMiddleware = _require.createAsyncMiddleware,\n  createScaffoldMiddleware = _require.createScaffoldMiddleware;\nvar LogFilter = require('./log-filter.js');\nvar BlockFilter = require('./block-filter.js');\nvar TxFilter = require('./tx-filter.js');\nvar _require2 = require('./hexUtils'),\n  intToHex = _require2.intToHex,\n  hexToInt = _require2.hexToInt;\nmodule.exports = createEthFilterMiddleware;\nfunction createEthFilterMiddleware(_ref) {\n  var blockTracker = _ref.blockTracker,\n    provider = _ref.provider;\n  // create filter collection\n  var filterIndex = 0;\n  var filters = {};\n  // create update mutex\n  var mutex = new Mutex();\n  var waitForFree = mutexMiddlewareWrapper({\n    mutex: mutex\n  });\n  var middleware = createScaffoldMiddleware({\n    // install filters\n    eth_newFilter: waitForFree(toFilterCreationMiddleware(newLogFilter)),\n    eth_newBlockFilter: waitForFree(toFilterCreationMiddleware(newBlockFilter)),\n    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),\n    // uninstall filters\n    eth_uninstallFilter: waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),\n    // checking filter changes\n    eth_getFilterChanges: waitForFree(toAsyncRpcMiddleware(getFilterChanges)),\n    eth_getFilterLogs: waitForFree(toAsyncRpcMiddleware(getFilterLogs))\n  });\n\n  // setup filter updating and destroy handler\n  var filterUpdater = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref2) {\n      var oldBlock, newBlock, releaseLock;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            oldBlock = _ref2.oldBlock, newBlock = _ref2.newBlock;\n            if (!(filters.length === 0)) {\n              _context2.next = 3;\n              break;\n            }\n            return _context2.abrupt(\"return\");\n          case 3:\n            _context2.next = 5;\n            return mutex.acquire();\n          case 5:\n            releaseLock = _context2.sent;\n            _context2.prev = 6;\n            _context2.next = 9;\n            return Promise.all(objValues(filters).map( /*#__PURE__*/function () {\n              var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(filter) {\n                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.prev = 0;\n                      _context.next = 3;\n                      return filter.update({\n                        oldBlock: oldBlock,\n                        newBlock: newBlock\n                      });\n                    case 3:\n                      _context.next = 8;\n                      break;\n                    case 5:\n                      _context.prev = 5;\n                      _context.t0 = _context[\"catch\"](0);\n                      // handle each error individually so filter update errors don't affect other filters\n                      console.error(_context.t0);\n                    case 8:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }, _callee, null, [[0, 5]]);\n              }));\n              return function (_x2) {\n                return _ref4.apply(this, arguments);\n              };\n            }()));\n          case 9:\n            _context2.next = 14;\n            break;\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2[\"catch\"](6);\n            // log error so we don't skip the releaseLock\n            console.error(_context2.t0);\n          case 14:\n            // unlock update reads\n            releaseLock();\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[6, 11]]);\n    }));\n    return function filterUpdater(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  // expose filter methods directly\n  middleware.newLogFilter = newLogFilter;\n  middleware.newBlockFilter = newBlockFilter;\n  middleware.newPendingTransactionFilter = newPendingTransactionFilter;\n  middleware.uninstallFilter = uninstallFilterHandler;\n  middleware.getFilterChanges = getFilterChanges;\n  middleware.getFilterLogs = getFilterLogs;\n\n  // expose destroy method for cleanup\n  middleware.destroy = function () {\n    uninstallAllFilters();\n  };\n  return middleware;\n\n  //\n  // new filters\n  //\n  function newLogFilter(_x3) {\n    return _newLogFilter.apply(this, arguments);\n  }\n  function _newLogFilter() {\n    _newLogFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(params) {\n      var filter, filterIndex;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            filter = new LogFilter({\n              provider: provider,\n              params: params\n            });\n            _context3.next = 3;\n            return installFilter(filter);\n          case 3:\n            filterIndex = _context3.sent;\n            return _context3.abrupt(\"return\", filter);\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n    return _newLogFilter.apply(this, arguments);\n  }\n  function newBlockFilter() {\n    return _newBlockFilter.apply(this, arguments);\n  }\n  function _newBlockFilter() {\n    _newBlockFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n      var filter, filterIndex;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            filter = new BlockFilter({\n              provider: provider\n            });\n            _context4.next = 3;\n            return installFilter(filter);\n          case 3:\n            filterIndex = _context4.sent;\n            return _context4.abrupt(\"return\", filter);\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }));\n    return _newBlockFilter.apply(this, arguments);\n  }\n  function newPendingTransactionFilter() {\n    return _newPendingTransactionFilter.apply(this, arguments);\n  } //\n  // get filter changes\n  //\n  function _newPendingTransactionFilter() {\n    _newPendingTransactionFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n      var filter, filterIndex;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            filter = new TxFilter({\n              provider: provider\n            });\n            _context5.next = 3;\n            return installFilter(filter);\n          case 3:\n            filterIndex = _context5.sent;\n            return _context5.abrupt(\"return\", filter);\n          case 5:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5);\n    }));\n    return _newPendingTransactionFilter.apply(this, arguments);\n  }\n  function getFilterChanges(_x4) {\n    return _getFilterChanges.apply(this, arguments);\n  }\n  function _getFilterChanges() {\n    _getFilterChanges = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(filterIndexHex) {\n      var filterIndex, filter, results;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            filterIndex = hexToInt(filterIndexHex);\n            filter = filters[filterIndex];\n            if (filter) {\n              _context6.next = 4;\n              break;\n            }\n            throw new Error(\"No filter for index \\\"\".concat(filterIndex, \"\\\"\"));\n          case 4:\n            results = filter.getChangesAndClear();\n            return _context6.abrupt(\"return\", results);\n          case 6:\n          case \"end\":\n            return _context6.stop();\n        }\n      }, _callee6);\n    }));\n    return _getFilterChanges.apply(this, arguments);\n  }\n  function getFilterLogs(_x5) {\n    return _getFilterLogs.apply(this, arguments);\n  } //\n  // remove filters\n  //\n  function _getFilterLogs() {\n    _getFilterLogs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(filterIndexHex) {\n      var filterIndex, filter, results;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            filterIndex = hexToInt(filterIndexHex);\n            filter = filters[filterIndex];\n            if (filter) {\n              _context7.next = 4;\n              break;\n            }\n            throw new Error(\"No filter for index \\\"\".concat(filterIndex, \"\\\"\"));\n          case 4:\n            // only return results for log filters\n            results = [];\n            if (filter.type === 'log') {\n              results = filter.getAllResults();\n            }\n            return _context7.abrupt(\"return\", results);\n          case 7:\n          case \"end\":\n            return _context7.stop();\n        }\n      }, _callee7);\n    }));\n    return _getFilterLogs.apply(this, arguments);\n  }\n  function uninstallFilterHandler(_x6) {\n    return _uninstallFilterHandler.apply(this, arguments);\n  } //\n  // utils\n  //\n  function _uninstallFilterHandler() {\n    _uninstallFilterHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(filterIndexHex) {\n      var filterIndex, filter, result;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) switch (_context8.prev = _context8.next) {\n          case 0:\n            // check filter exists\n            filterIndex = hexToInt(filterIndexHex);\n            filter = filters[filterIndex];\n            result = Boolean(filter); // uninstall filter\n            if (!result) {\n              _context8.next = 6;\n              break;\n            }\n            _context8.next = 6;\n            return uninstallFilter(filterIndex);\n          case 6:\n            return _context8.abrupt(\"return\", result);\n          case 7:\n          case \"end\":\n            return _context8.stop();\n        }\n      }, _callee8);\n    }));\n    return _uninstallFilterHandler.apply(this, arguments);\n  }\n  function installFilter(_x7) {\n    return _installFilter.apply(this, arguments);\n  }\n  function _installFilter() {\n    _installFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(filter) {\n      var prevFilterCount, currentBlock, newFilterCount;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) switch (_context9.prev = _context9.next) {\n          case 0:\n            prevFilterCount = objValues(filters).length; // install filter\n            _context9.next = 3;\n            return blockTracker.getLatestBlock();\n          case 3:\n            currentBlock = _context9.sent;\n            _context9.next = 6;\n            return filter.initialize({\n              currentBlock: currentBlock\n            });\n          case 6:\n            filterIndex++;\n            filters[filterIndex] = filter;\n            filter.id = filterIndex;\n            filter.idHex = intToHex(filterIndex);\n            // update block tracker subs\n            newFilterCount = objValues(filters).length;\n            updateBlockTrackerSubs({\n              prevFilterCount: prevFilterCount,\n              newFilterCount: newFilterCount\n            });\n            return _context9.abrupt(\"return\", filterIndex);\n          case 13:\n          case \"end\":\n            return _context9.stop();\n        }\n      }, _callee9);\n    }));\n    return _installFilter.apply(this, arguments);\n  }\n  function uninstallFilter(_x8) {\n    return _uninstallFilter.apply(this, arguments);\n  }\n  function _uninstallFilter() {\n    _uninstallFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(filterIndex) {\n      var prevFilterCount, newFilterCount;\n      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n        while (1) switch (_context10.prev = _context10.next) {\n          case 0:\n            prevFilterCount = objValues(filters).length;\n            delete filters[filterIndex];\n            // update block tracker subs\n            newFilterCount = objValues(filters).length;\n            updateBlockTrackerSubs({\n              prevFilterCount: prevFilterCount,\n              newFilterCount: newFilterCount\n            });\n          case 4:\n          case \"end\":\n            return _context10.stop();\n        }\n      }, _callee10);\n    }));\n    return _uninstallFilter.apply(this, arguments);\n  }\n  function uninstallAllFilters() {\n    return _uninstallAllFilters.apply(this, arguments);\n  }\n  function _uninstallAllFilters() {\n    _uninstallAllFilters = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n      var prevFilterCount;\n      return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n        while (1) switch (_context11.prev = _context11.next) {\n          case 0:\n            prevFilterCount = objValues(filters).length;\n            filters = {};\n            // update block tracker subs\n            updateBlockTrackerSubs({\n              prevFilterCount: prevFilterCount,\n              newFilterCount: 0\n            });\n          case 3:\n          case \"end\":\n            return _context11.stop();\n        }\n      }, _callee11);\n    }));\n    return _uninstallAllFilters.apply(this, arguments);\n  }\n  function updateBlockTrackerSubs(_ref5) {\n    var prevFilterCount = _ref5.prevFilterCount,\n      newFilterCount = _ref5.newFilterCount;\n    // subscribe\n    if (prevFilterCount === 0 && newFilterCount > 0) {\n      blockTracker.on('sync', filterUpdater);\n      return;\n    }\n    // unsubscribe\n    if (prevFilterCount > 0 && newFilterCount === 0) {\n      blockTracker.removeListener('sync', filterUpdater);\n      return;\n    }\n  }\n}\n\n// helper for turning filter constructors into rpc middleware\nfunction toFilterCreationMiddleware(createFilterFn) {\n  return toAsyncRpcMiddleware( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n    var filter,\n      result,\n      _args12 = arguments;\n    return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n      while (1) switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return createFilterFn.apply(void 0, _args12);\n        case 2:\n          filter = _context12.sent;\n          result = intToHex(filter.id);\n          return _context12.abrupt(\"return\", result);\n        case 5:\n        case \"end\":\n          return _context12.stop();\n      }\n    }, _callee12);\n  })));\n}\n\n// helper for pulling out req.params and setting res.result\nfunction toAsyncRpcMiddleware(asyncFn) {\n  return createAsyncMiddleware( /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(req, res) {\n      var result;\n      return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n        while (1) switch (_context13.prev = _context13.next) {\n          case 0:\n            _context13.next = 2;\n            return asyncFn.apply(null, req.params);\n          case 2:\n            result = _context13.sent;\n            res.result = result;\n          case 4:\n          case \"end\":\n            return _context13.stop();\n        }\n      }, _callee13);\n    }));\n    return function (_x9, _x10) {\n      return _ref7.apply(this, arguments);\n    };\n  }());\n}\nfunction mutexMiddlewareWrapper(_ref8) {\n  var mutex = _ref8.mutex;\n  return function (middleware) {\n    return /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(req, res, next, end) {\n        var releaseLock;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return mutex.acquire();\n            case 2:\n              releaseLock = _context14.sent;\n              releaseLock();\n              middleware(req, res, next, end);\n            case 5:\n            case \"end\":\n              return _context14.stop();\n          }\n        }, _callee14);\n      }));\n      return function (_x11, _x12, _x13, _x14) {\n        return _ref9.apply(this, arguments);\n      };\n    }();\n  };\n}\nfunction objValues(obj, fn) {\n  var values = [];\n  for (var key in obj) {\n    values.push(obj[key]);\n  }\n  return values;\n}","map":{"version":3,"names":["Mutex","require","_require","createAsyncMiddleware","createScaffoldMiddleware","LogFilter","BlockFilter","TxFilter","_require2","intToHex","hexToInt","module","exports","createEthFilterMiddleware","_ref","blockTracker","provider","filterIndex","filters","mutex","waitForFree","mutexMiddlewareWrapper","middleware","eth_newFilter","toFilterCreationMiddleware","newLogFilter","eth_newBlockFilter","newBlockFilter","eth_newPendingTransactionFilter","newPendingTransactionFilter","eth_uninstallFilter","toAsyncRpcMiddleware","uninstallFilterHandler","eth_getFilterChanges","getFilterChanges","eth_getFilterLogs","getFilterLogs","filterUpdater","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","_ref2","oldBlock","newBlock","releaseLock","wrap","_callee2$","_context2","prev","next","length","abrupt","acquire","sent","Promise","all","objValues","map","_ref4","_callee","filter","_callee$","_context","update","t0","console","error","stop","_x2","apply","arguments","_x","uninstallFilter","destroy","uninstallAllFilters","_x3","_newLogFilter","_callee3","params","_callee3$","_context3","installFilter","_newBlockFilter","_callee4","_callee4$","_context4","_newPendingTransactionFilter","_callee5","_callee5$","_context5","_x4","_getFilterChanges","_callee6","filterIndexHex","results","_callee6$","_context6","Error","concat","getChangesAndClear","_x5","_getFilterLogs","_callee7","_callee7$","_context7","type","getAllResults","_x6","_uninstallFilterHandler","_callee8","result","_callee8$","_context8","Boolean","_x7","_installFilter","_callee9","prevFilterCount","currentBlock","newFilterCount","_callee9$","_context9","getLatestBlock","initialize","id","idHex","updateBlockTrackerSubs","_x8","_uninstallFilter","_callee10","_callee10$","_context10","_uninstallAllFilters","_callee11","_callee11$","_context11","_ref5","on","removeListener","createFilterFn","_callee12","_args12","_callee12$","_context12","asyncFn","_ref7","_callee13","req","res","_callee13$","_context13","_x9","_x10","_ref8","_ref9","_callee14","end","_callee14$","_context14","_x11","_x12","_x13","_x14","obj","fn","values","key","push"],"sources":["D:/Projects/RainbowKit/connectwallet/node_modules/eth-json-rpc-filters/index.js"],"sourcesContent":["const Mutex = require('async-mutex').Mutex\nconst { createAsyncMiddleware, createScaffoldMiddleware } = require('json-rpc-engine')\nconst LogFilter = require('./log-filter.js')\nconst BlockFilter = require('./block-filter.js')\nconst TxFilter = require('./tx-filter.js')\nconst { intToHex, hexToInt } = require('./hexUtils')\n\nmodule.exports = createEthFilterMiddleware\n\nfunction createEthFilterMiddleware({ blockTracker, provider }) {\n\n  // create filter collection\n  let filterIndex = 0\n  let filters = {}\n  // create update mutex\n  const mutex = new Mutex()\n  const waitForFree = mutexMiddlewareWrapper({ mutex })\n\n  const middleware = createScaffoldMiddleware({\n    // install filters\n    eth_newFilter:                   waitForFree(toFilterCreationMiddleware(newLogFilter)),\n    eth_newBlockFilter:              waitForFree(toFilterCreationMiddleware(newBlockFilter)),\n    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),\n    // uninstall filters\n    eth_uninstallFilter:             waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),\n    // checking filter changes\n    eth_getFilterChanges:            waitForFree(toAsyncRpcMiddleware(getFilterChanges)),\n    eth_getFilterLogs:               waitForFree(toAsyncRpcMiddleware(getFilterLogs)),\n  })\n\n  // setup filter updating and destroy handler\n  const filterUpdater = async ({ oldBlock, newBlock }) => {\n    if (filters.length === 0) return\n    // lock update reads\n    const releaseLock = await mutex.acquire()\n    try {\n      // process all filters in parallel\n      await Promise.all(objValues(filters).map(async (filter) => {\n        try {\n         await filter.update({ oldBlock, newBlock })\n        } catch (err) {\n          // handle each error individually so filter update errors don't affect other filters\n          console.error(err)\n        }\n      }))\n    } catch (err) {\n      // log error so we don't skip the releaseLock\n      console.error(err)\n    }\n    // unlock update reads\n    releaseLock()\n  }\n\n  // expose filter methods directly\n  middleware.newLogFilter = newLogFilter\n  middleware.newBlockFilter = newBlockFilter\n  middleware.newPendingTransactionFilter = newPendingTransactionFilter\n  middleware.uninstallFilter = uninstallFilterHandler\n  middleware.getFilterChanges = getFilterChanges\n  middleware.getFilterLogs = getFilterLogs\n\n  // expose destroy method for cleanup\n  middleware.destroy = () => {\n    uninstallAllFilters()\n  }\n\n  return middleware\n\n  //\n  // new filters\n  //\n\n  async function newLogFilter(params) {\n    const filter = new LogFilter({ provider, params })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  async function newBlockFilter() {\n    const filter = new BlockFilter({ provider })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  async function newPendingTransactionFilter() {\n    const filter = new TxFilter({ provider })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  //\n  // get filter changes\n  //\n\n  async function getFilterChanges(filterIndexHex) {\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    if (!filter) {\n      throw new Error(`No filter for index \"${filterIndex}\"`)\n    }\n    const results = filter.getChangesAndClear()\n    return results\n  }\n\n  async function getFilterLogs(filterIndexHex) {\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    if (!filter) {\n      throw new Error(`No filter for index \"${filterIndex}\"`)\n    }\n    // only return results for log filters\n    let results = []\n    if (filter.type === 'log') {\n      results = filter.getAllResults()\n    }\n    return results\n  }\n\n\n  //\n  // remove filters\n  //\n\n\n  async function uninstallFilterHandler(filterIndexHex) {\n    // check filter exists\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    const result = Boolean(filter)\n    // uninstall filter\n    if (result) {\n      await uninstallFilter(filterIndex)\n    }\n    return result\n  }\n\n  //\n  // utils\n  //\n\n  async function installFilter(filter) {\n    const prevFilterCount = objValues(filters).length\n    // install filter\n    const currentBlock = await blockTracker.getLatestBlock()\n    await filter.initialize({ currentBlock })\n    filterIndex++\n    filters[filterIndex] = filter\n    filter.id = filterIndex\n    filter.idHex = intToHex(filterIndex)\n    // update block tracker subs\n    const newFilterCount = objValues(filters).length\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount })\n    return filterIndex\n  }\n\n  async function uninstallFilter(filterIndex) {\n    const prevFilterCount = objValues(filters).length\n    delete filters[filterIndex]\n    // update block tracker subs\n    const newFilterCount = objValues(filters).length\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount })\n  }\n\n  async function uninstallAllFilters() {\n    const prevFilterCount = objValues(filters).length\n    filters = {}\n    // update block tracker subs\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount: 0 })\n  }\n\n  function updateBlockTrackerSubs({ prevFilterCount, newFilterCount }) {\n    // subscribe\n    if (prevFilterCount === 0 && newFilterCount > 0) {\n      blockTracker.on('sync', filterUpdater)\n      return\n    }\n    // unsubscribe\n    if (prevFilterCount > 0 && newFilterCount === 0) {\n      blockTracker.removeListener('sync', filterUpdater)\n      return\n    }\n  }\n\n}\n\n// helper for turning filter constructors into rpc middleware\nfunction toFilterCreationMiddleware(createFilterFn) {\n  return toAsyncRpcMiddleware(async (...args) => {\n    const filter = await createFilterFn(...args)\n    const result = intToHex(filter.id)\n    return result\n  })\n}\n\n// helper for pulling out req.params and setting res.result\nfunction toAsyncRpcMiddleware(asyncFn) {\n  return createAsyncMiddleware(async (req, res) => {\n    const result = await asyncFn.apply(null, req.params)\n    res.result = result\n  })\n}\n\nfunction mutexMiddlewareWrapper({ mutex }) {\n  return (middleware) => {\n    return async (req, res, next, end) => {\n      // wait for mutex available\n      // we can release immediately because\n      // we just need to make sure updates aren't active\n      const releaseLock = await mutex.acquire()\n      releaseLock()\n      middleware(req, res, next, end)\n    }\n  }\n}\n\nfunction objValues(obj, fn){\n  const values = []\n  for (let key in obj) {\n    values.push(obj[key])\n  }\n  return values\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}