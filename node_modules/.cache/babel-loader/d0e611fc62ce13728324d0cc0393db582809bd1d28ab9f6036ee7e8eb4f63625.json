{"ast":null,"code":"import _slicedToArray from \"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport React from 'react';\nimport { useSyncExternalStore } from \"./useSyncExternalStore.mjs\";\nimport { notifyManager } from \"../core/index.mjs\";\nimport { parseFilterArgs } from \"../core/utils.mjs\";\nimport { useQueryClient } from \"./QueryClientProvider.mjs\";\nexport function useIsFetching(arg1, arg2, arg3) {\n  var _parseFilterArgs = parseFilterArgs(arg1, arg2, arg3),\n    _parseFilterArgs2 = _slicedToArray(_parseFilterArgs, 2),\n    filters = _parseFilterArgs2[0],\n    _parseFilterArgs2$ = _parseFilterArgs2[1],\n    options = _parseFilterArgs2$ === void 0 ? {} : _parseFilterArgs2$;\n  var queryClient = useQueryClient({\n    context: options.context\n  });\n  var queryCache = queryClient.getQueryCache();\n  return useSyncExternalStore(React.useCallback(function (onStoreChange) {\n    return queryCache.subscribe(notifyManager.batchCalls(onStoreChange));\n  }, [queryCache]), function () {\n    return queryClient.isFetching(filters);\n  }, function () {\n    return queryClient.isFetching(filters);\n  });\n}","map":{"version":3,"names":["React","useSyncExternalStore","notifyManager","parseFilterArgs","useQueryClient","useIsFetching","arg1","arg2","arg3","_parseFilterArgs","_parseFilterArgs2","_slicedToArray","filters","_parseFilterArgs2$","options","queryClient","context","queryCache","getQueryCache","useCallback","onStoreChange","subscribe","batchCalls","isFetching"],"sources":["D:/Projects/RainbowKit/connectwallet/node_modules/react-query/lib/reactjs/useIsFetching.mjs"],"sourcesContent":["import React from 'react';\nimport { useSyncExternalStore } from \"./useSyncExternalStore.mjs\";\nimport { notifyManager } from \"../core/index.mjs\";\nimport { parseFilterArgs } from \"../core/utils.mjs\";\nimport { useQueryClient } from \"./QueryClientProvider.mjs\";\nexport function useIsFetching(arg1, arg2, arg3) {\n  const [filters, options = {}] = parseFilterArgs(arg1, arg2, arg3);\n  const queryClient = useQueryClient({\n    context: options.context\n  });\n  const queryCache = queryClient.getQueryCache();\n  return useSyncExternalStore(React.useCallback(onStoreChange => queryCache.subscribe(notifyManager.batchCalls(onStoreChange)), [queryCache]), () => queryClient.isFetching(filters), () => queryClient.isFetching(filters));\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,oBAAoB,QAAQ,4BAA4B;AACjE,SAASC,aAAa,QAAQ,mBAAmB;AACjD,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,cAAc,QAAQ,2BAA2B;AAC1D,OAAO,SAASC,aAAaA,CAACC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAE;EAC9C,IAAAC,gBAAA,GAAgCN,eAAe,CAACG,IAAI,EAAEC,IAAI,EAAEC,IAAI,CAAC;IAAAE,iBAAA,GAAAC,cAAA,CAAAF,gBAAA;IAA1DG,OAAO,GAAAF,iBAAA;IAAAG,kBAAA,GAAAH,iBAAA;IAAEI,OAAO,GAAAD,kBAAA,cAAG,CAAC,CAAC,GAAAA,kBAAA;EAC5B,IAAME,WAAW,GAAGX,cAAc,CAAC;IACjCY,OAAO,EAAEF,OAAO,CAACE;EACnB,CAAC,CAAC;EACF,IAAMC,UAAU,GAAGF,WAAW,CAACG,aAAa,EAAE;EAC9C,OAAOjB,oBAAoB,CAACD,KAAK,CAACmB,WAAW,CAAC,UAAAC,aAAa;IAAA,OAAIH,UAAU,CAACI,SAAS,CAACnB,aAAa,CAACoB,UAAU,CAACF,aAAa,CAAC,CAAC;EAAA,GAAE,CAACH,UAAU,CAAC,CAAC,EAAE;IAAA,OAAMF,WAAW,CAACQ,UAAU,CAACX,OAAO,CAAC;EAAA,GAAE;IAAA,OAAMG,WAAW,CAACQ,UAAU,CAACX,OAAO,CAAC;EAAA,EAAC;AAC5N"},"metadata":{},"sourceType":"module","externalDependencies":[]}