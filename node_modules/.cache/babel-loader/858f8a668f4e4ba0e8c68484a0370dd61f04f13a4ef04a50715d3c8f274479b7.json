{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nvar _regeneratorRuntime = require(\"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _toConsumableArray = require(\"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _asyncToGenerator = require(\"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decrypt = exports.encrypt = void 0;\nvar util_1 = require(\"../util\");\n/**\n *\n * @param plainText string to be encrypted\n * @param secret hex representation of 32-byte secret\n * returns hex string representation of bytes in the order: initialization vector (iv),\n * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes. Remaining bytes are the\n * encrypted plainText.\n */\nfunction encrypt(_x, _x2) {\n  return _encrypt.apply(this, arguments);\n}\nfunction _encrypt() {\n  _encrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(plainText, secret) {\n    var ivBytes, secretKey, enc, encryptedResult, tagLength, authTag, encryptedPlaintext, authTagBytes, encryptedPlaintextBytes, concatted;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(secret.length !== 64)) {\n            _context2.next = 2;\n            break;\n          }\n          throw Error(\"secret must be 256 bits\");\n        case 2:\n          ivBytes = crypto.getRandomValues(new Uint8Array(12));\n          _context2.next = 5;\n          return crypto.subtle.importKey(\"raw\", (0, util_1.hexStringToUint8Array)(secret), {\n            name: \"aes-gcm\"\n          }, false, [\"encrypt\", \"decrypt\"]);\n        case 5:\n          secretKey = _context2.sent;\n          enc = new TextEncoder(); // Will return encrypted plainText with auth tag (ie MAC or checksum) appended at the end\n          _context2.next = 9;\n          return window.crypto.subtle.encrypt({\n            name: \"AES-GCM\",\n            iv: ivBytes\n          }, secretKey, enc.encode(plainText));\n        case 9:\n          encryptedResult = _context2.sent;\n          tagLength = 16;\n          authTag = encryptedResult.slice(encryptedResult.byteLength - tagLength);\n          encryptedPlaintext = encryptedResult.slice(0, encryptedResult.byteLength - tagLength);\n          authTagBytes = new Uint8Array(authTag);\n          encryptedPlaintextBytes = new Uint8Array(encryptedPlaintext);\n          concatted = new Uint8Array([].concat(_toConsumableArray(ivBytes), _toConsumableArray(authTagBytes), _toConsumableArray(encryptedPlaintextBytes)));\n          return _context2.abrupt(\"return\", (0, util_1.uint8ArrayToHex)(concatted));\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _encrypt.apply(this, arguments);\n}\nexports.encrypt = encrypt;\n/**\n *\n * @param cipherText hex string representation of bytes in the order: initialization vector (iv),\n * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes.\n * @param secret hex string representation of 32-byte secret\n */\nfunction decrypt(cipherText, secret) {\n  if (secret.length !== 64) throw Error(\"secret must be 256 bits\");\n  return new Promise(function (resolve, reject) {\n    void _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var secretKey, encrypted, ivBytes, authTagBytes, encryptedPlaintextBytes, concattedBytes, algo, decrypted, decoder;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return crypto.subtle.importKey(\"raw\", (0, util_1.hexStringToUint8Array)(secret), {\n              name: \"aes-gcm\"\n            }, false, [\"encrypt\", \"decrypt\"]);\n          case 2:\n            secretKey = _context.sent;\n            encrypted = (0, util_1.hexStringToUint8Array)(cipherText);\n            ivBytes = encrypted.slice(0, 12);\n            authTagBytes = encrypted.slice(12, 28);\n            encryptedPlaintextBytes = encrypted.slice(28);\n            concattedBytes = new Uint8Array([].concat(_toConsumableArray(encryptedPlaintextBytes), _toConsumableArray(authTagBytes)));\n            algo = {\n              name: \"AES-GCM\",\n              iv: new Uint8Array(ivBytes)\n            };\n            _context.prev = 9;\n            _context.next = 12;\n            return window.crypto.subtle.decrypt(algo, secretKey, concattedBytes);\n          case 12:\n            decrypted = _context.sent;\n            decoder = new TextDecoder();\n            resolve(decoder.decode(decrypted));\n            _context.next = 20;\n            break;\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](9);\n            reject(_context.t0);\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[9, 17]]);\n    }))();\n  });\n}\nexports.decrypt = decrypt;","map":{"version":3,"names":["_regeneratorRuntime","require","default","_toConsumableArray","_asyncToGenerator","Object","defineProperty","exports","value","decrypt","encrypt","util_1","_x","_x2","_encrypt","apply","arguments","mark","_callee2","plainText","secret","ivBytes","secretKey","enc","encryptedResult","tagLength","authTag","encryptedPlaintext","authTagBytes","encryptedPlaintextBytes","concatted","wrap","_callee2$","_context2","prev","next","length","Error","crypto","getRandomValues","Uint8Array","subtle","importKey","hexStringToUint8Array","name","sent","TextEncoder","window","iv","encode","slice","byteLength","concat","abrupt","uint8ArrayToHex","stop","cipherText","Promise","resolve","reject","_callee","encrypted","concattedBytes","algo","decrypted","decoder","_callee$","_context","TextDecoder","decode","t0"],"sources":["D:/Projects/RainbowKit/connectwallet/node_modules/@coinbase/wallet-sdk/dist/relay/aes256gcm.js"],"sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decrypt = exports.encrypt = void 0;\nconst util_1 = require(\"../util\");\n/**\n *\n * @param plainText string to be encrypted\n * @param secret hex representation of 32-byte secret\n * returns hex string representation of bytes in the order: initialization vector (iv),\n * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes. Remaining bytes are the\n * encrypted plainText.\n */\nasync function encrypt(plainText, secret) {\n    if (secret.length !== 64)\n        throw Error(`secret must be 256 bits`);\n    const ivBytes = crypto.getRandomValues(new Uint8Array(12));\n    const secretKey = await crypto.subtle.importKey(\"raw\", (0, util_1.hexStringToUint8Array)(secret), { name: \"aes-gcm\" }, false, [\"encrypt\", \"decrypt\"]);\n    const enc = new TextEncoder();\n    // Will return encrypted plainText with auth tag (ie MAC or checksum) appended at the end\n    const encryptedResult = await window.crypto.subtle.encrypt({\n        name: \"AES-GCM\",\n        iv: ivBytes,\n    }, secretKey, enc.encode(plainText));\n    const tagLength = 16;\n    const authTag = encryptedResult.slice(encryptedResult.byteLength - tagLength);\n    const encryptedPlaintext = encryptedResult.slice(0, encryptedResult.byteLength - tagLength);\n    const authTagBytes = new Uint8Array(authTag);\n    const encryptedPlaintextBytes = new Uint8Array(encryptedPlaintext);\n    const concatted = new Uint8Array([\n        ...ivBytes,\n        ...authTagBytes,\n        ...encryptedPlaintextBytes,\n    ]);\n    return (0, util_1.uint8ArrayToHex)(concatted);\n}\nexports.encrypt = encrypt;\n/**\n *\n * @param cipherText hex string representation of bytes in the order: initialization vector (iv),\n * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes.\n * @param secret hex string representation of 32-byte secret\n */\nfunction decrypt(cipherText, secret) {\n    if (secret.length !== 64)\n        throw Error(`secret must be 256 bits`);\n    return new Promise((resolve, reject) => {\n        void (async function () {\n            const secretKey = await crypto.subtle.importKey(\"raw\", (0, util_1.hexStringToUint8Array)(secret), { name: \"aes-gcm\" }, false, [\"encrypt\", \"decrypt\"]);\n            const encrypted = (0, util_1.hexStringToUint8Array)(cipherText);\n            const ivBytes = encrypted.slice(0, 12);\n            const authTagBytes = encrypted.slice(12, 28);\n            const encryptedPlaintextBytes = encrypted.slice(28);\n            const concattedBytes = new Uint8Array([\n                ...encryptedPlaintextBytes,\n                ...authTagBytes,\n            ]);\n            const algo = {\n                name: \"AES-GCM\",\n                iv: new Uint8Array(ivBytes),\n            };\n            try {\n                const decrypted = await window.crypto.subtle.decrypt(algo, secretKey, concattedBytes);\n                const decoder = new TextDecoder();\n                resolve(decoder.decode(decrypted));\n            }\n            catch (err) {\n                reject(err);\n            }\n        })();\n    });\n}\nexports.decrypt = decrypt;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}