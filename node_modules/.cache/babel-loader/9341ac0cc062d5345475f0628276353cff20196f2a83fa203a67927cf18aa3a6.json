{"ast":null,"code":"var _regeneratorRuntime = require(\"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar BaseFilter = require('./base-filter');\nvar getBlocksForRange = require('./getBlocksForRange');\nvar _require = require('./hexUtils'),\n  incrementHexInt = _require.incrementHexInt;\nvar BlockFilter = /*#__PURE__*/function (_BaseFilter) {\n  \"use strict\";\n\n  _inherits(BlockFilter, _BaseFilter);\n  var _super = _createSuper(BlockFilter);\n  function BlockFilter(_ref) {\n    var _this;\n    var provider = _ref.provider,\n      params = _ref.params;\n    _classCallCheck(this, BlockFilter);\n    _this = _super.call(this);\n    _this.type = 'block';\n    _this.provider = provider;\n    return _this;\n  }\n  _createClass(BlockFilter, [{\n    key: \"update\",\n    value: function () {\n      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref2) {\n        var oldBlock, newBlock, toBlock, fromBlock, blockBodies, blockHashes;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              oldBlock = _ref2.oldBlock, newBlock = _ref2.newBlock;\n              toBlock = newBlock;\n              fromBlock = incrementHexInt(oldBlock);\n              _context.next = 5;\n              return getBlocksForRange({\n                provider: this.provider,\n                fromBlock: fromBlock,\n                toBlock: toBlock\n              });\n            case 5:\n              blockBodies = _context.sent;\n              blockHashes = blockBodies.map(function (block) {\n                return block.hash;\n              });\n              this.addResults(blockHashes);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function update(_x) {\n        return _update.apply(this, arguments);\n      }\n      return update;\n    }()\n  }]);\n  return BlockFilter;\n}(BaseFilter);\nmodule.exports = BlockFilter;","map":{"version":3,"names":["BaseFilter","require","getBlocksForRange","_require","incrementHexInt","BlockFilter","_BaseFilter","_inherits","_super","_createSuper","_ref","_this","provider","params","_classCallCheck","call","type","_createClass","key","value","_update","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref2","oldBlock","newBlock","toBlock","fromBlock","blockBodies","blockHashes","wrap","_callee$","_context","prev","next","sent","map","block","hash","addResults","stop","update","_x","apply","arguments","module","exports"],"sources":["D:/Projects/RainbowKit/connectwallet/node_modules/eth-json-rpc-filters/block-filter.js"],"sourcesContent":["const BaseFilter = require('./base-filter')\nconst getBlocksForRange = require('./getBlocksForRange')\nconst { incrementHexInt } = require('./hexUtils')\n\nclass BlockFilter extends BaseFilter {\n\n  constructor ({ provider, params }) {\n    super()\n    this.type = 'block'\n    this.provider = provider\n  }\n\n  async update ({ oldBlock, newBlock }) {\n    const toBlock = newBlock\n    const fromBlock = incrementHexInt(oldBlock)\n    const blockBodies = await getBlocksForRange({ provider: this.provider, fromBlock, toBlock })\n    const blockHashes = blockBodies.map((block) => block.hash)\n    this.addResults(blockHashes)\n  }\n\n}\n\nmodule.exports = BlockFilter\n"],"mappings":";;;;;;AAAA,IAAMA,UAAU,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC3C,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AACxD,IAAAE,QAAA,GAA4BF,OAAO,CAAC,YAAY,CAAC;EAAzCG,eAAe,GAAAD,QAAA,CAAfC,eAAe;AAA0B,IAE3CC,WAAW,0BAAAC,WAAA;EAAA;;EAAAC,SAAA,CAAAF,WAAA,EAAAC,WAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,WAAA;EAEf,SAAAA,YAAAK,IAAA,EAAmC;IAAA,IAAAC,KAAA;IAAA,IAApBC,QAAQ,GAAAF,IAAA,CAARE,QAAQ;MAAEC,MAAM,GAAAH,IAAA,CAANG,MAAM;IAAAC,eAAA,OAAAT,WAAA;IAC7BM,KAAA,GAAAH,MAAA,CAAAO,IAAA;IACAJ,KAAA,CAAKK,IAAI,GAAG,OAAO;IACnBL,KAAA,CAAKC,QAAQ,GAAGA,QAAQ;IAAA,OAAAD,KAAA;EAC1B;EAACM,YAAA,CAAAZ,WAAA;IAAAa,GAAA;IAAAC,KAAA;MAAA,IAAAC,OAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAC,QAAAC,KAAA;QAAA,IAAAC,QAAA,EAAAC,QAAA,EAAAC,OAAA,EAAAC,SAAA,EAAAC,WAAA,EAAAC,WAAA;QAAA,OAAAT,mBAAA,GAAAU,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAgBV,QAAQ,GAAAD,KAAA,CAARC,QAAQ,EAAEC,QAAQ,GAAAF,KAAA,CAARE,QAAQ;cAC1BC,OAAO,GAAGD,QAAQ;cAClBE,SAAS,GAAGzB,eAAe,CAACsB,QAAQ,CAAC;cAAAQ,QAAA,CAAAE,IAAA;cAAA,OACjBlC,iBAAiB,CAAC;gBAAEU,QAAQ,EAAE,IAAI,CAACA,QAAQ;gBAAEiB,SAAS,EAATA,SAAS;gBAAED,OAAO,EAAPA;cAAQ,CAAC,CAAC;YAAA;cAAtFE,WAAW,GAAAI,QAAA,CAAAG,IAAA;cACXN,WAAW,GAAGD,WAAW,CAACQ,GAAG,CAAC,UAACC,KAAK;gBAAA,OAAKA,KAAK,CAACC,IAAI;cAAA,EAAC;cAC1D,IAAI,CAACC,UAAU,CAACV,WAAW,CAAC;YAAA;YAAA;cAAA,OAAAG,QAAA,CAAAQ,IAAA;UAAA;QAAA,GAAAlB,OAAA;MAAA,CAC7B;MAAA,SAAAmB,OAAAC,EAAA;QAAA,OAAAxB,OAAA,CAAAyB,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAH,MAAA;IAAA;EAAA;EAAA,OAAAtC,WAAA;AAAA,EAduBL,UAAU;AAkBpC+C,MAAM,CAACC,OAAO,GAAG3C,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}