{"ast":null,"code":"var _regeneratorRuntime = require(\"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar SafeEventEmitter = require('@metamask/safe-event-emitter').default;\nvar _require = require('json-rpc-engine'),\n  createAsyncMiddleware = _require.createAsyncMiddleware,\n  createScaffoldMiddleware = _require.createScaffoldMiddleware;\nvar createFilterMiddleware = require('./index.js');\nvar _require2 = require('./hexUtils.js'),\n  unsafeRandomBytes = _require2.unsafeRandomBytes,\n  incrementHexInt = _require2.incrementHexInt;\nvar getBlocksForRange = require('./getBlocksForRange.js');\nmodule.exports = createSubscriptionMiddleware;\nfunction createSubscriptionMiddleware(_ref) {\n  var blockTracker = _ref.blockTracker,\n    provider = _ref.provider;\n  // state and utilities for handling subscriptions\n  var subscriptions = {};\n  var filterManager = createFilterMiddleware({\n    blockTracker: blockTracker,\n    provider: provider\n  });\n\n  // internal flag\n  var isDestroyed = false;\n\n  // create subscriptionManager api object\n  var events = new SafeEventEmitter();\n  var middleware = createScaffoldMiddleware({\n    eth_subscribe: createAsyncMiddleware(subscribe),\n    eth_unsubscribe: createAsyncMiddleware(unsubscribe)\n  });\n  middleware.destroy = destroy;\n  return {\n    events: events,\n    middleware: middleware\n  };\n  function subscribe(_x, _x2) {\n    return _subscribe.apply(this, arguments);\n  }\n  function _subscribe() {\n    _subscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res) {\n      var subscriptionType, subId, sub, filterParams, filter, createSubNewHeads, createSubFromFilter;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            createSubFromFilter = function _createSubFromFilter(_ref4) {\n              var subId = _ref4.subId,\n                filter = _ref4.filter;\n              filter.on('update', function (result) {\n                return _emitSubscriptionResult(subId, result);\n              });\n              var sub = {\n                type: subscriptionType,\n                destroy: function () {\n                  var _destroy2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n                    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                      while (1) switch (_context3.prev = _context3.next) {\n                        case 0:\n                          _context3.next = 2;\n                          return filterManager.uninstallFilter(filter.idHex);\n                        case 2:\n                          return _context3.abrupt(\"return\", _context3.sent);\n                        case 3:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }, _callee3);\n                  }));\n                  function destroy() {\n                    return _destroy2.apply(this, arguments);\n                  }\n                  return destroy;\n                }()\n              };\n              return sub;\n            };\n            createSubNewHeads = function _createSubNewHeads(_ref2) {\n              var subId = _ref2.subId;\n              var sub = {\n                type: subscriptionType,\n                destroy: function () {\n                  var _destroy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                      while (1) switch (_context.prev = _context.next) {\n                        case 0:\n                          blockTracker.removeListener('sync', sub.update);\n                        case 1:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }, _callee);\n                  }));\n                  function destroy() {\n                    return _destroy.apply(this, arguments);\n                  }\n                  return destroy;\n                }(),\n                update: function () {\n                  var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref3) {\n                    var oldBlock, newBlock, toBlock, fromBlock, rawBlocks, results;\n                    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                      while (1) switch (_context2.prev = _context2.next) {\n                        case 0:\n                          oldBlock = _ref3.oldBlock, newBlock = _ref3.newBlock;\n                          // for newHeads\n                          toBlock = newBlock;\n                          fromBlock = incrementHexInt(oldBlock);\n                          _context2.next = 5;\n                          return getBlocksForRange({\n                            provider: provider,\n                            fromBlock: fromBlock,\n                            toBlock: toBlock\n                          });\n                        case 5:\n                          rawBlocks = _context2.sent;\n                          results = rawBlocks.map(normalizeBlock).filter(function (block) {\n                            return block !== null;\n                          });\n                          results.forEach(function (value) {\n                            _emitSubscriptionResult(subId, value);\n                          });\n                        case 8:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }, _callee2);\n                  }));\n                  function update(_x5) {\n                    return _update.apply(this, arguments);\n                  }\n                  return update;\n                }()\n              };\n              // check for subscription updates on new block\n              blockTracker.on('sync', sub.update);\n              return sub;\n            };\n            if (!isDestroyed) {\n              _context4.next = 4;\n              break;\n            }\n            throw new Error('SubscriptionManager - attempting to use after destroying');\n          case 4:\n            subscriptionType = req.params[0]; // subId is 16 byte hex string\n            subId = unsafeRandomBytes(16); // create sub\n            _context4.t0 = subscriptionType;\n            _context4.next = _context4.t0 === 'newHeads' ? 9 : _context4.t0 === 'logs' ? 11 : 17;\n            break;\n          case 9:\n            sub = createSubNewHeads({\n              subId: subId\n            });\n            return _context4.abrupt(\"break\", 18);\n          case 11:\n            filterParams = req.params[1];\n            _context4.next = 14;\n            return filterManager.newLogFilter(filterParams);\n          case 14:\n            filter = _context4.sent;\n            sub = createSubFromFilter({\n              subId: subId,\n              filter: filter\n            });\n            return _context4.abrupt(\"break\", 18);\n          case 17:\n            throw new Error(\"SubscriptionManager - unsupported subscription type \\\"\".concat(subscriptionType, \"\\\"\"));\n          case 18:\n            subscriptions[subId] = sub;\n            res.result = subId;\n            return _context4.abrupt(\"return\");\n          case 21:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }));\n    return _subscribe.apply(this, arguments);\n  }\n  function unsubscribe(_x3, _x4) {\n    return _unsubscribe.apply(this, arguments);\n  }\n  function _unsubscribe() {\n    _unsubscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {\n      var id, subscription;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            if (!isDestroyed) {\n              _context5.next = 2;\n              break;\n            }\n            throw new Error('SubscriptionManager - attempting to use after destroying');\n          case 2:\n            id = req.params[0];\n            subscription = subscriptions[id]; // if missing, return \"false\" to indicate it was not removed\n            if (subscription) {\n              _context5.next = 7;\n              break;\n            }\n            res.result = false;\n            return _context5.abrupt(\"return\");\n          case 7:\n            // cleanup subscription\n            delete subscriptions[id];\n            _context5.next = 10;\n            return subscription.destroy();\n          case 10:\n            res.result = true;\n          case 11:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5);\n    }));\n    return _unsubscribe.apply(this, arguments);\n  }\n  function _emitSubscriptionResult(filterIdHex, value) {\n    events.emit('notification', {\n      jsonrpc: '2.0',\n      method: 'eth_subscription',\n      params: {\n        subscription: filterIdHex,\n        result: value\n      }\n    });\n  }\n  function destroy() {\n    events.removeAllListeners();\n    for (var id in subscriptions) {\n      subscriptions[id].destroy();\n      delete subscriptions[id];\n    }\n    isDestroyed = true;\n  }\n}\nfunction normalizeBlock(block) {\n  if (block === null || block === undefined) {\n    return null;\n  }\n  return {\n    hash: block.hash,\n    parentHash: block.parentHash,\n    sha3Uncles: block.sha3Uncles,\n    miner: block.miner,\n    stateRoot: block.stateRoot,\n    transactionsRoot: block.transactionsRoot,\n    receiptsRoot: block.receiptsRoot,\n    logsBloom: block.logsBloom,\n    difficulty: block.difficulty,\n    number: block.number,\n    gasLimit: block.gasLimit,\n    gasUsed: block.gasUsed,\n    nonce: block.nonce,\n    mixHash: block.mixHash,\n    timestamp: block.timestamp,\n    extraData: block.extraData\n  };\n}","map":{"version":3,"names":["SafeEventEmitter","require","default","_require","createAsyncMiddleware","createScaffoldMiddleware","createFilterMiddleware","_require2","unsafeRandomBytes","incrementHexInt","getBlocksForRange","module","exports","createSubscriptionMiddleware","_ref","blockTracker","provider","subscriptions","filterManager","isDestroyed","events","middleware","eth_subscribe","subscribe","eth_unsubscribe","unsubscribe","destroy","_x","_x2","_subscribe","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee4","req","res","subscriptionType","subId","sub","filterParams","filter","createSubNewHeads","createSubFromFilter","wrap","_callee4$","_context4","prev","next","_createSubFromFilter","_ref4","on","result","_emitSubscriptionResult","type","_destroy2","_callee3","_callee3$","_context3","uninstallFilter","idHex","abrupt","sent","stop","_createSubNewHeads","_ref2","_destroy","_callee","_callee$","_context","removeListener","update","_update","_callee2","_ref3","oldBlock","newBlock","toBlock","fromBlock","rawBlocks","results","_callee2$","_context2","map","normalizeBlock","block","forEach","value","_x5","Error","params","t0","newLogFilter","concat","_x3","_x4","_unsubscribe","_callee5","id","subscription","_callee5$","_context5","filterIdHex","emit","jsonrpc","method","removeAllListeners","undefined","hash","parentHash","sha3Uncles","miner","stateRoot","transactionsRoot","receiptsRoot","logsBloom","difficulty","number","gasLimit","gasUsed","nonce","mixHash","timestamp","extraData"],"sources":["D:/Projects/RainbowKit/connectwallet/node_modules/eth-json-rpc-filters/subscriptionManager.js"],"sourcesContent":["const SafeEventEmitter = require('@metamask/safe-event-emitter').default\nconst { createAsyncMiddleware, createScaffoldMiddleware } = require('json-rpc-engine')\nconst createFilterMiddleware = require('./index.js')\nconst { unsafeRandomBytes, incrementHexInt } = require('./hexUtils.js')\nconst getBlocksForRange = require('./getBlocksForRange.js')\n\nmodule.exports = createSubscriptionMiddleware\n\n\nfunction createSubscriptionMiddleware({ blockTracker, provider }) {\n  // state and utilities for handling subscriptions\n  const subscriptions = {}\n  const filterManager = createFilterMiddleware({ blockTracker, provider })\n\n  // internal flag\n  let isDestroyed = false\n\n  // create subscriptionManager api object\n  const events = new SafeEventEmitter()\n  const middleware = createScaffoldMiddleware({\n    eth_subscribe: createAsyncMiddleware(subscribe),\n    eth_unsubscribe: createAsyncMiddleware(unsubscribe),\n  })\n  middleware.destroy = destroy\n  return { events, middleware }\n\n  async function subscribe(req, res) {\n\n    if (isDestroyed) throw new Error(\n      'SubscriptionManager - attempting to use after destroying'\n    )\n\n    const subscriptionType = req.params[0]\n    // subId is 16 byte hex string\n    const subId = unsafeRandomBytes(16)\n\n    // create sub\n    let sub\n    switch (subscriptionType) {\n      case 'newHeads':\n        sub = createSubNewHeads({ subId })\n        break\n      case 'logs':\n        const filterParams = req.params[1]\n        const filter = await filterManager.newLogFilter(filterParams)\n        sub = createSubFromFilter({ subId, filter })\n        break\n      default:\n        throw new Error(`SubscriptionManager - unsupported subscription type \"${subscriptionType}\"`)\n\n    }\n    subscriptions[subId] = sub\n\n    res.result = subId\n    return\n\n    function createSubNewHeads({ subId }) {\n      const sub = {\n        type: subscriptionType,\n        destroy: async () => {\n          blockTracker.removeListener('sync', sub.update)\n        },\n        update: async ({ oldBlock, newBlock }) => {\n          // for newHeads\n          const toBlock = newBlock\n          const fromBlock = incrementHexInt(oldBlock)\n          const rawBlocks = await getBlocksForRange({ provider, fromBlock, toBlock })\n          const results = rawBlocks.map(normalizeBlock).filter(block => block !== null)\n          results.forEach((value) => {\n            _emitSubscriptionResult(subId, value)\n          })\n        }\n      }\n      // check for subscription updates on new block\n      blockTracker.on('sync', sub.update)\n      return sub\n    }\n\n    function createSubFromFilter({ subId, filter }) {\n      filter.on('update', result => _emitSubscriptionResult(subId, result))\n      const sub = {\n        type: subscriptionType,\n        destroy: async () => {\n          return await filterManager.uninstallFilter(filter.idHex)\n        },\n      }\n      return sub\n    }\n  }\n\n  async function unsubscribe(req, res) {\n\n    if (isDestroyed) throw new Error(\n      'SubscriptionManager - attempting to use after destroying'\n    )\n\n    const id = req.params[0]\n    const subscription = subscriptions[id]\n    // if missing, return \"false\" to indicate it was not removed\n    if (!subscription) {\n      res.result = false\n      return\n    }\n    // cleanup subscription\n    delete subscriptions[id]\n    await subscription.destroy()\n    res.result = true\n  }\n\n  function _emitSubscriptionResult(filterIdHex, value) {\n    events.emit('notification', {\n      jsonrpc: '2.0',\n      method: 'eth_subscription',\n      params: {\n        subscription: filterIdHex,\n        result: value,\n      },\n    })\n  }\n\n  function destroy() {\n    events.removeAllListeners()\n    for (const id in subscriptions) {\n      subscriptions[id].destroy()\n      delete subscriptions[id]\n    }\n    isDestroyed = true\n  }\n}\n\nfunction normalizeBlock(block) {\n  if (block === null || block === undefined) {\n    return null;\n  }\n  return {\n    hash: block.hash,\n    parentHash: block.parentHash,\n    sha3Uncles: block.sha3Uncles,\n    miner: block.miner,\n    stateRoot: block.stateRoot,\n    transactionsRoot: block.transactionsRoot,\n    receiptsRoot: block.receiptsRoot,\n    logsBloom: block.logsBloom,\n    difficulty: block.difficulty,\n    number: block.number,\n    gasLimit: block.gasLimit,\n    gasUsed: block.gasUsed,\n    nonce: block.nonce,\n    mixHash: block.mixHash,\n    timestamp: block.timestamp,\n    extraData: block.extraData,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}