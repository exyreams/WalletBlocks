{"ast":null,"code":"import _objectSpread from \"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { hashQueryKey, noop, parseFilterArgs, parseQueryArgs, partialMatchKey, hashQueryKeyByOptions, functionalUpdate } from \"./utils.mjs\";\nimport { QueryCache } from \"./queryCache.mjs\";\nimport { MutationCache } from \"./mutationCache.mjs\";\nimport { focusManager } from \"./focusManager.mjs\";\nimport { onlineManager } from \"./onlineManager.mjs\";\nimport { notifyManager } from \"./notifyManager.mjs\";\nimport { infiniteQueryBehavior } from \"./infiniteQueryBehavior.mjs\";\nimport { defaultLogger } from \"./logger.mjs\"; // TYPES\n\n// CLASS\nexport var QueryClient = /*#__PURE__*/function () {\n  function QueryClient() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, QueryClient);\n    this.queryCache = config.queryCache || new QueryCache();\n    this.mutationCache = config.mutationCache || new MutationCache();\n    this.logger = config.logger || defaultLogger;\n    this.defaultOptions = config.defaultOptions || {};\n    this.queryDefaults = [];\n    this.mutationDefaults = [];\n  }\n  _createClass(QueryClient, [{\n    key: \"mount\",\n    value: function mount() {\n      var _this = this;\n      this.unsubscribeFocus = focusManager.subscribe(function () {\n        if (focusManager.isFocused()) {\n          _this.resumePausedMutations();\n          _this.queryCache.onFocus();\n        }\n      });\n      this.unsubscribeOnline = onlineManager.subscribe(function () {\n        if (onlineManager.isOnline()) {\n          _this.resumePausedMutations();\n          _this.queryCache.onOnline();\n        }\n      });\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {\n      var _this$unsubscribeFocu, _this$unsubscribeOnli;\n      (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);\n      (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);\n    }\n  }, {\n    key: \"isFetching\",\n    value: function isFetching(arg1, arg2) {\n      var _parseFilterArgs = parseFilterArgs(arg1, arg2),\n        _parseFilterArgs2 = _slicedToArray(_parseFilterArgs, 1),\n        filters = _parseFilterArgs2[0];\n      filters.fetchStatus = 'fetching';\n      return this.queryCache.findAll(filters).length;\n    }\n  }, {\n    key: \"isMutating\",\n    value: function isMutating(filters) {\n      return this.mutationCache.findAll(_objectSpread(_objectSpread({}, filters), {}, {\n        fetching: true\n      })).length;\n    }\n  }, {\n    key: \"getQueryData\",\n    value: function getQueryData(queryKey, filters) {\n      var _this$queryCache$find;\n      return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;\n    }\n  }, {\n    key: \"getQueriesData\",\n    value: function getQueriesData(queryKeyOrFilters) {\n      return this.getQueryCache().findAll(queryKeyOrFilters).map(function (_ref2) {\n        var queryKey = _ref2.queryKey,\n          state = _ref2.state;\n        var data = state.data;\n        return [queryKey, data];\n      });\n    }\n  }, {\n    key: \"setQueryData\",\n    value: function setQueryData(queryKey, updater, options) {\n      var query = this.queryCache.find(queryKey);\n      var prevData = query == null ? void 0 : query.state.data;\n      var data = functionalUpdate(updater, prevData);\n      if (typeof data === 'undefined') {\n        return undefined;\n      }\n      var parsedOptions = parseQueryArgs(queryKey);\n      var defaultedOptions = this.defaultQueryOptions(parsedOptions);\n      return this.queryCache.build(this, defaultedOptions).setData(data, _objectSpread(_objectSpread({}, options), {}, {\n        manual: true\n      }));\n    }\n  }, {\n    key: \"setQueriesData\",\n    value: function setQueriesData(queryKeyOrFilters, updater, options) {\n      var _this2 = this;\n      return notifyManager.batch(function () {\n        return _this2.getQueryCache().findAll(queryKeyOrFilters).map(function (_ref3) {\n          var queryKey = _ref3.queryKey;\n          return [queryKey, _this2.setQueryData(queryKey, updater, options)];\n        });\n      });\n    }\n  }, {\n    key: \"getQueryState\",\n    value: function getQueryState(queryKey, filters) {\n      var _this$queryCache$find2;\n      return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;\n    }\n  }, {\n    key: \"removeQueries\",\n    value: function removeQueries(arg1, arg2) {\n      var _parseFilterArgs3 = parseFilterArgs(arg1, arg2),\n        _parseFilterArgs4 = _slicedToArray(_parseFilterArgs3, 1),\n        filters = _parseFilterArgs4[0];\n      var queryCache = this.queryCache;\n      notifyManager.batch(function () {\n        queryCache.findAll(filters).forEach(function (query) {\n          queryCache.remove(query);\n        });\n      });\n    }\n  }, {\n    key: \"resetQueries\",\n    value: function resetQueries(arg1, arg2, arg3) {\n      var _this3 = this;\n      var _parseFilterArgs5 = parseFilterArgs(arg1, arg2, arg3),\n        _parseFilterArgs6 = _slicedToArray(_parseFilterArgs5, 2),\n        filters = _parseFilterArgs6[0],\n        options = _parseFilterArgs6[1];\n      var queryCache = this.queryCache;\n      var refetchFilters = _objectSpread({\n        type: 'active'\n      }, filters);\n      return notifyManager.batch(function () {\n        queryCache.findAll(filters).forEach(function (query) {\n          query.reset();\n        });\n        return _this3.refetchQueries(refetchFilters, options);\n      });\n    }\n  }, {\n    key: \"cancelQueries\",\n    value: function cancelQueries(arg1, arg2, arg3) {\n      var _this4 = this;\n      var _parseFilterArgs7 = parseFilterArgs(arg1, arg2, arg3),\n        _parseFilterArgs8 = _slicedToArray(_parseFilterArgs7, 2),\n        filters = _parseFilterArgs8[0],\n        _parseFilterArgs8$ = _parseFilterArgs8[1],\n        cancelOptions = _parseFilterArgs8$ === void 0 ? {} : _parseFilterArgs8$;\n      if (typeof cancelOptions.revert === 'undefined') {\n        cancelOptions.revert = true;\n      }\n      var promises = notifyManager.batch(function () {\n        return _this4.queryCache.findAll(filters).map(function (query) {\n          return query.cancel(cancelOptions);\n        });\n      });\n      return Promise.all(promises).then(noop).catch(noop);\n    }\n  }, {\n    key: \"invalidateQueries\",\n    value: function invalidateQueries(arg1, arg2, arg3) {\n      var _this5 = this;\n      var _parseFilterArgs9 = parseFilterArgs(arg1, arg2, arg3),\n        _parseFilterArgs10 = _slicedToArray(_parseFilterArgs9, 2),\n        filters = _parseFilterArgs10[0],\n        options = _parseFilterArgs10[1];\n      return notifyManager.batch(function () {\n        var _ref, _filters$refetchType;\n        _this5.queryCache.findAll(filters).forEach(function (query) {\n          query.invalidate();\n        });\n        if (filters.refetchType === 'none') {\n          return Promise.resolve();\n        }\n        var refetchFilters = _objectSpread(_objectSpread({}, filters), {}, {\n          type: (_ref = (_filters$refetchType = filters.refetchType) != null ? _filters$refetchType : filters.type) != null ? _ref : 'active'\n        });\n        return _this5.refetchQueries(refetchFilters, options);\n      });\n    }\n  }, {\n    key: \"refetchQueries\",\n    value: function refetchQueries(arg1, arg2, arg3) {\n      var _this6 = this;\n      var _parseFilterArgs11 = parseFilterArgs(arg1, arg2, arg3),\n        _parseFilterArgs12 = _slicedToArray(_parseFilterArgs11, 2),\n        filters = _parseFilterArgs12[0],\n        options = _parseFilterArgs12[1];\n      var promises = notifyManager.batch(function () {\n        return _this6.queryCache.findAll(filters).filter(function (query) {\n          return !query.isDisabled();\n        }).map(function (query) {\n          var _options$cancelRefetc;\n          return query.fetch(undefined, _objectSpread(_objectSpread({}, options), {}, {\n            cancelRefetch: (_options$cancelRefetc = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc : true,\n            meta: {\n              refetchPage: filters.refetchPage\n            }\n          }));\n        });\n      });\n      var promise = Promise.all(promises).then(noop);\n      if (!(options != null && options.throwOnError)) {\n        promise = promise.catch(noop);\n      }\n      return promise;\n    }\n  }, {\n    key: \"fetchQuery\",\n    value: function fetchQuery(arg1, arg2, arg3) {\n      var parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n      var defaultedOptions = this.defaultQueryOptions(parsedOptions); // https://github.com/tannerlinsley/react-query/issues/652\n\n      if (typeof defaultedOptions.retry === 'undefined') {\n        defaultedOptions.retry = false;\n      }\n      var query = this.queryCache.build(this, defaultedOptions);\n      return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n    }\n  }, {\n    key: \"prefetchQuery\",\n    value: function prefetchQuery(arg1, arg2, arg3) {\n      return this.fetchQuery(arg1, arg2, arg3).then(noop).catch(noop);\n    }\n  }, {\n    key: \"fetchInfiniteQuery\",\n    value: function fetchInfiniteQuery(arg1, arg2, arg3) {\n      var parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n      parsedOptions.behavior = infiniteQueryBehavior();\n      return this.fetchQuery(parsedOptions);\n    }\n  }, {\n    key: \"prefetchInfiniteQuery\",\n    value: function prefetchInfiniteQuery(arg1, arg2, arg3) {\n      return this.fetchInfiniteQuery(arg1, arg2, arg3).then(noop).catch(noop);\n    }\n  }, {\n    key: \"resumePausedMutations\",\n    value: function resumePausedMutations() {\n      return this.mutationCache.resumePausedMutations();\n    }\n  }, {\n    key: \"getQueryCache\",\n    value: function getQueryCache() {\n      return this.queryCache;\n    }\n  }, {\n    key: \"getMutationCache\",\n    value: function getMutationCache() {\n      return this.mutationCache;\n    }\n  }, {\n    key: \"getLogger\",\n    value: function getLogger() {\n      return this.logger;\n    }\n  }, {\n    key: \"getDefaultOptions\",\n    value: function getDefaultOptions() {\n      return this.defaultOptions;\n    }\n  }, {\n    key: \"setDefaultOptions\",\n    value: function setDefaultOptions(options) {\n      this.defaultOptions = options;\n    }\n  }, {\n    key: \"setQueryDefaults\",\n    value: function setQueryDefaults(queryKey, options) {\n      var result = this.queryDefaults.find(function (x) {\n        return hashQueryKey(queryKey) === hashQueryKey(x.queryKey);\n      });\n      if (result) {\n        result.defaultOptions = options;\n      } else {\n        this.queryDefaults.push({\n          queryKey: queryKey,\n          defaultOptions: options\n        });\n      }\n    }\n  }, {\n    key: \"getQueryDefaults\",\n    value: function getQueryDefaults(queryKey) {\n      if (!queryKey) {\n        return undefined;\n      } // Get the first matching defaults\n\n      var firstMatchingDefaults = this.queryDefaults.find(function (x) {\n        return partialMatchKey(queryKey, x.queryKey);\n      }); // Additional checks and error in dev mode\n\n      if (process.env.NODE_ENV !== 'production') {\n        // Retrieve all matching defaults for the given key\n        var matchingDefaults = this.queryDefaults.filter(function (x) {\n          return partialMatchKey(queryKey, x.queryKey);\n        }); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n        if (matchingDefaults.length > 1) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.logger.error(\"[QueryClient] Several query defaults match with key '\" + JSON.stringify(queryKey) + \"'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.\");\n          }\n        }\n      }\n      return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n    }\n  }, {\n    key: \"setMutationDefaults\",\n    value: function setMutationDefaults(mutationKey, options) {\n      var result = this.mutationDefaults.find(function (x) {\n        return hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey);\n      });\n      if (result) {\n        result.defaultOptions = options;\n      } else {\n        this.mutationDefaults.push({\n          mutationKey: mutationKey,\n          defaultOptions: options\n        });\n      }\n    }\n  }, {\n    key: \"getMutationDefaults\",\n    value: function getMutationDefaults(mutationKey) {\n      if (!mutationKey) {\n        return undefined;\n      } // Get the first matching defaults\n\n      var firstMatchingDefaults = this.mutationDefaults.find(function (x) {\n        return partialMatchKey(mutationKey, x.mutationKey);\n      }); // Additional checks and error in dev mode\n\n      if (process.env.NODE_ENV !== 'production') {\n        // Retrieve all matching defaults for the given key\n        var matchingDefaults = this.mutationDefaults.filter(function (x) {\n          return partialMatchKey(mutationKey, x.mutationKey);\n        }); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n        if (matchingDefaults.length > 1) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.logger.error(\"[QueryClient] Several mutation defaults match with key '\" + JSON.stringify(mutationKey) + \"'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.\");\n          }\n        }\n      }\n      return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n    }\n  }, {\n    key: \"defaultQueryOptions\",\n    value: function defaultQueryOptions(options) {\n      if (options != null && options._defaulted) {\n        return options;\n      }\n      var defaultedOptions = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, this.defaultOptions.queries), this.getQueryDefaults(options == null ? void 0 : options.queryKey)), options), {}, {\n        _defaulted: true\n      });\n      if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n        defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);\n      } // dependent default values\n\n      if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n        defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== 'always';\n      }\n      if (typeof defaultedOptions.useErrorBoundary === 'undefined') {\n        defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense;\n      }\n      return defaultedOptions;\n    }\n  }, {\n    key: \"defaultMutationOptions\",\n    value: function defaultMutationOptions(options) {\n      if (options != null && options._defaulted) {\n        return options;\n      }\n      return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, this.defaultOptions.mutations), this.getMutationDefaults(options == null ? void 0 : options.mutationKey)), options), {}, {\n        _defaulted: true\n      });\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.queryCache.clear();\n      this.mutationCache.clear();\n    }\n  }]);\n  return QueryClient;\n}();","map":{"version":3,"names":["hashQueryKey","noop","parseFilterArgs","parseQueryArgs","partialMatchKey","hashQueryKeyByOptions","functionalUpdate","QueryCache","MutationCache","focusManager","onlineManager","notifyManager","infiniteQueryBehavior","defaultLogger","QueryClient","config","arguments","length","undefined","_classCallCheck","queryCache","mutationCache","logger","defaultOptions","queryDefaults","mutationDefaults","_createClass","key","value","mount","_this","unsubscribeFocus","subscribe","isFocused","resumePausedMutations","onFocus","unsubscribeOnline","isOnline","onOnline","unmount","_this$unsubscribeFocu","_this$unsubscribeOnli","call","isFetching","arg1","arg2","_parseFilterArgs","_parseFilterArgs2","_slicedToArray","filters","fetchStatus","findAll","isMutating","_objectSpread","fetching","getQueryData","queryKey","_this$queryCache$find","find","state","data","getQueriesData","queryKeyOrFilters","getQueryCache","map","_ref2","setQueryData","updater","options","query","prevData","parsedOptions","defaultedOptions","defaultQueryOptions","build","setData","manual","setQueriesData","_this2","batch","_ref3","getQueryState","_this$queryCache$find2","removeQueries","_parseFilterArgs3","_parseFilterArgs4","forEach","remove","resetQueries","arg3","_this3","_parseFilterArgs5","_parseFilterArgs6","refetchFilters","type","reset","refetchQueries","cancelQueries","_this4","_parseFilterArgs7","_parseFilterArgs8","_parseFilterArgs8$","cancelOptions","revert","promises","cancel","Promise","all","then","catch","invalidateQueries","_this5","_parseFilterArgs9","_parseFilterArgs10","_ref","_filters$refetchType","invalidate","refetchType","resolve","_this6","_parseFilterArgs11","_parseFilterArgs12","filter","isDisabled","_options$cancelRefetc","fetch","cancelRefetch","meta","refetchPage","promise","throwOnError","fetchQuery","retry","isStaleByTime","staleTime","prefetchQuery","fetchInfiniteQuery","behavior","prefetchInfiniteQuery","getMutationCache","getLogger","getDefaultOptions","setDefaultOptions","setQueryDefaults","result","x","push","getQueryDefaults","firstMatchingDefaults","process","env","NODE_ENV","matchingDefaults","error","JSON","stringify","setMutationDefaults","mutationKey","getMutationDefaults","_defaulted","queries","queryHash","refetchOnReconnect","networkMode","useErrorBoundary","suspense","defaultMutationOptions","mutations","clear"],"sources":["D:/Projects/RainbowKit/connectwallet/node_modules/react-query/lib/core/queryClient.mjs"],"sourcesContent":["import { hashQueryKey, noop, parseFilterArgs, parseQueryArgs, partialMatchKey, hashQueryKeyByOptions, functionalUpdate } from \"./utils.mjs\";\nimport { QueryCache } from \"./queryCache.mjs\";\nimport { MutationCache } from \"./mutationCache.mjs\";\nimport { focusManager } from \"./focusManager.mjs\";\nimport { onlineManager } from \"./onlineManager.mjs\";\nimport { notifyManager } from \"./notifyManager.mjs\";\nimport { infiniteQueryBehavior } from \"./infiniteQueryBehavior.mjs\";\nimport { defaultLogger } from \"./logger.mjs\"; // TYPES\n\n// CLASS\nexport class QueryClient {\n  constructor(config = {}) {\n    this.queryCache = config.queryCache || new QueryCache();\n    this.mutationCache = config.mutationCache || new MutationCache();\n    this.logger = config.logger || defaultLogger;\n    this.defaultOptions = config.defaultOptions || {};\n    this.queryDefaults = [];\n    this.mutationDefaults = [];\n  }\n\n  mount() {\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations();\n        this.queryCache.onFocus();\n      }\n    });\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations();\n        this.queryCache.onOnline();\n      }\n    });\n  }\n\n  unmount() {\n    var _this$unsubscribeFocu, _this$unsubscribeOnli;\n\n    (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);\n    (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);\n  }\n\n  isFetching(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    filters.fetchStatus = 'fetching';\n    return this.queryCache.findAll(filters).length;\n  }\n\n  isMutating(filters) {\n    return this.mutationCache.findAll({ ...filters,\n      fetching: true\n    }).length;\n  }\n\n  getQueryData(queryKey, filters) {\n    var _this$queryCache$find;\n\n    return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;\n  }\n\n  getQueriesData(queryKeyOrFilters) {\n    return this.getQueryCache().findAll(queryKeyOrFilters).map(({\n      queryKey,\n      state\n    }) => {\n      const data = state.data;\n      return [queryKey, data];\n    });\n  }\n\n  setQueryData(queryKey, updater, options) {\n    const query = this.queryCache.find(queryKey);\n    const prevData = query == null ? void 0 : query.state.data;\n    const data = functionalUpdate(updater, prevData);\n\n    if (typeof data === 'undefined') {\n      return undefined;\n    }\n\n    const parsedOptions = parseQueryArgs(queryKey);\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions);\n    return this.queryCache.build(this, defaultedOptions).setData(data, { ...options,\n      manual: true\n    });\n  }\n\n  setQueriesData(queryKeyOrFilters, updater, options) {\n    return notifyManager.batch(() => this.getQueryCache().findAll(queryKeyOrFilters).map(({\n      queryKey\n    }) => [queryKey, this.setQueryData(queryKey, updater, options)]));\n  }\n\n  getQueryState(queryKey, filters) {\n    var _this$queryCache$find2;\n\n    return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;\n  }\n\n  removeQueries(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    const queryCache = this.queryCache;\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query);\n      });\n    });\n  }\n\n  resetQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    const queryCache = this.queryCache;\n    const refetchFilters = {\n      type: 'active',\n      ...filters\n    };\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset();\n      });\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n\n  cancelQueries(arg1, arg2, arg3) {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3);\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true;\n    }\n\n    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions)));\n    return Promise.all(promises).then(noop).catch(noop);\n  }\n\n  invalidateQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    return notifyManager.batch(() => {\n      var _ref, _filters$refetchType;\n\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate();\n      });\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve();\n      }\n\n      const refetchFilters = { ...filters,\n        type: (_ref = (_filters$refetchType = filters.refetchType) != null ? _filters$refetchType : filters.type) != null ? _ref : 'active'\n      };\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n\n  refetchQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).filter(query => !query.isDisabled()).map(query => {\n      var _options$cancelRefetc;\n\n      return query.fetch(undefined, { ...options,\n        cancelRefetch: (_options$cancelRefetc = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc : true,\n        meta: {\n          refetchPage: filters.refetchPage\n        }\n      });\n    }));\n    let promise = Promise.all(promises).then(noop);\n\n    if (!(options != null && options.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  }\n\n  fetchQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions); // https://github.com/tannerlinsley/react-query/issues/652\n\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false;\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions);\n    return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n  }\n\n  prefetchQuery(arg1, arg2, arg3) {\n    return this.fetchQuery(arg1, arg2, arg3).then(noop).catch(noop);\n  }\n\n  fetchInfiniteQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    parsedOptions.behavior = infiniteQueryBehavior();\n    return this.fetchQuery(parsedOptions);\n  }\n\n  prefetchInfiniteQuery(arg1, arg2, arg3) {\n    return this.fetchInfiniteQuery(arg1, arg2, arg3).then(noop).catch(noop);\n  }\n\n  resumePausedMutations() {\n    return this.mutationCache.resumePausedMutations();\n  }\n\n  getQueryCache() {\n    return this.queryCache;\n  }\n\n  getMutationCache() {\n    return this.mutationCache;\n  }\n\n  getLogger() {\n    return this.logger;\n  }\n\n  getDefaultOptions() {\n    return this.defaultOptions;\n  }\n\n  setDefaultOptions(options) {\n    this.defaultOptions = options;\n  }\n\n  setQueryDefaults(queryKey, options) {\n    const result = this.queryDefaults.find(x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey));\n\n    if (result) {\n      result.defaultOptions = options;\n    } else {\n      this.queryDefaults.push({\n        queryKey,\n        defaultOptions: options\n      });\n    }\n  }\n\n  getQueryDefaults(queryKey) {\n    if (!queryKey) {\n      return undefined;\n    } // Get the first matching defaults\n\n\n    const firstMatchingDefaults = this.queryDefaults.find(x => partialMatchKey(queryKey, x.queryKey)); // Additional checks and error in dev mode\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.queryDefaults.filter(x => partialMatchKey(queryKey, x.queryKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n      if (matchingDefaults.length > 1) {\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(\"[QueryClient] Several query defaults match with key '\" + JSON.stringify(queryKey) + \"'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.\");\n        }\n      }\n    }\n\n    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n  }\n\n  setMutationDefaults(mutationKey, options) {\n    const result = this.mutationDefaults.find(x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey));\n\n    if (result) {\n      result.defaultOptions = options;\n    } else {\n      this.mutationDefaults.push({\n        mutationKey,\n        defaultOptions: options\n      });\n    }\n  }\n\n  getMutationDefaults(mutationKey) {\n    if (!mutationKey) {\n      return undefined;\n    } // Get the first matching defaults\n\n\n    const firstMatchingDefaults = this.mutationDefaults.find(x => partialMatchKey(mutationKey, x.mutationKey)); // Additional checks and error in dev mode\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.mutationDefaults.filter(x => partialMatchKey(mutationKey, x.mutationKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n      if (matchingDefaults.length > 1) {\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(\"[QueryClient] Several mutation defaults match with key '\" + JSON.stringify(mutationKey) + \"'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.\");\n        }\n      }\n    }\n\n    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n  }\n\n  defaultQueryOptions(options) {\n    if (options != null && options._defaulted) {\n      return options;\n    }\n\n    const defaultedOptions = { ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options == null ? void 0 : options.queryKey),\n      ...options,\n      _defaulted: true\n    };\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);\n    } // dependent default values\n\n\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== 'always';\n    }\n\n    if (typeof defaultedOptions.useErrorBoundary === 'undefined') {\n      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense;\n    }\n\n    return defaultedOptions;\n  }\n\n  defaultMutationOptions(options) {\n    if (options != null && options._defaulted) {\n      return options;\n    }\n\n    return { ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options == null ? void 0 : options.mutationKey),\n      ...options,\n      _defaulted: true\n    };\n  }\n\n  clear() {\n    this.queryCache.clear();\n    this.mutationCache.clear();\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}