{"ast":null,"code":"import { scheduleMicrotask } from \"./utils.mjs\"; // TYPES\n\nexport function createNotifyManager() {\n  var queue = [];\n  var transactions = 0;\n  var notifyFn = function notifyFn(callback) {\n    callback();\n  };\n  var batchNotifyFn = function batchNotifyFn(callback) {\n    callback();\n  };\n  var batch = function batch(callback) {\n    var result;\n    transactions++;\n    try {\n      result = callback();\n    } finally {\n      transactions--;\n      if (!transactions) {\n        flush();\n      }\n    }\n    return result;\n  };\n  var schedule = function schedule(callback) {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleMicrotask(function () {\n        notifyFn(callback);\n      });\n    }\n  };\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n\n  var batchCalls = function batchCalls(callback) {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      schedule(function () {\n        callback.apply(void 0, args);\n      });\n    };\n  };\n  var flush = function flush() {\n    var originalQueue = queue;\n    queue = [];\n    if (originalQueue.length) {\n      scheduleMicrotask(function () {\n        batchNotifyFn(function () {\n          originalQueue.forEach(function (callback) {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n\n  var setNotifyFunction = function setNotifyFunction(fn) {\n    notifyFn = fn;\n  };\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n\n  var setBatchNotifyFunction = function setBatchNotifyFunction(fn) {\n    batchNotifyFn = fn;\n  };\n  return {\n    batch: batch,\n    batchCalls: batchCalls,\n    schedule: schedule,\n    setNotifyFunction: setNotifyFunction,\n    setBatchNotifyFunction: setBatchNotifyFunction\n  };\n} // SINGLETON\n\nexport var notifyManager = createNotifyManager();","map":{"version":3,"names":["scheduleMicrotask","createNotifyManager","queue","transactions","notifyFn","callback","batchNotifyFn","batch","result","flush","schedule","push","batchCalls","_len","arguments","length","args","Array","_key","apply","originalQueue","forEach","setNotifyFunction","fn","setBatchNotifyFunction","notifyManager"],"sources":["D:/Projects/RainbowKit/connectwallet/node_modules/react-query/lib/core/notifyManager.mjs"],"sourcesContent":["import { scheduleMicrotask } from \"./utils.mjs\"; // TYPES\n\nexport function createNotifyManager() {\n  let queue = [];\n  let transactions = 0;\n\n  let notifyFn = callback => {\n    callback();\n  };\n\n  let batchNotifyFn = callback => {\n    callback();\n  };\n\n  const batch = callback => {\n    let result;\n    transactions++;\n\n    try {\n      result = callback();\n    } finally {\n      transactions--;\n\n      if (!transactions) {\n        flush();\n      }\n    }\n\n    return result;\n  };\n\n  const schedule = callback => {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback);\n      });\n    }\n  };\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n\n\n  const batchCalls = callback => {\n    return (...args) => {\n      schedule(() => {\n        callback(...args);\n      });\n    };\n  };\n\n  const flush = () => {\n    const originalQueue = queue;\n    queue = [];\n\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach(callback => {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n\n\n  const setNotifyFunction = fn => {\n    notifyFn = fn;\n  };\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n\n\n  const setBatchNotifyFunction = fn => {\n    batchNotifyFn = fn;\n  };\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction\n  };\n} // SINGLETON\n\nexport const notifyManager = createNotifyManager();"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,aAAa,CAAC,CAAC;;AAEjD,OAAO,SAASC,mBAAmBA,CAAA,EAAG;EACpC,IAAIC,KAAK,GAAG,EAAE;EACd,IAAIC,YAAY,GAAG,CAAC;EAEpB,IAAIC,QAAQ,GAAG,SAAAA,SAAAC,QAAQ,EAAI;IACzBA,QAAQ,EAAE;EACZ,CAAC;EAED,IAAIC,aAAa,GAAG,SAAAA,cAAAD,QAAQ,EAAI;IAC9BA,QAAQ,EAAE;EACZ,CAAC;EAED,IAAME,KAAK,GAAG,SAARA,KAAKA,CAAGF,QAAQ,EAAI;IACxB,IAAIG,MAAM;IACVL,YAAY,EAAE;IAEd,IAAI;MACFK,MAAM,GAAGH,QAAQ,EAAE;IACrB,CAAC,SAAS;MACRF,YAAY,EAAE;MAEd,IAAI,CAACA,YAAY,EAAE;QACjBM,KAAK,EAAE;MACT;IACF;IAEA,OAAOD,MAAM;EACf,CAAC;EAED,IAAME,QAAQ,GAAG,SAAXA,QAAQA,CAAGL,QAAQ,EAAI;IAC3B,IAAIF,YAAY,EAAE;MAChBD,KAAK,CAACS,IAAI,CAACN,QAAQ,CAAC;IACtB,CAAC,MAAM;MACLL,iBAAiB,CAAC,YAAM;QACtBI,QAAQ,CAACC,QAAQ,CAAC;MACpB,CAAC,CAAC;IACJ;EACF,CAAC;EACD;AACF;AACA;;EAGE,IAAMO,UAAU,GAAG,SAAbA,UAAUA,CAAGP,QAAQ,EAAI;IAC7B,OAAO,YAAa;MAAA,SAAAQ,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAATC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;QAAJF,IAAI,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;MAAA;MACbR,QAAQ,CAAC,YAAM;QACbL,QAAQ,CAAAc,KAAA,SAAIH,IAAI,CAAC;MACnB,CAAC,CAAC;IACJ,CAAC;EACH,CAAC;EAED,IAAMP,KAAK,GAAG,SAARA,KAAKA,CAAA,EAAS;IAClB,IAAMW,aAAa,GAAGlB,KAAK;IAC3BA,KAAK,GAAG,EAAE;IAEV,IAAIkB,aAAa,CAACL,MAAM,EAAE;MACxBf,iBAAiB,CAAC,YAAM;QACtBM,aAAa,CAAC,YAAM;UAClBc,aAAa,CAACC,OAAO,CAAC,UAAAhB,QAAQ,EAAI;YAChCD,QAAQ,CAACC,QAAQ,CAAC;UACpB,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF,CAAC;EACD;AACF;AACA;AACA;;EAGE,IAAMiB,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAGC,EAAE,EAAI;IAC9BnB,QAAQ,GAAGmB,EAAE;EACf,CAAC;EACD;AACF;AACA;AACA;;EAGE,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAGD,EAAE,EAAI;IACnCjB,aAAa,GAAGiB,EAAE;EACpB,CAAC;EAED,OAAO;IACLhB,KAAK,EAALA,KAAK;IACLK,UAAU,EAAVA,UAAU;IACVF,QAAQ,EAARA,QAAQ;IACRY,iBAAiB,EAAjBA,iBAAiB;IACjBE,sBAAsB,EAAtBA;EACF,CAAC;AACH,CAAC,CAAC;;AAEF,OAAO,IAAMC,aAAa,GAAGxB,mBAAmB,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}