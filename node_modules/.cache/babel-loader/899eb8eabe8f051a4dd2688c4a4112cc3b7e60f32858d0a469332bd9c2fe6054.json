{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nvar _classCallCheck = require(\"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CoinbaseWalletSDK = void 0;\nvar wallet_logo_1 = require(\"./assets/wallet-logo\");\nvar ScopedLocalStorage_1 = require(\"./lib/ScopedLocalStorage\");\nvar CoinbaseWalletProvider_1 = require(\"./provider/CoinbaseWalletProvider\");\nvar WalletSDKUI_1 = require(\"./provider/WalletSDKUI\");\nvar WalletSDKRelay_1 = require(\"./relay/WalletSDKRelay\");\nvar WalletSDKRelayEventManager_1 = require(\"./relay/WalletSDKRelayEventManager\");\nvar util_1 = require(\"./util\");\nvar LINK_API_URL = process.env.LINK_API_URL || \"https://www.walletlink.org\";\nvar SDK_VERSION = process.env.SDK_VERSION || require(\"../package.json\").version || \"unknown\";\nvar CoinbaseWalletSDK = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   * @param options Coinbase Wallet SDK constructor options\n   */\n  function CoinbaseWalletSDK(options) {\n    _classCallCheck(this, CoinbaseWalletSDK);\n    var _a, _b, _c;\n    this._appName = \"\";\n    this._appLogoUrl = null;\n    this._relay = null;\n    this._relayEventManager = null;\n    var linkAPIUrl = options.linkAPIUrl || LINK_API_URL;\n    var uiConstructor;\n    if (!options.uiConstructor) {\n      uiConstructor = function uiConstructor(opts) {\n        return new WalletSDKUI_1.WalletSDKUI(opts);\n      };\n    } else {\n      uiConstructor = options.uiConstructor;\n    }\n    if (typeof options.overrideIsMetaMask === \"undefined\") {\n      this._overrideIsMetaMask = false;\n    } else {\n      this._overrideIsMetaMask = options.overrideIsMetaMask;\n    }\n    this._overrideIsCoinbaseWallet = (_a = options.overrideIsCoinbaseWallet) !== null && _a !== void 0 ? _a : true;\n    this._overrideIsCoinbaseBrowser = (_b = options.overrideIsCoinbaseBrowser) !== null && _b !== void 0 ? _b : false;\n    if (options.diagnosticLogger && options.eventListener) {\n      throw new Error(\"Can't have both eventListener and diagnosticLogger options, use only diagnosticLogger\");\n    }\n    if (options.eventListener) {\n      this._diagnosticLogger = {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        log: options.eventListener.onEvent\n      };\n    } else {\n      this._diagnosticLogger = options.diagnosticLogger;\n    }\n    this._reloadOnDisconnect = (_c = options.reloadOnDisconnect) !== null && _c !== void 0 ? _c : true;\n    var url = new URL(linkAPIUrl);\n    var origin = \"\".concat(url.protocol, \"//\").concat(url.host);\n    this._storage = new ScopedLocalStorage_1.ScopedLocalStorage(\"-walletlink:\".concat(origin)); // needs migration to preserve local states\n    this._storage.setItem(\"version\", CoinbaseWalletSDK.VERSION);\n    if (this.walletExtension || this.coinbaseBrowser) {\n      return;\n    }\n    this._relayEventManager = new WalletSDKRelayEventManager_1.WalletSDKRelayEventManager();\n    this._relay = new WalletSDKRelay_1.WalletSDKRelay({\n      linkAPIUrl: linkAPIUrl,\n      version: SDK_VERSION,\n      darkMode: !!options.darkMode,\n      uiConstructor: uiConstructor,\n      storage: this._storage,\n      relayEventManager: this._relayEventManager,\n      diagnosticLogger: this._diagnosticLogger,\n      reloadOnDisconnect: this._reloadOnDisconnect\n    });\n    this.setAppInfo(options.appName, options.appLogoUrl);\n    if (!!options.headlessMode) return;\n    this._relay.attachUI();\n  }\n  /**\n   * Create a Web3 Provider object\n   * @param jsonRpcUrl Ethereum JSON RPC URL (Default: \"\")\n   * @param chainId Ethereum Chain ID (Default: 1)\n   * @returns A Web3 Provider\n   */\n  _createClass(CoinbaseWalletSDK, [{\n    key: \"makeWeb3Provider\",\n    value: function makeWeb3Provider() {\n      var jsonRpcUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      var chainId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var extension = this.walletExtension;\n      if (extension) {\n        if (!this.isCipherProvider(extension)) {\n          extension.setProviderInfo(jsonRpcUrl, chainId);\n        }\n        if (this._reloadOnDisconnect === false && typeof extension.disableReloadOnDisconnect === \"function\") extension.disableReloadOnDisconnect();\n        return extension;\n      }\n      var dappBrowser = this.coinbaseBrowser;\n      if (dappBrowser) {\n        return dappBrowser;\n      }\n      var relay = this._relay;\n      if (!relay || !this._relayEventManager || !this._storage) {\n        throw new Error(\"Relay not initialized, should never happen\");\n      }\n      if (!jsonRpcUrl) relay.setConnectDisabled(true);\n      return new CoinbaseWalletProvider_1.CoinbaseWalletProvider({\n        relayProvider: function relayProvider() {\n          return Promise.resolve(relay);\n        },\n        relayEventManager: this._relayEventManager,\n        storage: this._storage,\n        jsonRpcUrl: jsonRpcUrl,\n        chainId: chainId,\n        qrUrl: this.getQrUrl(),\n        diagnosticLogger: this._diagnosticLogger,\n        overrideIsMetaMask: this._overrideIsMetaMask,\n        overrideIsCoinbaseWallet: this._overrideIsCoinbaseWallet,\n        overrideIsCoinbaseBrowser: this._overrideIsCoinbaseBrowser\n      });\n    }\n    /**\n     * Set application information\n     * @param appName Application name\n     * @param appLogoUrl Application logo image URL\n     */\n  }, {\n    key: \"setAppInfo\",\n    value: function setAppInfo(appName, appLogoUrl) {\n      var _a;\n      this._appName = appName || \"DApp\";\n      this._appLogoUrl = appLogoUrl || (0, util_1.getFavicon)();\n      var extension = this.walletExtension;\n      if (extension) {\n        if (!this.isCipherProvider(extension)) {\n          extension.setAppInfo(this._appName, this._appLogoUrl);\n        }\n      } else {\n        (_a = this._relay) === null || _a === void 0 ? void 0 : _a.setAppInfo(this._appName, this._appLogoUrl);\n      }\n    }\n    /**\n     * Disconnect. After disconnecting, this will reload the web page to ensure\n     * all potential stale state is cleared.\n     */\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      var _a;\n      var extension = this.walletExtension;\n      if (extension) {\n        void extension.close();\n      } else {\n        (_a = this._relay) === null || _a === void 0 ? void 0 : _a.resetAndReload();\n      }\n    }\n    /**\n     * Return QR URL for mobile wallet connection, will return null if extension is installed\n     */\n  }, {\n    key: \"getQrUrl\",\n    value: function getQrUrl() {\n      var _a, _b;\n      return (_b = (_a = this._relay) === null || _a === void 0 ? void 0 : _a.getQRCodeUrl()) !== null && _b !== void 0 ? _b : null;\n    }\n    /**\n     * Official Coinbase Wallet logo for developers to use on their frontend\n     * @param type Type of wallet logo: \"standard\" | \"circle\" | \"text\" | \"textWithLogo\" | \"textLight\" | \"textWithLogoLight\"\n     * @param width Width of the logo (Optional)\n     * @returns SVG Data URI\n     */\n  }, {\n    key: \"getCoinbaseWalletLogo\",\n    value: function getCoinbaseWalletLogo(type) {\n      var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 240;\n      return (0, wallet_logo_1.walletLogo)(type, width);\n    }\n  }, {\n    key: \"walletExtension\",\n    get: function get() {\n      var _a;\n      return (_a = window.coinbaseWalletExtension) !== null && _a !== void 0 ? _a : window.walletLinkExtension;\n    }\n  }, {\n    key: \"coinbaseBrowser\",\n    get: function get() {\n      var _a, _b;\n      try {\n        // Coinbase DApp browser does not inject into iframes so grab provider from top frame if it exists\n        var ethereum = (_a = window.ethereum) !== null && _a !== void 0 ? _a : (_b = window.top) === null || _b === void 0 ? void 0 : _b.ethereum;\n        if (!ethereum) {\n          return undefined;\n        }\n        if (\"isCoinbaseBrowser\" in ethereum && ethereum.isCoinbaseBrowser) {\n          return ethereum;\n        } else {\n          return undefined;\n        }\n      } catch (e) {\n        return undefined;\n      }\n    }\n  }, {\n    key: \"isCipherProvider\",\n    value: function isCipherProvider(provider) {\n      // @ts-expect-error isCipher walletlink property\n      return typeof provider.isCipher === \"boolean\" && provider.isCipher;\n    }\n  }]);\n  return CoinbaseWalletSDK;\n}();\nexports.CoinbaseWalletSDK = CoinbaseWalletSDK;\nCoinbaseWalletSDK.VERSION = SDK_VERSION;","map":{"version":3,"names":["_classCallCheck","require","default","_createClass","Object","defineProperty","exports","value","CoinbaseWalletSDK","wallet_logo_1","ScopedLocalStorage_1","CoinbaseWalletProvider_1","WalletSDKUI_1","WalletSDKRelay_1","WalletSDKRelayEventManager_1","util_1","LINK_API_URL","process","env","SDK_VERSION","version","options","_a","_b","_c","_appName","_appLogoUrl","_relay","_relayEventManager","linkAPIUrl","uiConstructor","opts","WalletSDKUI","overrideIsMetaMask","_overrideIsMetaMask","_overrideIsCoinbaseWallet","overrideIsCoinbaseWallet","_overrideIsCoinbaseBrowser","overrideIsCoinbaseBrowser","diagnosticLogger","eventListener","Error","_diagnosticLogger","log","onEvent","_reloadOnDisconnect","reloadOnDisconnect","url","URL","origin","concat","protocol","host","_storage","ScopedLocalStorage","setItem","VERSION","walletExtension","coinbaseBrowser","WalletSDKRelayEventManager","WalletSDKRelay","darkMode","storage","relayEventManager","setAppInfo","appName","appLogoUrl","headlessMode","attachUI","key","makeWeb3Provider","jsonRpcUrl","arguments","length","undefined","chainId","extension","isCipherProvider","setProviderInfo","disableReloadOnDisconnect","dappBrowser","relay","setConnectDisabled","CoinbaseWalletProvider","relayProvider","Promise","resolve","qrUrl","getQrUrl","getFavicon","disconnect","close","resetAndReload","getQRCodeUrl","getCoinbaseWalletLogo","type","width","walletLogo","get","window","coinbaseWalletExtension","walletLinkExtension","ethereum","top","isCoinbaseBrowser","e","provider","isCipher"],"sources":["D:/Projects/RainbowKit/connectwallet/node_modules/@coinbase/wallet-sdk/dist/CoinbaseWalletSDK.js"],"sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CoinbaseWalletSDK = void 0;\nconst wallet_logo_1 = require(\"./assets/wallet-logo\");\nconst ScopedLocalStorage_1 = require(\"./lib/ScopedLocalStorage\");\nconst CoinbaseWalletProvider_1 = require(\"./provider/CoinbaseWalletProvider\");\nconst WalletSDKUI_1 = require(\"./provider/WalletSDKUI\");\nconst WalletSDKRelay_1 = require(\"./relay/WalletSDKRelay\");\nconst WalletSDKRelayEventManager_1 = require(\"./relay/WalletSDKRelayEventManager\");\nconst util_1 = require(\"./util\");\nconst LINK_API_URL = process.env.LINK_API_URL || \"https://www.walletlink.org\";\nconst SDK_VERSION = process.env.SDK_VERSION || require(\"../package.json\").version || \"unknown\";\nclass CoinbaseWalletSDK {\n    /**\n     * Constructor\n     * @param options Coinbase Wallet SDK constructor options\n     */\n    constructor(options) {\n        var _a, _b, _c;\n        this._appName = \"\";\n        this._appLogoUrl = null;\n        this._relay = null;\n        this._relayEventManager = null;\n        const linkAPIUrl = options.linkAPIUrl || LINK_API_URL;\n        let uiConstructor;\n        if (!options.uiConstructor) {\n            uiConstructor = opts => new WalletSDKUI_1.WalletSDKUI(opts);\n        }\n        else {\n            uiConstructor = options.uiConstructor;\n        }\n        if (typeof options.overrideIsMetaMask === \"undefined\") {\n            this._overrideIsMetaMask = false;\n        }\n        else {\n            this._overrideIsMetaMask = options.overrideIsMetaMask;\n        }\n        this._overrideIsCoinbaseWallet = (_a = options.overrideIsCoinbaseWallet) !== null && _a !== void 0 ? _a : true;\n        this._overrideIsCoinbaseBrowser =\n            (_b = options.overrideIsCoinbaseBrowser) !== null && _b !== void 0 ? _b : false;\n        if (options.diagnosticLogger && options.eventListener) {\n            throw new Error(\"Can't have both eventListener and diagnosticLogger options, use only diagnosticLogger\");\n        }\n        if (options.eventListener) {\n            this._diagnosticLogger = {\n                // eslint-disable-next-line @typescript-eslint/unbound-method\n                log: options.eventListener.onEvent,\n            };\n        }\n        else {\n            this._diagnosticLogger = options.diagnosticLogger;\n        }\n        this._reloadOnDisconnect = (_c = options.reloadOnDisconnect) !== null && _c !== void 0 ? _c : true;\n        const url = new URL(linkAPIUrl);\n        const origin = `${url.protocol}//${url.host}`;\n        this._storage = new ScopedLocalStorage_1.ScopedLocalStorage(`-walletlink:${origin}`); // needs migration to preserve local states\n        this._storage.setItem(\"version\", CoinbaseWalletSDK.VERSION);\n        if (this.walletExtension || this.coinbaseBrowser) {\n            return;\n        }\n        this._relayEventManager = new WalletSDKRelayEventManager_1.WalletSDKRelayEventManager();\n        this._relay = new WalletSDKRelay_1.WalletSDKRelay({\n            linkAPIUrl,\n            version: SDK_VERSION,\n            darkMode: !!options.darkMode,\n            uiConstructor,\n            storage: this._storage,\n            relayEventManager: this._relayEventManager,\n            diagnosticLogger: this._diagnosticLogger,\n            reloadOnDisconnect: this._reloadOnDisconnect,\n        });\n        this.setAppInfo(options.appName, options.appLogoUrl);\n        if (!!options.headlessMode)\n            return;\n        this._relay.attachUI();\n    }\n    /**\n     * Create a Web3 Provider object\n     * @param jsonRpcUrl Ethereum JSON RPC URL (Default: \"\")\n     * @param chainId Ethereum Chain ID (Default: 1)\n     * @returns A Web3 Provider\n     */\n    makeWeb3Provider(jsonRpcUrl = \"\", chainId = 1) {\n        const extension = this.walletExtension;\n        if (extension) {\n            if (!this.isCipherProvider(extension)) {\n                extension.setProviderInfo(jsonRpcUrl, chainId);\n            }\n            if (this._reloadOnDisconnect === false &&\n                typeof extension.disableReloadOnDisconnect === \"function\")\n                extension.disableReloadOnDisconnect();\n            return extension;\n        }\n        const dappBrowser = this.coinbaseBrowser;\n        if (dappBrowser) {\n            return dappBrowser;\n        }\n        const relay = this._relay;\n        if (!relay || !this._relayEventManager || !this._storage) {\n            throw new Error(\"Relay not initialized, should never happen\");\n        }\n        if (!jsonRpcUrl)\n            relay.setConnectDisabled(true);\n        return new CoinbaseWalletProvider_1.CoinbaseWalletProvider({\n            relayProvider: () => Promise.resolve(relay),\n            relayEventManager: this._relayEventManager,\n            storage: this._storage,\n            jsonRpcUrl,\n            chainId,\n            qrUrl: this.getQrUrl(),\n            diagnosticLogger: this._diagnosticLogger,\n            overrideIsMetaMask: this._overrideIsMetaMask,\n            overrideIsCoinbaseWallet: this._overrideIsCoinbaseWallet,\n            overrideIsCoinbaseBrowser: this._overrideIsCoinbaseBrowser,\n        });\n    }\n    /**\n     * Set application information\n     * @param appName Application name\n     * @param appLogoUrl Application logo image URL\n     */\n    setAppInfo(appName, appLogoUrl) {\n        var _a;\n        this._appName = appName || \"DApp\";\n        this._appLogoUrl = appLogoUrl || (0, util_1.getFavicon)();\n        const extension = this.walletExtension;\n        if (extension) {\n            if (!this.isCipherProvider(extension)) {\n                extension.setAppInfo(this._appName, this._appLogoUrl);\n            }\n        }\n        else {\n            (_a = this._relay) === null || _a === void 0 ? void 0 : _a.setAppInfo(this._appName, this._appLogoUrl);\n        }\n    }\n    /**\n     * Disconnect. After disconnecting, this will reload the web page to ensure\n     * all potential stale state is cleared.\n     */\n    disconnect() {\n        var _a;\n        const extension = this.walletExtension;\n        if (extension) {\n            void extension.close();\n        }\n        else {\n            (_a = this._relay) === null || _a === void 0 ? void 0 : _a.resetAndReload();\n        }\n    }\n    /**\n     * Return QR URL for mobile wallet connection, will return null if extension is installed\n     */\n    getQrUrl() {\n        var _a, _b;\n        return (_b = (_a = this._relay) === null || _a === void 0 ? void 0 : _a.getQRCodeUrl()) !== null && _b !== void 0 ? _b : null;\n    }\n    /**\n     * Official Coinbase Wallet logo for developers to use on their frontend\n     * @param type Type of wallet logo: \"standard\" | \"circle\" | \"text\" | \"textWithLogo\" | \"textLight\" | \"textWithLogoLight\"\n     * @param width Width of the logo (Optional)\n     * @returns SVG Data URI\n     */\n    getCoinbaseWalletLogo(type, width = 240) {\n        return (0, wallet_logo_1.walletLogo)(type, width);\n    }\n    get walletExtension() {\n        var _a;\n        return (_a = window.coinbaseWalletExtension) !== null && _a !== void 0 ? _a : window.walletLinkExtension;\n    }\n    get coinbaseBrowser() {\n        var _a, _b;\n        try {\n            // Coinbase DApp browser does not inject into iframes so grab provider from top frame if it exists\n            const ethereum = ((_a = window.ethereum) !== null && _a !== void 0 ? _a : (_b = window.top) === null || _b === void 0 ? void 0 : _b.ethereum);\n            if (!ethereum) {\n                return undefined;\n            }\n            if (\"isCoinbaseBrowser\" in ethereum && ethereum.isCoinbaseBrowser) {\n                return ethereum;\n            }\n            else {\n                return undefined;\n            }\n        }\n        catch (e) {\n            return undefined;\n        }\n    }\n    isCipherProvider(provider) {\n        // @ts-expect-error isCipher walletlink property\n        return typeof provider.isCipher === \"boolean\" && provider.isCipher;\n    }\n}\nexports.CoinbaseWalletSDK = CoinbaseWalletSDK;\nCoinbaseWalletSDK.VERSION = SDK_VERSION;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}