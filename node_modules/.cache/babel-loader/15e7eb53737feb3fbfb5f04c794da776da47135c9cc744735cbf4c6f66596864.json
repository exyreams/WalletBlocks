{"ast":null,"code":"import React from 'react';\nimport { hydrate } from \"../core/index.mjs\";\nimport { useQueryClient } from \"./QueryClientProvider.mjs\";\nexport function useHydrate(state) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var queryClient = useQueryClient({\n    context: options.context\n  });\n  var optionsRef = React.useRef(options);\n  optionsRef.current = options; // Running hydrate again with the same queries is safe,\n  // it wont overwrite or initialize existing queries,\n  // relying on useMemo here is only a performance optimization.\n  // hydrate can and should be run *during* render here for SSR to work properly\n\n  React.useMemo(function () {\n    if (state) {\n      hydrate(queryClient, state, optionsRef.current);\n    }\n  }, [queryClient, state]);\n}\nexport var Hydrate = function Hydrate(_ref) {\n  var children = _ref.children,\n    options = _ref.options,\n    state = _ref.state;\n  useHydrate(state, options);\n  return children;\n};","map":{"version":3,"names":["React","hydrate","useQueryClient","useHydrate","state","options","arguments","length","undefined","queryClient","context","optionsRef","useRef","current","useMemo","Hydrate","_ref","children"],"sources":["D:/Projects/RainbowKit/connectwallet/node_modules/react-query/lib/reactjs/Hydrate.mjs"],"sourcesContent":["import React from 'react';\nimport { hydrate } from \"../core/index.mjs\";\nimport { useQueryClient } from \"./QueryClientProvider.mjs\";\nexport function useHydrate(state, options = {}) {\n  const queryClient = useQueryClient({\n    context: options.context\n  });\n  const optionsRef = React.useRef(options);\n  optionsRef.current = options; // Running hydrate again with the same queries is safe,\n  // it wont overwrite or initialize existing queries,\n  // relying on useMemo here is only a performance optimization.\n  // hydrate can and should be run *during* render here for SSR to work properly\n\n  React.useMemo(() => {\n    if (state) {\n      hydrate(queryClient, state, optionsRef.current);\n    }\n  }, [queryClient, state]);\n}\nexport const Hydrate = ({\n  children,\n  options,\n  state\n}) => {\n  useHydrate(state, options);\n  return children;\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,mBAAmB;AAC3C,SAASC,cAAc,QAAQ,2BAA2B;AAC1D,OAAO,SAASC,UAAUA,CAACC,KAAK,EAAgB;EAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAC5C,IAAMG,WAAW,GAAGP,cAAc,CAAC;IACjCQ,OAAO,EAAEL,OAAO,CAACK;EACnB,CAAC,CAAC;EACF,IAAMC,UAAU,GAAGX,KAAK,CAACY,MAAM,CAACP,OAAO,CAAC;EACxCM,UAAU,CAACE,OAAO,GAAGR,OAAO,CAAC,CAAC;EAC9B;EACA;EACA;;EAEAL,KAAK,CAACc,OAAO,CAAC,YAAM;IAClB,IAAIV,KAAK,EAAE;MACTH,OAAO,CAACQ,WAAW,EAAEL,KAAK,EAAEO,UAAU,CAACE,OAAO,CAAC;IACjD;EACF,CAAC,EAAE,CAACJ,WAAW,EAAEL,KAAK,CAAC,CAAC;AAC1B;AACA,OAAO,IAAMW,OAAO,GAAG,SAAVA,OAAOA,CAAAC,IAAA,EAId;EAAA,IAHJC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;IACRZ,OAAO,GAAAW,IAAA,CAAPX,OAAO;IACPD,KAAK,GAAAY,IAAA,CAALZ,KAAK;EAELD,UAAU,CAACC,KAAK,EAAEC,OAAO,CAAC;EAC1B,OAAOY,QAAQ;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}