{"ast":null,"code":"import _objectSpread from \"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _classCallCheck from \"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _excluded = [\"refetchPage\"];\nimport { isServer, isValidTimeout, noop, replaceData, shallowEqualObjects, timeUntilStale } from \"./utils.mjs\";\nimport { notifyManager } from \"./notifyManager.mjs\";\nimport { focusManager } from \"./focusManager.mjs\";\nimport { Subscribable } from \"./subscribable.mjs\";\nimport { canFetch, isCancelledError } from \"./retryer.mjs\";\nexport var QueryObserver = /*#__PURE__*/function (_Subscribable) {\n  _inherits(QueryObserver, _Subscribable);\n  var _super = _createSuper(QueryObserver);\n  function QueryObserver(client, options) {\n    var _this;\n    _classCallCheck(this, QueryObserver);\n    _this = _super.call(this);\n    _this.client = client;\n    _this.options = options;\n    _this.trackedProps = new Set();\n    _this.selectError = null;\n    _this.bindMethods();\n    _this.setOptions(options);\n    return _this;\n  }\n  _createClass(QueryObserver, [{\n    key: \"bindMethods\",\n    value: function bindMethods() {\n      this.remove = this.remove.bind(this);\n      this.refetch = this.refetch.bind(this);\n    }\n  }, {\n    key: \"onSubscribe\",\n    value: function onSubscribe() {\n      if (this.listeners.length === 1) {\n        this.currentQuery.addObserver(this);\n        if (shouldFetchOnMount(this.currentQuery, this.options)) {\n          this.executeFetch();\n        }\n        this.updateTimers();\n      }\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.listeners.length) {\n        this.destroy();\n      }\n    }\n  }, {\n    key: \"shouldFetchOnReconnect\",\n    value: function shouldFetchOnReconnect() {\n      return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect);\n    }\n  }, {\n    key: \"shouldFetchOnWindowFocus\",\n    value: function shouldFetchOnWindowFocus() {\n      return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.listeners = [];\n      this.clearStaleTimeout();\n      this.clearRefetchInterval();\n      this.currentQuery.removeObserver(this);\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options, notifyOptions) {\n      var prevOptions = this.options;\n      var prevQuery = this.currentQuery;\n      this.options = this.client.defaultQueryOptions(options);\n      if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n        throw new Error('Expected enabled to be a boolean');\n      } // Keep previous query key if the user does not supply one\n\n      if (!this.options.queryKey) {\n        this.options.queryKey = prevOptions.queryKey;\n      }\n      this.updateQuery();\n      var mounted = this.hasListeners(); // Fetch if there are subscribers\n\n      if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n        this.executeFetch();\n      } // Update result\n\n      this.updateResult(notifyOptions); // Update stale interval if needed\n\n      if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n        this.updateStaleTimeout();\n      }\n      var nextRefetchInterval = this.computeRefetchInterval(); // Update refetch interval if needed\n\n      if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {\n        this.updateRefetchInterval(nextRefetchInterval);\n      }\n    }\n  }, {\n    key: \"getOptimisticResult\",\n    value: function getOptimisticResult(options) {\n      var query = this.client.getQueryCache().build(this.client, options);\n      return this.createResult(query, options);\n    }\n  }, {\n    key: \"getCurrentResult\",\n    value: function getCurrentResult() {\n      return this.currentResult;\n    }\n  }, {\n    key: \"trackResult\",\n    value: function trackResult(result) {\n      var _this2 = this;\n      var trackedResult = {};\n      Object.keys(result).forEach(function (key) {\n        Object.defineProperty(trackedResult, key, {\n          configurable: false,\n          enumerable: true,\n          get: function get() {\n            _this2.trackedProps.add(key);\n            return result[key];\n          }\n        });\n      });\n      return trackedResult;\n    }\n  }, {\n    key: \"getCurrentQuery\",\n    value: function getCurrentQuery() {\n      return this.currentQuery;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      this.client.getQueryCache().remove(this.currentQuery);\n    }\n  }, {\n    key: \"refetch\",\n    value: function refetch() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        refetchPage = _ref.refetchPage,\n        options = _objectWithoutProperties(_ref, _excluded);\n      return this.fetch(_objectSpread(_objectSpread({}, options), {}, {\n        meta: {\n          refetchPage: refetchPage\n        }\n      }));\n    }\n  }, {\n    key: \"fetchOptimistic\",\n    value: function fetchOptimistic(options) {\n      var _this3 = this;\n      var defaultedOptions = this.client.defaultQueryOptions(options);\n      var query = this.client.getQueryCache().build(this.client, defaultedOptions);\n      query.isFetchingOptimistic = true;\n      return query.fetch().then(function () {\n        return _this3.createResult(query, defaultedOptions);\n      });\n    }\n  }, {\n    key: \"fetch\",\n    value: function fetch(fetchOptions) {\n      var _this4 = this;\n      var _fetchOptions$cancelR;\n      return this.executeFetch(_objectSpread(_objectSpread({}, fetchOptions), {}, {\n        cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) != null ? _fetchOptions$cancelR : true\n      })).then(function () {\n        _this4.updateResult();\n        return _this4.currentResult;\n      });\n    }\n  }, {\n    key: \"executeFetch\",\n    value: function executeFetch(fetchOptions) {\n      // Make sure we reference the latest query as the current one might have been removed\n      this.updateQuery(); // Fetch\n\n      var promise = this.currentQuery.fetch(this.options, fetchOptions);\n      if (!(fetchOptions != null && fetchOptions.throwOnError)) {\n        promise = promise.catch(noop);\n      }\n      return promise;\n    }\n  }, {\n    key: \"updateStaleTimeout\",\n    value: function updateStaleTimeout() {\n      var _this5 = this;\n      this.clearStaleTimeout();\n      if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n        return;\n      }\n      var time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n      // To mitigate this issue we always add 1 ms to the timeout.\n\n      var timeout = time + 1;\n      this.staleTimeoutId = setTimeout(function () {\n        if (!_this5.currentResult.isStale) {\n          _this5.updateResult();\n        }\n      }, timeout);\n    }\n  }, {\n    key: \"computeRefetchInterval\",\n    value: function computeRefetchInterval() {\n      var _this$options$refetch;\n      return typeof this.options.refetchInterval === 'function' ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;\n    }\n  }, {\n    key: \"updateRefetchInterval\",\n    value: function updateRefetchInterval(nextInterval) {\n      var _this6 = this;\n      this.clearRefetchInterval();\n      this.currentRefetchInterval = nextInterval;\n      if (isServer || this.options.enabled === false || !isValidTimeout(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {\n        return;\n      }\n      this.refetchIntervalId = setInterval(function () {\n        if (_this6.options.refetchIntervalInBackground || focusManager.isFocused()) {\n          _this6.executeFetch();\n        }\n      }, this.currentRefetchInterval);\n    }\n  }, {\n    key: \"updateTimers\",\n    value: function updateTimers() {\n      this.updateStaleTimeout();\n      this.updateRefetchInterval(this.computeRefetchInterval());\n    }\n  }, {\n    key: \"clearStaleTimeout\",\n    value: function clearStaleTimeout() {\n      clearTimeout(this.staleTimeoutId);\n      this.staleTimeoutId = undefined;\n    }\n  }, {\n    key: \"clearRefetchInterval\",\n    value: function clearRefetchInterval() {\n      clearInterval(this.refetchIntervalId);\n      this.refetchIntervalId = undefined;\n    }\n  }, {\n    key: \"createResult\",\n    value: function createResult(query, options) {\n      var prevQuery = this.currentQuery;\n      var prevOptions = this.options;\n      var prevResult = this.currentResult;\n      var prevResultState = this.currentResultState;\n      var prevResultOptions = this.currentResultOptions;\n      var queryChange = query !== prevQuery;\n      var queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n      var prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n      var state = query.state;\n      var dataUpdatedAt = state.dataUpdatedAt,\n        error = state.error,\n        errorUpdatedAt = state.errorUpdatedAt,\n        fetchStatus = state.fetchStatus,\n        status = state.status;\n      var isPreviousData = false;\n      var isPlaceholderData = false;\n      var data; // Optimistically set result in fetching state if needed\n\n      if (options._optimisticResults) {\n        var mounted = this.hasListeners();\n        var fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n        var fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n        if (fetchOnMount || fetchOptionally) {\n          fetchStatus = canFetch(query.options.networkMode) ? 'fetching' : 'paused';\n          if (!dataUpdatedAt) {\n            status = 'loading';\n          }\n        }\n        if (options._optimisticResults === 'isRestoring') {\n          fetchStatus = 'idle';\n        }\n      } // Keep previous data if needed\n\n      if (options.keepPreviousData && !state.dataUpdateCount && prevQueryResult != null && prevQueryResult.isSuccess && status !== 'error') {\n        data = prevQueryResult.data;\n        dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n        status = prevQueryResult.status;\n        isPreviousData = true;\n      } // Select data if needed\n      else if (options.select && typeof state.data !== 'undefined') {\n        // Memoize select result\n        if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === this.selectFn) {\n          data = this.selectResult;\n        } else {\n          try {\n            this.selectFn = options.select;\n            data = options.select(state.data);\n            data = replaceData(prevResult == null ? void 0 : prevResult.data, data, options);\n            this.selectResult = data;\n            this.selectError = null;\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError);\n            }\n            this.selectError = selectError;\n          }\n        }\n      } // Use query data\n      else {\n        data = state.data;\n      } // Show placeholder data if needed\n\n      if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && status === 'loading') {\n        var placeholderData; // Memoize placeholder data\n\n        if (prevResult != null && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n          placeholderData = prevResult.data;\n        } else {\n          placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;\n          if (options.select && typeof placeholderData !== 'undefined') {\n            try {\n              placeholderData = options.select(placeholderData);\n              placeholderData = replaceData(prevResult == null ? void 0 : prevResult.data, placeholderData, options);\n              this.selectError = null;\n            } catch (selectError) {\n              if (process.env.NODE_ENV !== 'production') {\n                this.client.getLogger().error(selectError);\n              }\n              this.selectError = selectError;\n            }\n          }\n        }\n        if (typeof placeholderData !== 'undefined') {\n          status = 'success';\n          data = placeholderData;\n          isPlaceholderData = true;\n        }\n      }\n      if (this.selectError) {\n        error = this.selectError;\n        data = this.selectResult;\n        errorUpdatedAt = Date.now();\n        status = 'error';\n      }\n      var isFetching = fetchStatus === 'fetching';\n      var result = {\n        status: status,\n        fetchStatus: fetchStatus,\n        isLoading: status === 'loading',\n        isSuccess: status === 'success',\n        isError: status === 'error',\n        data: data,\n        dataUpdatedAt: dataUpdatedAt,\n        error: error,\n        errorUpdatedAt: errorUpdatedAt,\n        failureCount: state.fetchFailureCount,\n        errorUpdateCount: state.errorUpdateCount,\n        isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n        isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n        isFetching: isFetching,\n        isRefetching: isFetching && status !== 'loading',\n        isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n        isPaused: fetchStatus === 'paused',\n        isPlaceholderData: isPlaceholderData,\n        isPreviousData: isPreviousData,\n        isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n        isStale: isStale(query, options),\n        refetch: this.refetch,\n        remove: this.remove\n      };\n      return result;\n    }\n  }, {\n    key: \"updateResult\",\n    value: function updateResult(notifyOptions) {\n      var _this7 = this;\n      var prevResult = this.currentResult;\n      var nextResult = this.createResult(this.currentQuery, this.options);\n      this.currentResultState = this.currentQuery.state;\n      this.currentResultOptions = this.options; // Only notify and update result if something has changed\n\n      if (shallowEqualObjects(nextResult, prevResult)) {\n        return;\n      }\n      this.currentResult = nextResult; // Determine which callbacks to trigger\n\n      var defaultNotifyOptions = {\n        cache: true\n      };\n      var shouldNotifyListeners = function shouldNotifyListeners() {\n        if (!prevResult) {\n          return true;\n        }\n        var notifyOnChangeProps = _this7.options.notifyOnChangeProps;\n        if (notifyOnChangeProps === 'all' || !notifyOnChangeProps && !_this7.trackedProps.size) {\n          return true;\n        }\n        var includedProps = new Set(notifyOnChangeProps != null ? notifyOnChangeProps : _this7.trackedProps);\n        if (_this7.options.useErrorBoundary) {\n          includedProps.add('error');\n        }\n        return Object.keys(_this7.currentResult).some(function (key) {\n          var typedKey = key;\n          var changed = _this7.currentResult[typedKey] !== prevResult[typedKey];\n          return changed && includedProps.has(typedKey);\n        });\n      };\n      if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {\n        defaultNotifyOptions.listeners = true;\n      }\n      this.notify(_objectSpread(_objectSpread({}, defaultNotifyOptions), notifyOptions));\n    }\n  }, {\n    key: \"updateQuery\",\n    value: function updateQuery() {\n      var query = this.client.getQueryCache().build(this.client, this.options);\n      if (query === this.currentQuery) {\n        return;\n      }\n      var prevQuery = this.currentQuery;\n      this.currentQuery = query;\n      this.currentQueryInitialState = query.state;\n      this.previousQueryResult = this.currentResult;\n      if (this.hasListeners()) {\n        prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n        query.addObserver(this);\n      }\n    }\n  }, {\n    key: \"onQueryUpdate\",\n    value: function onQueryUpdate(action) {\n      var notifyOptions = {};\n      if (action.type === 'success') {\n        notifyOptions.onSuccess = !action.manual;\n      } else if (action.type === 'error' && !isCancelledError(action.error)) {\n        notifyOptions.onError = true;\n      }\n      this.updateResult(notifyOptions);\n      if (this.hasListeners()) {\n        this.updateTimers();\n      }\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(notifyOptions) {\n      var _this8 = this;\n      notifyManager.batch(function () {\n        // First trigger the configuration callbacks\n        if (notifyOptions.onSuccess) {\n          var _this$options$onSucce, _this$options, _this$options$onSettl, _this$options2;\n          (_this$options$onSucce = (_this$options = _this8.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options, _this8.currentResult.data);\n          (_this$options$onSettl = (_this$options2 = _this8.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options2, _this8.currentResult.data, null);\n        } else if (notifyOptions.onError) {\n          var _this$options$onError, _this$options3, _this$options$onSettl2, _this$options4;\n          (_this$options$onError = (_this$options3 = _this8.options).onError) == null ? void 0 : _this$options$onError.call(_this$options3, _this8.currentResult.error);\n          (_this$options$onSettl2 = (_this$options4 = _this8.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options4, undefined, _this8.currentResult.error);\n        } // Then trigger the listeners\n\n        if (notifyOptions.listeners) {\n          _this8.listeners.forEach(function (listener) {\n            listener(_this8.currentResult);\n          });\n        } // Then the cache listeners\n\n        if (notifyOptions.cache) {\n          _this8.client.getQueryCache().notify({\n            query: _this8.currentQuery,\n            type: 'observerResultsUpdated'\n          });\n        }\n      });\n    }\n  }]);\n  return QueryObserver;\n}(Subscribable);\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);\n}\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\nfunction shouldFetchOn(query, options, field) {\n  if (options.enabled !== false) {\n    var value = typeof field === 'function' ? field(query) : field;\n    return value === 'always' || value !== false && isStale(query, options);\n  }\n  return false;\n}\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== 'error') && isStale(query, options);\n}\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n}","map":{"version":3,"names":["isServer","isValidTimeout","noop","replaceData","shallowEqualObjects","timeUntilStale","notifyManager","focusManager","Subscribable","canFetch","isCancelledError","QueryObserver","_Subscribable","_inherits","_super","_createSuper","client","options","_this","_classCallCheck","call","trackedProps","Set","selectError","bindMethods","setOptions","_createClass","key","value","remove","bind","refetch","onSubscribe","listeners","length","currentQuery","addObserver","shouldFetchOnMount","executeFetch","updateTimers","onUnsubscribe","destroy","shouldFetchOnReconnect","shouldFetchOn","refetchOnReconnect","shouldFetchOnWindowFocus","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryOptions","enabled","Error","queryKey","updateQuery","mounted","hasListeners","shouldFetchOptionally","updateResult","staleTime","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","query","getQueryCache","build","createResult","getCurrentResult","currentResult","trackResult","result","_this2","trackedResult","Object","keys","forEach","defineProperty","configurable","enumerable","get","add","getCurrentQuery","_ref","arguments","undefined","refetchPage","_objectWithoutProperties","_excluded","fetch","_objectSpread","meta","fetchOptimistic","_this3","defaultedOptions","isFetchingOptimistic","then","fetchOptions","_this4","_fetchOptions$cancelR","cancelRefetch","promise","throwOnError","catch","_this5","isStale","time","dataUpdatedAt","timeout","staleTimeoutId","setTimeout","_this$options$refetch","refetchInterval","data","nextInterval","_this6","refetchIntervalId","setInterval","refetchIntervalInBackground","isFocused","clearTimeout","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","state","currentQueryInitialState","prevQueryResult","previousQueryResult","error","errorUpdatedAt","fetchStatus","status","isPreviousData","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","networkMode","keepPreviousData","dataUpdateCount","isSuccess","select","selectFn","selectResult","process","env","NODE_ENV","getLogger","placeholderData","Date","now","isFetching","isLoading","isError","failureCount","fetchFailureCount","errorUpdateCount","isFetched","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","_this7","nextResult","defaultNotifyOptions","cache","shouldNotifyListeners","notifyOnChangeProps","size","includedProps","useErrorBoundary","some","typedKey","changed","has","notify","onQueryUpdate","action","type","onSuccess","manual","onError","_this8","batch","_this$options$onSucce","_this$options","_this$options$onSettl","_this$options2","onSettled","_this$options$onError","_this$options3","_this$options$onSettl2","_this$options4","listener","shouldLoadOnMount","retryOnMount","refetchOnMount","field","suspense","isStaleByTime"],"sources":["D:/Projects/RainbowKit/connectwallet/node_modules/react-query/lib/core/queryObserver.mjs"],"sourcesContent":["import { isServer, isValidTimeout, noop, replaceData, shallowEqualObjects, timeUntilStale } from \"./utils.mjs\";\nimport { notifyManager } from \"./notifyManager.mjs\";\nimport { focusManager } from \"./focusManager.mjs\";\nimport { Subscribable } from \"./subscribable.mjs\";\nimport { canFetch, isCancelledError } from \"./retryer.mjs\";\nexport class QueryObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.options = options;\n    this.trackedProps = new Set();\n    this.selectError = null;\n    this.bindMethods();\n    this.setOptions(options);\n  }\n\n  bindMethods() {\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n  }\n\n  onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this);\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch();\n      }\n\n      this.updateTimers();\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  }\n\n  shouldFetchOnReconnect() {\n    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect);\n  }\n\n  shouldFetchOnWindowFocus() {\n    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus);\n  }\n\n  destroy() {\n    this.listeners = [];\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n    this.currentQuery.removeObserver(this);\n  }\n\n  setOptions(options, notifyOptions) {\n    const prevOptions = this.options;\n    const prevQuery = this.currentQuery;\n    this.options = this.client.defaultQueryOptions(options);\n\n    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n      throw new Error('Expected enabled to be a boolean');\n    } // Keep previous query key if the user does not supply one\n\n\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey;\n    }\n\n    this.updateQuery();\n    const mounted = this.hasListeners(); // Fetch if there are subscribers\n\n    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n      this.executeFetch();\n    } // Update result\n\n\n    this.updateResult(notifyOptions); // Update stale interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n      this.updateStaleTimeout();\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval(); // Update refetch interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {\n      this.updateRefetchInterval(nextRefetchInterval);\n    }\n  }\n\n  getOptimisticResult(options) {\n    const query = this.client.getQueryCache().build(this.client, options);\n    return this.createResult(query, options);\n  }\n\n  getCurrentResult() {\n    return this.currentResult;\n  }\n\n  trackResult(result) {\n    const trackedResult = {};\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key);\n          return result[key];\n        }\n      });\n    });\n    return trackedResult;\n  }\n\n  getCurrentQuery() {\n    return this.currentQuery;\n  }\n\n  remove() {\n    this.client.getQueryCache().remove(this.currentQuery);\n  }\n\n  refetch({\n    refetchPage,\n    ...options\n  } = {}) {\n    return this.fetch({ ...options,\n      meta: {\n        refetchPage\n      }\n    });\n  }\n\n  fetchOptimistic(options) {\n    const defaultedOptions = this.client.defaultQueryOptions(options);\n    const query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    query.isFetchingOptimistic = true;\n    return query.fetch().then(() => this.createResult(query, defaultedOptions));\n  }\n\n  fetch(fetchOptions) {\n    var _fetchOptions$cancelR;\n\n    return this.executeFetch({ ...fetchOptions,\n      cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) != null ? _fetchOptions$cancelR : true\n    }).then(() => {\n      this.updateResult();\n      return this.currentResult;\n    });\n  }\n\n  executeFetch(fetchOptions) {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery(); // Fetch\n\n    let promise = this.currentQuery.fetch(this.options, fetchOptions);\n\n    if (!(fetchOptions != null && fetchOptions.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  }\n\n  updateStaleTimeout() {\n    this.clearStaleTimeout();\n\n    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n\n    const time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n\n    const timeout = time + 1;\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult();\n      }\n    }, timeout);\n  }\n\n  computeRefetchInterval() {\n    var _this$options$refetch;\n\n    return typeof this.options.refetchInterval === 'function' ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;\n  }\n\n  updateRefetchInterval(nextInterval) {\n    this.clearRefetchInterval();\n    this.currentRefetchInterval = nextInterval;\n\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {\n      return;\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        this.executeFetch();\n      }\n    }, this.currentRefetchInterval);\n  }\n\n  updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval(this.computeRefetchInterval());\n  }\n\n  clearStaleTimeout() {\n    clearTimeout(this.staleTimeoutId);\n    this.staleTimeoutId = undefined;\n  }\n\n  clearRefetchInterval() {\n    clearInterval(this.refetchIntervalId);\n    this.refetchIntervalId = undefined;\n  }\n\n  createResult(query, options) {\n    const prevQuery = this.currentQuery;\n    const prevOptions = this.options;\n    const prevResult = this.currentResult;\n    const prevResultState = this.currentResultState;\n    const prevResultOptions = this.currentResultOptions;\n    const queryChange = query !== prevQuery;\n    const queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n    const prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n    const {\n      state\n    } = query;\n    let {\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      fetchStatus,\n      status\n    } = state;\n    let isPreviousData = false;\n    let isPlaceholderData = false;\n    let data; // Optimistically set result in fetching state if needed\n\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners();\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode) ? 'fetching' : 'paused';\n\n        if (!dataUpdatedAt) {\n          status = 'loading';\n        }\n      }\n\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle';\n      }\n    } // Keep previous data if needed\n\n\n    if (options.keepPreviousData && !state.dataUpdateCount && prevQueryResult != null && prevQueryResult.isSuccess && status !== 'error') {\n      data = prevQueryResult.data;\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n      status = prevQueryResult.status;\n      isPreviousData = true;\n    } // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === this.selectFn) {\n        data = this.selectResult;\n      } else {\n        try {\n          this.selectFn = options.select;\n          data = options.select(state.data);\n          data = replaceData(prevResult == null ? void 0 : prevResult.data, data, options);\n          this.selectResult = data;\n          this.selectError = null;\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError);\n          }\n\n          this.selectError = selectError;\n        }\n      }\n    } // Use query data\n    else {\n      data = state.data;\n    } // Show placeholder data if needed\n\n\n    if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && status === 'loading') {\n      let placeholderData; // Memoize placeholder data\n\n      if (prevResult != null && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;\n\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData);\n            placeholderData = replaceData(prevResult == null ? void 0 : prevResult.data, placeholderData, options);\n            this.selectError = null;\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError);\n            }\n\n            this.selectError = selectError;\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success';\n        data = placeholderData;\n        isPlaceholderData = true;\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError;\n      data = this.selectResult;\n      errorUpdatedAt = Date.now();\n      status = 'error';\n    }\n\n    const isFetching = fetchStatus === 'fetching';\n    const result = {\n      status,\n      fetchStatus,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching: isFetching,\n      isRefetching: isFetching && status !== 'loading',\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove\n    };\n    return result;\n  }\n\n  updateResult(notifyOptions) {\n    const prevResult = this.currentResult;\n    const nextResult = this.createResult(this.currentQuery, this.options);\n    this.currentResultState = this.currentQuery.state;\n    this.currentResultOptions = this.options; // Only notify and update result if something has changed\n\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return;\n    }\n\n    this.currentResult = nextResult; // Determine which callbacks to trigger\n\n    const defaultNotifyOptions = {\n      cache: true\n    };\n\n    const shouldNotifyListeners = () => {\n      if (!prevResult) {\n        return true;\n      }\n\n      const {\n        notifyOnChangeProps\n      } = this.options;\n\n      if (notifyOnChangeProps === 'all' || !notifyOnChangeProps && !this.trackedProps.size) {\n        return true;\n      }\n\n      const includedProps = new Set(notifyOnChangeProps != null ? notifyOnChangeProps : this.trackedProps);\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error');\n      }\n\n      return Object.keys(this.currentResult).some(key => {\n        const typedKey = key;\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey];\n        return changed && includedProps.has(typedKey);\n      });\n    };\n\n    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true;\n    }\n\n    this.notify({ ...defaultNotifyOptions,\n      ...notifyOptions\n    });\n  }\n\n  updateQuery() {\n    const query = this.client.getQueryCache().build(this.client, this.options);\n\n    if (query === this.currentQuery) {\n      return;\n    }\n\n    const prevQuery = this.currentQuery;\n    this.currentQuery = query;\n    this.currentQueryInitialState = query.state;\n    this.previousQueryResult = this.currentResult;\n\n    if (this.hasListeners()) {\n      prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n      query.addObserver(this);\n    }\n  }\n\n  onQueryUpdate(action) {\n    const notifyOptions = {};\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual;\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true;\n    }\n\n    this.updateResult(notifyOptions);\n\n    if (this.hasListeners()) {\n      this.updateTimers();\n    }\n  }\n\n  notify(notifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        var _this$options$onSucce, _this$options, _this$options$onSettl, _this$options2;\n\n        (_this$options$onSucce = (_this$options = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options, this.currentResult.data);\n        (_this$options$onSettl = (_this$options2 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options2, this.currentResult.data, null);\n      } else if (notifyOptions.onError) {\n        var _this$options$onError, _this$options3, _this$options$onSettl2, _this$options4;\n\n        (_this$options$onError = (_this$options3 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options3, this.currentResult.error);\n        (_this$options$onSettl2 = (_this$options4 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options4, undefined, this.currentResult.error);\n      } // Then trigger the listeners\n\n\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult);\n        });\n      } // Then the cache listeners\n\n\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated'\n        });\n      }\n    });\n  }\n\n}\n\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);\n}\n\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\n\nfunction shouldFetchOn(query, options, field) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field;\n    return value === 'always' || value !== false && isStale(query, options);\n  }\n\n  return false;\n}\n\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== 'error') && isStale(query, options);\n}\n\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}