{"ast":null,"code":"import _classCallCheck from \"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { difference, replaceAt } from \"./utils.mjs\";\nimport { notifyManager } from \"./notifyManager.mjs\";\nimport { QueryObserver } from \"./queryObserver.mjs\";\nimport { Subscribable } from \"./subscribable.mjs\";\nexport var QueriesObserver = /*#__PURE__*/function (_Subscribable) {\n  _inherits(QueriesObserver, _Subscribable);\n  var _super = _createSuper(QueriesObserver);\n  function QueriesObserver(client, queries) {\n    var _this;\n    _classCallCheck(this, QueriesObserver);\n    _this = _super.call(this);\n    _this.client = client;\n    _this.queries = [];\n    _this.result = [];\n    _this.observers = [];\n    _this.observersMap = {};\n    if (queries) {\n      _this.setQueries(queries);\n    }\n    return _this;\n  }\n  _createClass(QueriesObserver, [{\n    key: \"onSubscribe\",\n    value: function onSubscribe() {\n      var _this2 = this;\n      if (this.listeners.length === 1) {\n        this.observers.forEach(function (observer) {\n          observer.subscribe(function (result) {\n            _this2.onUpdate(observer, result);\n          });\n        });\n      }\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.listeners.length) {\n        this.destroy();\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.listeners = [];\n      this.observers.forEach(function (observer) {\n        observer.destroy();\n      });\n    }\n  }, {\n    key: \"setQueries\",\n    value: function setQueries(queries, notifyOptions) {\n      var _this3 = this;\n      this.queries = queries;\n      notifyManager.batch(function () {\n        var prevObservers = _this3.observers;\n        var newObserverMatches = _this3.findMatchingObservers(_this3.queries); // set options for the new observers to notify of changes\n\n        newObserverMatches.forEach(function (match) {\n          return match.observer.setOptions(match.defaultedQueryOptions, notifyOptions);\n        });\n        var newObservers = newObserverMatches.map(function (match) {\n          return match.observer;\n        });\n        var newObserversMap = Object.fromEntries(newObservers.map(function (observer) {\n          return [observer.options.queryHash, observer];\n        }));\n        var newResult = newObservers.map(function (observer) {\n          return observer.getCurrentResult();\n        });\n        var hasIndexChange = newObservers.some(function (observer, index) {\n          return observer !== prevObservers[index];\n        });\n        if (prevObservers.length === newObservers.length && !hasIndexChange) {\n          return;\n        }\n        _this3.observers = newObservers;\n        _this3.observersMap = newObserversMap;\n        _this3.result = newResult;\n        if (!_this3.hasListeners()) {\n          return;\n        }\n        difference(prevObservers, newObservers).forEach(function (observer) {\n          observer.destroy();\n        });\n        difference(newObservers, prevObservers).forEach(function (observer) {\n          observer.subscribe(function (result) {\n            _this3.onUpdate(observer, result);\n          });\n        });\n        _this3.notify();\n      });\n    }\n  }, {\n    key: \"getCurrentResult\",\n    value: function getCurrentResult() {\n      return this.result;\n    }\n  }, {\n    key: \"getOptimisticResult\",\n    value: function getOptimisticResult(queries) {\n      return this.findMatchingObservers(queries).map(function (match) {\n        return match.observer.getOptimisticResult(match.defaultedQueryOptions);\n      });\n    }\n  }, {\n    key: \"findMatchingObservers\",\n    value: function findMatchingObservers(queries) {\n      var _this4 = this;\n      var prevObservers = this.observers;\n      var defaultedQueryOptions = queries.map(function (options) {\n        return _this4.client.defaultQueryOptions(options);\n      });\n      var matchingObservers = defaultedQueryOptions.flatMap(function (defaultedOptions) {\n        var match = prevObservers.find(function (observer) {\n          return observer.options.queryHash === defaultedOptions.queryHash;\n        });\n        if (match != null) {\n          return [{\n            defaultedQueryOptions: defaultedOptions,\n            observer: match\n          }];\n        }\n        return [];\n      });\n      var matchedQueryHashes = matchingObservers.map(function (match) {\n        return match.defaultedQueryOptions.queryHash;\n      });\n      var unmatchedQueries = defaultedQueryOptions.filter(function (defaultedOptions) {\n        return !matchedQueryHashes.includes(defaultedOptions.queryHash);\n      });\n      var unmatchedObservers = prevObservers.filter(function (prevObserver) {\n        return !matchingObservers.some(function (match) {\n          return match.observer === prevObserver;\n        });\n      });\n      var getObserver = function getObserver(options) {\n        var defaultedOptions = _this4.client.defaultQueryOptions(options);\n        var currentObserver = _this4.observersMap[defaultedOptions.queryHash];\n        return currentObserver != null ? currentObserver : new QueryObserver(_this4.client, defaultedOptions);\n      };\n      var newOrReusedObservers = unmatchedQueries.map(function (options, index) {\n        if (options.keepPreviousData) {\n          // return previous data from one of the observers that no longer match\n          var previouslyUsedObserver = unmatchedObservers[index];\n          if (previouslyUsedObserver !== undefined) {\n            return {\n              defaultedQueryOptions: options,\n              observer: previouslyUsedObserver\n            };\n          }\n        }\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options)\n        };\n      });\n      var sortMatchesByOrderOfQueries = function sortMatchesByOrderOfQueries(a, b) {\n        return defaultedQueryOptions.indexOf(a.defaultedQueryOptions) - defaultedQueryOptions.indexOf(b.defaultedQueryOptions);\n      };\n      return matchingObservers.concat(newOrReusedObservers).sort(sortMatchesByOrderOfQueries);\n    }\n  }, {\n    key: \"onUpdate\",\n    value: function onUpdate(observer, result) {\n      var index = this.observers.indexOf(observer);\n      if (index !== -1) {\n        this.result = replaceAt(this.result, index, result);\n        this.notify();\n      }\n    }\n  }, {\n    key: \"notify\",\n    value: function notify() {\n      var _this5 = this;\n      notifyManager.batch(function () {\n        _this5.listeners.forEach(function (listener) {\n          listener(_this5.result);\n        });\n      });\n    }\n  }]);\n  return QueriesObserver;\n}(Subscribable);","map":{"version":3,"names":["difference","replaceAt","notifyManager","QueryObserver","Subscribable","QueriesObserver","_Subscribable","_inherits","_super","_createSuper","client","queries","_this","_classCallCheck","call","result","observers","observersMap","setQueries","_createClass","key","value","onSubscribe","_this2","listeners","length","forEach","observer","subscribe","onUpdate","onUnsubscribe","destroy","notifyOptions","_this3","batch","prevObservers","newObserverMatches","findMatchingObservers","match","setOptions","defaultedQueryOptions","newObservers","map","newObserversMap","Object","fromEntries","options","queryHash","newResult","getCurrentResult","hasIndexChange","some","index","hasListeners","notify","getOptimisticResult","_this4","defaultQueryOptions","matchingObservers","flatMap","defaultedOptions","find","matchedQueryHashes","unmatchedQueries","filter","includes","unmatchedObservers","prevObserver","getObserver","currentObserver","newOrReusedObservers","keepPreviousData","previouslyUsedObserver","undefined","sortMatchesByOrderOfQueries","a","b","indexOf","concat","sort","_this5","listener"],"sources":["D:/Projects/RainbowKit/connectwallet/node_modules/react-query/lib/core/queriesObserver.mjs"],"sourcesContent":["import { difference, replaceAt } from \"./utils.mjs\";\nimport { notifyManager } from \"./notifyManager.mjs\";\nimport { QueryObserver } from \"./queryObserver.mjs\";\nimport { Subscribable } from \"./subscribable.mjs\";\nexport class QueriesObserver extends Subscribable {\n  constructor(client, queries) {\n    super();\n    this.client = client;\n    this.queries = [];\n    this.result = [];\n    this.observers = [];\n    this.observersMap = {};\n\n    if (queries) {\n      this.setQueries(queries);\n    }\n  }\n\n  onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result);\n        });\n      });\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  }\n\n  destroy() {\n    this.listeners = [];\n    this.observers.forEach(observer => {\n      observer.destroy();\n    });\n  }\n\n  setQueries(queries, notifyOptions) {\n    this.queries = queries;\n    notifyManager.batch(() => {\n      const prevObservers = this.observers;\n      const newObserverMatches = this.findMatchingObservers(this.queries); // set options for the new observers to notify of changes\n\n      newObserverMatches.forEach(match => match.observer.setOptions(match.defaultedQueryOptions, notifyOptions));\n      const newObservers = newObserverMatches.map(match => match.observer);\n      const newObserversMap = Object.fromEntries(newObservers.map(observer => [observer.options.queryHash, observer]));\n      const newResult = newObservers.map(observer => observer.getCurrentResult());\n      const hasIndexChange = newObservers.some((observer, index) => observer !== prevObservers[index]);\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return;\n      }\n\n      this.observers = newObservers;\n      this.observersMap = newObserversMap;\n      this.result = newResult;\n\n      if (!this.hasListeners()) {\n        return;\n      }\n\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy();\n      });\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result);\n        });\n      });\n      this.notify();\n    });\n  }\n\n  getCurrentResult() {\n    return this.result;\n  }\n\n  getOptimisticResult(queries) {\n    return this.findMatchingObservers(queries).map(match => match.observer.getOptimisticResult(match.defaultedQueryOptions));\n  }\n\n  findMatchingObservers(queries) {\n    const prevObservers = this.observers;\n    const defaultedQueryOptions = queries.map(options => this.client.defaultQueryOptions(options));\n    const matchingObservers = defaultedQueryOptions.flatMap(defaultedOptions => {\n      const match = prevObservers.find(observer => observer.options.queryHash === defaultedOptions.queryHash);\n\n      if (match != null) {\n        return [{\n          defaultedQueryOptions: defaultedOptions,\n          observer: match\n        }];\n      }\n\n      return [];\n    });\n    const matchedQueryHashes = matchingObservers.map(match => match.defaultedQueryOptions.queryHash);\n    const unmatchedQueries = defaultedQueryOptions.filter(defaultedOptions => !matchedQueryHashes.includes(defaultedOptions.queryHash));\n    const unmatchedObservers = prevObservers.filter(prevObserver => !matchingObservers.some(match => match.observer === prevObserver));\n\n    const getObserver = options => {\n      const defaultedOptions = this.client.defaultQueryOptions(options);\n      const currentObserver = this.observersMap[defaultedOptions.queryHash];\n      return currentObserver != null ? currentObserver : new QueryObserver(this.client, defaultedOptions);\n    };\n\n    const newOrReusedObservers = unmatchedQueries.map((options, index) => {\n      if (options.keepPreviousData) {\n        // return previous data from one of the observers that no longer match\n        const previouslyUsedObserver = unmatchedObservers[index];\n\n        if (previouslyUsedObserver !== undefined) {\n          return {\n            defaultedQueryOptions: options,\n            observer: previouslyUsedObserver\n          };\n        }\n      }\n\n      return {\n        defaultedQueryOptions: options,\n        observer: getObserver(options)\n      };\n    });\n\n    const sortMatchesByOrderOfQueries = (a, b) => defaultedQueryOptions.indexOf(a.defaultedQueryOptions) - defaultedQueryOptions.indexOf(b.defaultedQueryOptions);\n\n    return matchingObservers.concat(newOrReusedObservers).sort(sortMatchesByOrderOfQueries);\n  }\n\n  onUpdate(observer, result) {\n    const index = this.observers.indexOf(observer);\n\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result);\n      this.notify();\n    }\n  }\n\n  notify() {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(this.result);\n      });\n    });\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}