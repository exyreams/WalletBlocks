{"ast":null,"code":"import _objectSpread from \"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n// TYPES\n// FUNCTIONS\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state\n  };\n} // Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\n\nfunction dehydrateQuery(query) {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash\n  };\n}\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === 'success';\n}\nexport function dehydrate(client) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var mutations = [];\n  var queries = [];\n  if (options.dehydrateMutations !== false) {\n    var shouldDehydrateMutation = options.shouldDehydrateMutation || defaultShouldDehydrateMutation;\n    client.getMutationCache().getAll().forEach(function (mutation) {\n      if (shouldDehydrateMutation(mutation)) {\n        mutations.push(dehydrateMutation(mutation));\n      }\n    });\n  }\n  if (options.dehydrateQueries !== false) {\n    var shouldDehydrateQuery = options.shouldDehydrateQuery || defaultShouldDehydrateQuery;\n    client.getQueryCache().getAll().forEach(function (query) {\n      if (shouldDehydrateQuery(query)) {\n        queries.push(dehydrateQuery(query));\n      }\n    });\n  }\n  return {\n    mutations: mutations,\n    queries: queries\n  };\n}\nexport function hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return;\n  }\n  var mutationCache = client.getMutationCache();\n  var queryCache = client.getQueryCache(); // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  var mutations = dehydratedState.mutations || []; // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  var queries = dehydratedState.queries || [];\n  mutations.forEach(function (dehydratedMutation) {\n    var _options$defaultOptio;\n    mutationCache.build(client, _objectSpread(_objectSpread({}, options == null ? void 0 : (_options$defaultOptio = options.defaultOptions) == null ? void 0 : _options$defaultOptio.mutations), {}, {\n      mutationKey: dehydratedMutation.mutationKey\n    }), dehydratedMutation.state);\n  });\n  queries.forEach(function (dehydratedQuery) {\n    var _options$defaultOptio2;\n    var query = queryCache.get(dehydratedQuery.queryHash); // Do not hydrate if an existing query exists with newer data\n\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQuery.state.dataUpdatedAt) {\n        query.setState(dehydratedQuery.state);\n      }\n      return;\n    } // Restore query\n\n    queryCache.build(client, _objectSpread(_objectSpread({}, options == null ? void 0 : (_options$defaultOptio2 = options.defaultOptions) == null ? void 0 : _options$defaultOptio2.queries), {}, {\n      queryKey: dehydratedQuery.queryKey,\n      queryHash: dehydratedQuery.queryHash\n    }), dehydratedQuery.state);\n  });\n}","map":{"version":3,"names":["dehydrateMutation","mutation","mutationKey","options","state","dehydrateQuery","query","queryKey","queryHash","defaultShouldDehydrateMutation","isPaused","defaultShouldDehydrateQuery","status","dehydrate","client","arguments","length","undefined","mutations","queries","dehydrateMutations","shouldDehydrateMutation","getMutationCache","getAll","forEach","push","dehydrateQueries","shouldDehydrateQuery","getQueryCache","hydrate","dehydratedState","mutationCache","queryCache","dehydratedMutation","_options$defaultOptio","build","_objectSpread","defaultOptions","dehydratedQuery","_options$defaultOptio2","get","dataUpdatedAt","setState"],"sources":["D:/Projects/RainbowKit/connectwallet/node_modules/react-query/lib/core/hydration.mjs"],"sourcesContent":["// TYPES\n// FUNCTIONS\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state\n  };\n} // Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\n\n\nfunction dehydrateQuery(query) {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash\n  };\n}\n\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\n\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === 'success';\n}\n\nexport function dehydrate(client, options = {}) {\n  const mutations = [];\n  const queries = [];\n\n  if (options.dehydrateMutations !== false) {\n    const shouldDehydrateMutation = options.shouldDehydrateMutation || defaultShouldDehydrateMutation;\n    client.getMutationCache().getAll().forEach(mutation => {\n      if (shouldDehydrateMutation(mutation)) {\n        mutations.push(dehydrateMutation(mutation));\n      }\n    });\n  }\n\n  if (options.dehydrateQueries !== false) {\n    const shouldDehydrateQuery = options.shouldDehydrateQuery || defaultShouldDehydrateQuery;\n    client.getQueryCache().getAll().forEach(query => {\n      if (shouldDehydrateQuery(query)) {\n        queries.push(dehydrateQuery(query));\n      }\n    });\n  }\n\n  return {\n    mutations,\n    queries\n  };\n}\nexport function hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return;\n  }\n\n  const mutationCache = client.getMutationCache();\n  const queryCache = client.getQueryCache(); // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const mutations = dehydratedState.mutations || []; // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const queries = dehydratedState.queries || [];\n  mutations.forEach(dehydratedMutation => {\n    var _options$defaultOptio;\n\n    mutationCache.build(client, { ...(options == null ? void 0 : (_options$defaultOptio = options.defaultOptions) == null ? void 0 : _options$defaultOptio.mutations),\n      mutationKey: dehydratedMutation.mutationKey\n    }, dehydratedMutation.state);\n  });\n  queries.forEach(dehydratedQuery => {\n    var _options$defaultOptio2;\n\n    const query = queryCache.get(dehydratedQuery.queryHash); // Do not hydrate if an existing query exists with newer data\n\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQuery.state.dataUpdatedAt) {\n        query.setState(dehydratedQuery.state);\n      }\n\n      return;\n    } // Restore query\n\n\n    queryCache.build(client, { ...(options == null ? void 0 : (_options$defaultOptio2 = options.defaultOptions) == null ? void 0 : _options$defaultOptio2.queries),\n      queryKey: dehydratedQuery.queryKey,\n      queryHash: dehydratedQuery.queryHash\n    }, dehydratedQuery.state);\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}