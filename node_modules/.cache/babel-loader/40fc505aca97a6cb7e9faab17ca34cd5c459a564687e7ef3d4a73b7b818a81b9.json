{"ast":null,"code":"import _createClass from \"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { focusManager } from \"./focusManager.mjs\";\nimport { onlineManager } from \"./onlineManager.mjs\";\nimport { sleep } from \"./utils.mjs\";\nfunction defaultRetryDelay(failureCount) {\n  return Math.min(1000 * Math.pow(2, failureCount), 30000);\n}\nexport function canFetch(networkMode) {\n  return (networkMode != null ? networkMode : 'online') === 'online' ? onlineManager.isOnline() : true;\n}\nexport var CancelledError = /*#__PURE__*/_createClass(function CancelledError(options) {\n  _classCallCheck(this, CancelledError);\n  this.revert = options == null ? void 0 : options.revert;\n  this.silent = options == null ? void 0 : options.silent;\n});\nexport function isCancelledError(value) {\n  return value instanceof CancelledError;\n}\nexport function createRetryer(config) {\n  var isRetryCancelled = false;\n  var failureCount = 0;\n  var isResolved = false;\n  var continueFn;\n  var promiseResolve;\n  var promiseReject;\n  var promise = new Promise(function (outerResolve, outerReject) {\n    promiseResolve = outerResolve;\n    promiseReject = outerReject;\n  });\n  var cancel = function cancel(cancelOptions) {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions));\n      config.abort == null ? void 0 : config.abort();\n    }\n  };\n  var cancelRetry = function cancelRetry() {\n    isRetryCancelled = true;\n  };\n  var continueRetry = function continueRetry() {\n    isRetryCancelled = false;\n  };\n  var shouldPause = function shouldPause() {\n    return !focusManager.isFocused() || config.networkMode !== 'always' && !onlineManager.isOnline();\n  };\n  var resolve = function resolve(value) {\n    if (!isResolved) {\n      isResolved = true;\n      config.onSuccess == null ? void 0 : config.onSuccess(value);\n      continueFn == null ? void 0 : continueFn();\n      promiseResolve(value);\n    }\n  };\n  var reject = function reject(value) {\n    if (!isResolved) {\n      isResolved = true;\n      config.onError == null ? void 0 : config.onError(value);\n      continueFn == null ? void 0 : continueFn();\n      promiseReject(value);\n    }\n  };\n  var pause = function pause() {\n    return new Promise(function (continueResolve) {\n      continueFn = function continueFn(value) {\n        if (isResolved || !shouldPause()) {\n          return continueResolve(value);\n        }\n      };\n      config.onPause == null ? void 0 : config.onPause();\n    }).then(function () {\n      continueFn = undefined;\n      if (!isResolved) {\n        config.onContinue == null ? void 0 : config.onContinue();\n      }\n    });\n  }; // Create loop function\n\n  var run = function run() {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return;\n    }\n    var promiseOrValue; // Execute query\n\n    try {\n      promiseOrValue = config.fn();\n    } catch (error) {\n      promiseOrValue = Promise.reject(error);\n    }\n    Promise.resolve(promiseOrValue).then(resolve).catch(function (error) {\n      var _config$retry, _config$retryDelay;\n\n      // Stop if the fetch is already resolved\n      if (isResolved) {\n        return;\n      } // Do we need to retry the request?\n\n      var retry = (_config$retry = config.retry) != null ? _config$retry : 3;\n      var retryDelay = (_config$retryDelay = config.retryDelay) != null ? _config$retryDelay : defaultRetryDelay;\n      var delay = typeof retryDelay === 'function' ? retryDelay(failureCount, error) : retryDelay;\n      var shouldRetry = retry === true || typeof retry === 'number' && failureCount < retry || typeof retry === 'function' && retry(failureCount, error);\n      if (isRetryCancelled || !shouldRetry) {\n        // We are done if the query does not need to be retried\n        reject(error);\n        return;\n      }\n      failureCount++; // Notify on fail\n\n      config.onFail == null ? void 0 : config.onFail(failureCount, error); // Delay\n\n      sleep(delay) // Pause if the document is not visible or when the device is offline\n      .then(function () {\n        if (shouldPause()) {\n          return pause();\n        }\n      }).then(function () {\n        if (isRetryCancelled) {\n          reject(error);\n        } else {\n          run();\n        }\n      });\n    });\n  }; // Start loop\n\n  if (canFetch(config.networkMode)) {\n    run();\n  } else {\n    pause().then(run);\n  }\n  return {\n    promise: promise,\n    cancel: cancel,\n    continue: function _continue() {\n      continueFn == null ? void 0 : continueFn();\n    },\n    cancelRetry: cancelRetry,\n    continueRetry: continueRetry\n  };\n}","map":{"version":3,"names":["focusManager","onlineManager","sleep","defaultRetryDelay","failureCount","Math","min","pow","canFetch","networkMode","isOnline","CancelledError","_createClass","options","_classCallCheck","revert","silent","isCancelledError","value","createRetryer","config","isRetryCancelled","isResolved","continueFn","promiseResolve","promiseReject","promise","Promise","outerResolve","outerReject","cancel","cancelOptions","reject","abort","cancelRetry","continueRetry","shouldPause","isFocused","resolve","onSuccess","onError","pause","continueResolve","onPause","then","undefined","onContinue","run","promiseOrValue","fn","error","catch","_config$retry","_config$retryDelay","retry","retryDelay","delay","shouldRetry","onFail","continue","_continue"],"sources":["D:/Projects/RainbowKit/connectwallet/node_modules/react-query/lib/core/retryer.mjs"],"sourcesContent":["import { focusManager } from \"./focusManager.mjs\";\nimport { onlineManager } from \"./onlineManager.mjs\";\nimport { sleep } from \"./utils.mjs\";\n\nfunction defaultRetryDelay(failureCount) {\n  return Math.min(1000 * 2 ** failureCount, 30000);\n}\n\nexport function canFetch(networkMode) {\n  return (networkMode != null ? networkMode : 'online') === 'online' ? onlineManager.isOnline() : true;\n}\nexport class CancelledError {\n  constructor(options) {\n    this.revert = options == null ? void 0 : options.revert;\n    this.silent = options == null ? void 0 : options.silent;\n  }\n\n}\nexport function isCancelledError(value) {\n  return value instanceof CancelledError;\n}\nexport function createRetryer(config) {\n  let isRetryCancelled = false;\n  let failureCount = 0;\n  let isResolved = false;\n  let continueFn;\n  let promiseResolve;\n  let promiseReject;\n  const promise = new Promise((outerResolve, outerReject) => {\n    promiseResolve = outerResolve;\n    promiseReject = outerReject;\n  });\n\n  const cancel = cancelOptions => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions));\n      config.abort == null ? void 0 : config.abort();\n    }\n  };\n\n  const cancelRetry = () => {\n    isRetryCancelled = true;\n  };\n\n  const continueRetry = () => {\n    isRetryCancelled = false;\n  };\n\n  const shouldPause = () => !focusManager.isFocused() || config.networkMode !== 'always' && !onlineManager.isOnline();\n\n  const resolve = value => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onSuccess == null ? void 0 : config.onSuccess(value);\n      continueFn == null ? void 0 : continueFn();\n      promiseResolve(value);\n    }\n  };\n\n  const reject = value => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onError == null ? void 0 : config.onError(value);\n      continueFn == null ? void 0 : continueFn();\n      promiseReject(value);\n    }\n  };\n\n  const pause = () => {\n    return new Promise(continueResolve => {\n      continueFn = value => {\n        if (isResolved || !shouldPause()) {\n          return continueResolve(value);\n        }\n      };\n\n      config.onPause == null ? void 0 : config.onPause();\n    }).then(() => {\n      continueFn = undefined;\n\n      if (!isResolved) {\n        config.onContinue == null ? void 0 : config.onContinue();\n      }\n    });\n  }; // Create loop function\n\n\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return;\n    }\n\n    let promiseOrValue; // Execute query\n\n    try {\n      promiseOrValue = config.fn();\n    } catch (error) {\n      promiseOrValue = Promise.reject(error);\n    }\n\n    Promise.resolve(promiseOrValue).then(resolve).catch(error => {\n      var _config$retry, _config$retryDelay;\n\n      // Stop if the fetch is already resolved\n      if (isResolved) {\n        return;\n      } // Do we need to retry the request?\n\n\n      const retry = (_config$retry = config.retry) != null ? _config$retry : 3;\n      const retryDelay = (_config$retryDelay = config.retryDelay) != null ? _config$retryDelay : defaultRetryDelay;\n      const delay = typeof retryDelay === 'function' ? retryDelay(failureCount, error) : retryDelay;\n      const shouldRetry = retry === true || typeof retry === 'number' && failureCount < retry || typeof retry === 'function' && retry(failureCount, error);\n\n      if (isRetryCancelled || !shouldRetry) {\n        // We are done if the query does not need to be retried\n        reject(error);\n        return;\n      }\n\n      failureCount++; // Notify on fail\n\n      config.onFail == null ? void 0 : config.onFail(failureCount, error); // Delay\n\n      sleep(delay) // Pause if the document is not visible or when the device is offline\n      .then(() => {\n        if (shouldPause()) {\n          return pause();\n        }\n      }).then(() => {\n        if (isRetryCancelled) {\n          reject(error);\n        } else {\n          run();\n        }\n      });\n    });\n  }; // Start loop\n\n\n  if (canFetch(config.networkMode)) {\n    run();\n  } else {\n    pause().then(run);\n  }\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      continueFn == null ? void 0 : continueFn();\n    },\n    cancelRetry,\n    continueRetry\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}