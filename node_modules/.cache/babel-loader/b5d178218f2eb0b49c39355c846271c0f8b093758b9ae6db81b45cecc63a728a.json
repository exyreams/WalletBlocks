{"ast":null,"code":"import React from 'react';\nexport var defaultContext = /*#__PURE__*/React.createContext(undefined);\nvar QueryClientSharingContext = /*#__PURE__*/React.createContext(false); // If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\n\nfunction getQueryClientContext(context, contextSharing) {\n  if (context) {\n    return context;\n  }\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext;\n    }\n    return window.ReactQueryClientContext;\n  }\n  return defaultContext;\n}\nexport var useQueryClient = function useQueryClient() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    context = _ref.context;\n  var queryClient = React.useContext(getQueryClientContext(context, React.useContext(QueryClientSharingContext)));\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one');\n  }\n  return queryClient;\n};\nexport var QueryClientProvider = function QueryClientProvider(_ref2) {\n  var client = _ref2.client,\n    children = _ref2.children,\n    context = _ref2.context,\n    _ref2$contextSharing = _ref2.contextSharing,\n    contextSharing = _ref2$contextSharing === void 0 ? false : _ref2$contextSharing;\n  React.useEffect(function () {\n    client.mount();\n    return function () {\n      client.unmount();\n    };\n  }, [client]);\n  var Context = getQueryClientContext(context, contextSharing);\n  return /*#__PURE__*/React.createElement(QueryClientSharingContext.Provider, {\n    value: !context && contextSharing\n  }, /*#__PURE__*/React.createElement(Context.Provider, {\n    value: client\n  }, children));\n};","map":{"version":3,"names":["React","defaultContext","createContext","undefined","QueryClientSharingContext","getQueryClientContext","context","contextSharing","window","ReactQueryClientContext","useQueryClient","_ref","arguments","length","queryClient","useContext","Error","QueryClientProvider","_ref2","client","children","_ref2$contextSharing","useEffect","mount","unmount","Context","createElement","Provider","value"],"sources":["D:/Projects/RainbowKit/connectwallet/node_modules/react-query/lib/reactjs/QueryClientProvider.mjs"],"sourcesContent":["import React from 'react';\nexport const defaultContext = /*#__PURE__*/React.createContext(undefined);\nconst QueryClientSharingContext = /*#__PURE__*/React.createContext(false); // If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\n\nfunction getQueryClientContext(context, contextSharing) {\n  if (context) {\n    return context;\n  }\n\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext;\n    }\n\n    return window.ReactQueryClientContext;\n  }\n\n  return defaultContext;\n}\n\nexport const useQueryClient = ({\n  context\n} = {}) => {\n  const queryClient = React.useContext(getQueryClientContext(context, React.useContext(QueryClientSharingContext)));\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one');\n  }\n\n  return queryClient;\n};\nexport const QueryClientProvider = ({\n  client,\n  children,\n  context,\n  contextSharing = false\n}) => {\n  React.useEffect(() => {\n    client.mount();\n    return () => {\n      client.unmount();\n    };\n  }, [client]);\n  const Context = getQueryClientContext(context, contextSharing);\n  return /*#__PURE__*/React.createElement(QueryClientSharingContext.Provider, {\n    value: !context && contextSharing\n  }, /*#__PURE__*/React.createElement(Context.Provider, {\n    value: client\n  }, children));\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,IAAMC,cAAc,GAAG,aAAaD,KAAK,CAACE,aAAa,CAACC,SAAS,CAAC;AACzE,IAAMC,yBAAyB,GAAG,aAAaJ,KAAK,CAACE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;AAC3E;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASG,qBAAqBA,CAACC,OAAO,EAAEC,cAAc,EAAE;EACtD,IAAID,OAAO,EAAE;IACX,OAAOA,OAAO;EAChB;EAEA,IAAIC,cAAc,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;IACnD,IAAI,CAACA,MAAM,CAACC,uBAAuB,EAAE;MACnCD,MAAM,CAACC,uBAAuB,GAAGR,cAAc;IACjD;IAEA,OAAOO,MAAM,CAACC,uBAAuB;EACvC;EAEA,OAAOR,cAAc;AACvB;AAEA,OAAO,IAAMS,cAAc,GAAG,SAAjBA,cAAcA,CAAA,EAEhB;EAAA,IAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAT,SAAA,GAAAS,SAAA,MAAP,CAAC,CAAC;IADJN,OAAO,GAAAK,IAAA,CAAPL,OAAO;EAEP,IAAMQ,WAAW,GAAGd,KAAK,CAACe,UAAU,CAACV,qBAAqB,CAACC,OAAO,EAAEN,KAAK,CAACe,UAAU,CAACX,yBAAyB,CAAC,CAAC,CAAC;EAEjH,IAAI,CAACU,WAAW,EAAE;IAChB,MAAM,IAAIE,KAAK,CAAC,wDAAwD,CAAC;EAC3E;EAEA,OAAOF,WAAW;AACpB,CAAC;AACD,OAAO,IAAMG,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAAC,KAAA,EAK1B;EAAA,IAJJC,MAAM,GAAAD,KAAA,CAANC,MAAM;IACNC,QAAQ,GAAAF,KAAA,CAARE,QAAQ;IACRd,OAAO,GAAAY,KAAA,CAAPZ,OAAO;IAAAe,oBAAA,GAAAH,KAAA,CACPX,cAAc;IAAdA,cAAc,GAAAc,oBAAA,cAAG,KAAK,GAAAA,oBAAA;EAEtBrB,KAAK,CAACsB,SAAS,CAAC,YAAM;IACpBH,MAAM,CAACI,KAAK,EAAE;IACd,OAAO,YAAM;MACXJ,MAAM,CAACK,OAAO,EAAE;IAClB,CAAC;EACH,CAAC,EAAE,CAACL,MAAM,CAAC,CAAC;EACZ,IAAMM,OAAO,GAAGpB,qBAAqB,CAACC,OAAO,EAAEC,cAAc,CAAC;EAC9D,OAAO,aAAaP,KAAK,CAAC0B,aAAa,CAACtB,yBAAyB,CAACuB,QAAQ,EAAE;IAC1EC,KAAK,EAAE,CAACtB,OAAO,IAAIC;EACrB,CAAC,EAAE,aAAaP,KAAK,CAAC0B,aAAa,CAACD,OAAO,CAACE,QAAQ,EAAE;IACpDC,KAAK,EAAET;EACT,CAAC,EAAEC,QAAQ,CAAC,CAAC;AACf,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}