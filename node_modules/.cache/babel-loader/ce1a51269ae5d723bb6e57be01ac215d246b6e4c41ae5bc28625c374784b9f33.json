{"ast":null,"code":"import _slicedToArray from \"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport React from 'react';\nimport { useSyncExternalStore } from \"./useSyncExternalStore.mjs\";\nimport { notifyManager } from \"../core/notifyManager.mjs\";\nimport { QueriesObserver } from \"../core/queriesObserver.mjs\";\nimport { useQueryClient } from \"./QueryClientProvider.mjs\";\nimport { useIsRestoring } from \"./isRestoring.mjs\"; // This defines the `UseQueryOptions` that are accepted in `QueriesOptions` & `GetOptions`.\n// - `context` is omitted as it is passed as a root-level option to `useQueries` instead.\n\nexport function useQueries(_ref) {\n  var queries = _ref.queries,\n    context = _ref.context;\n  var queryClient = useQueryClient({\n    context: context\n  });\n  var isRestoring = useIsRestoring();\n  var defaultedQueries = React.useMemo(function () {\n    return queries.map(function (options) {\n      var defaultedOptions = queryClient.defaultQueryOptions(options); // Make sure the results are already in fetching state before subscribing or updating options\n\n      defaultedOptions._optimisticResults = isRestoring ? 'isRestoring' : 'optimistic';\n      return defaultedOptions;\n    });\n  }, [queries, queryClient, isRestoring]);\n  var _React$useState = React.useState(function () {\n      return new QueriesObserver(queryClient, defaultedQueries);\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    observer = _React$useState2[0];\n  var result = observer.getOptimisticResult(defaultedQueries);\n  useSyncExternalStore(React.useCallback(function (onStoreChange) {\n    return isRestoring ? function () {\n      return undefined;\n    } : observer.subscribe(notifyManager.batchCalls(onStoreChange));\n  }, [observer, isRestoring]), function () {\n    return observer.getCurrentResult();\n  }, function () {\n    return observer.getCurrentResult();\n  });\n  React.useEffect(function () {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(defaultedQueries, {\n      listeners: false\n    });\n  }, [defaultedQueries, observer]);\n  return result;\n}","map":{"version":3,"names":["React","useSyncExternalStore","notifyManager","QueriesObserver","useQueryClient","useIsRestoring","useQueries","_ref","queries","context","queryClient","isRestoring","defaultedQueries","useMemo","map","options","defaultedOptions","defaultQueryOptions","_optimisticResults","_React$useState","useState","_React$useState2","_slicedToArray","observer","result","getOptimisticResult","useCallback","onStoreChange","undefined","subscribe","batchCalls","getCurrentResult","useEffect","setQueries","listeners"],"sources":["D:/Projects/RainbowKit/connectwallet/node_modules/react-query/lib/reactjs/useQueries.mjs"],"sourcesContent":["import React from 'react';\nimport { useSyncExternalStore } from \"./useSyncExternalStore.mjs\";\nimport { notifyManager } from \"../core/notifyManager.mjs\";\nimport { QueriesObserver } from \"../core/queriesObserver.mjs\";\nimport { useQueryClient } from \"./QueryClientProvider.mjs\";\nimport { useIsRestoring } from \"./isRestoring.mjs\"; // This defines the `UseQueryOptions` that are accepted in `QueriesOptions` & `GetOptions`.\n// - `context` is omitted as it is passed as a root-level option to `useQueries` instead.\n\nexport function useQueries({\n  queries,\n  context\n}) {\n  const queryClient = useQueryClient({\n    context\n  });\n  const isRestoring = useIsRestoring();\n  const defaultedQueries = React.useMemo(() => queries.map(options => {\n    const defaultedOptions = queryClient.defaultQueryOptions(options); // Make sure the results are already in fetching state before subscribing or updating options\n\n    defaultedOptions._optimisticResults = isRestoring ? 'isRestoring' : 'optimistic';\n    return defaultedOptions;\n  }), [queries, queryClient, isRestoring]);\n  const [observer] = React.useState(() => new QueriesObserver(queryClient, defaultedQueries));\n  const result = observer.getOptimisticResult(defaultedQueries);\n  useSyncExternalStore(React.useCallback(onStoreChange => isRestoring ? () => undefined : observer.subscribe(notifyManager.batchCalls(onStoreChange)), [observer, isRestoring]), () => observer.getCurrentResult(), () => observer.getCurrentResult());\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(defaultedQueries, {\n      listeners: false\n    });\n  }, [defaultedQueries, observer]);\n  return result;\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,oBAAoB,QAAQ,4BAA4B;AACjE,SAASC,aAAa,QAAQ,2BAA2B;AACzD,SAASC,eAAe,QAAQ,6BAA6B;AAC7D,SAASC,cAAc,QAAQ,2BAA2B;AAC1D,SAASC,cAAc,QAAQ,mBAAmB,CAAC,CAAC;AACpD;;AAEA,OAAO,SAASC,UAAUA,CAAAC,IAAA,EAGvB;EAAA,IAFDC,OAAO,GAAAD,IAAA,CAAPC,OAAO;IACPC,OAAO,GAAAF,IAAA,CAAPE,OAAO;EAEP,IAAMC,WAAW,GAAGN,cAAc,CAAC;IACjCK,OAAO,EAAPA;EACF,CAAC,CAAC;EACF,IAAME,WAAW,GAAGN,cAAc,EAAE;EACpC,IAAMO,gBAAgB,GAAGZ,KAAK,CAACa,OAAO,CAAC;IAAA,OAAML,OAAO,CAACM,GAAG,CAAC,UAAAC,OAAO,EAAI;MAClE,IAAMC,gBAAgB,GAAGN,WAAW,CAACO,mBAAmB,CAACF,OAAO,CAAC,CAAC,CAAC;;MAEnEC,gBAAgB,CAACE,kBAAkB,GAAGP,WAAW,GAAG,aAAa,GAAG,YAAY;MAChF,OAAOK,gBAAgB;IACzB,CAAC,CAAC;EAAA,GAAE,CAACR,OAAO,EAAEE,WAAW,EAAEC,WAAW,CAAC,CAAC;EACxC,IAAAQ,eAAA,GAAmBnB,KAAK,CAACoB,QAAQ,CAAC;MAAA,OAAM,IAAIjB,eAAe,CAACO,WAAW,EAAEE,gBAAgB,CAAC;IAAA,EAAC;IAAAS,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAApFI,QAAQ,GAAAF,gBAAA;EACf,IAAMG,MAAM,GAAGD,QAAQ,CAACE,mBAAmB,CAACb,gBAAgB,CAAC;EAC7DX,oBAAoB,CAACD,KAAK,CAAC0B,WAAW,CAAC,UAAAC,aAAa;IAAA,OAAIhB,WAAW,GAAG;MAAA,OAAMiB,SAAS;IAAA,IAAGL,QAAQ,CAACM,SAAS,CAAC3B,aAAa,CAAC4B,UAAU,CAACH,aAAa,CAAC,CAAC;EAAA,GAAE,CAACJ,QAAQ,EAAEZ,WAAW,CAAC,CAAC,EAAE;IAAA,OAAMY,QAAQ,CAACQ,gBAAgB,EAAE;EAAA,GAAE;IAAA,OAAMR,QAAQ,CAACQ,gBAAgB,EAAE;EAAA,EAAC;EACpP/B,KAAK,CAACgC,SAAS,CAAC,YAAM;IACpB;IACA;IACAT,QAAQ,CAACU,UAAU,CAACrB,gBAAgB,EAAE;MACpCsB,SAAS,EAAE;IACb,CAAC,CAAC;EACJ,CAAC,EAAE,CAACtB,gBAAgB,EAAEW,QAAQ,CAAC,CAAC;EAChC,OAAOC,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}