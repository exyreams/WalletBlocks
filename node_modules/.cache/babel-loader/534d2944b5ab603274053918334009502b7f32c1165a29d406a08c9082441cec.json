{"ast":null,"code":"\"use strict\";\n\nimport _assertThisInitialized from \"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { encode as base64Encode } from \"@ethersproject/base64\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork as _getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { Formatter } from \"./formatter\";\nvar MAX_CCIP_REDIRECTS = 10;\n//////////////////////////////\n// Event Serializeing\nfunction checkTopic(topic) {\n  if (topic == null) {\n    return \"null\";\n  }\n  if (hexDataLength(topic) !== 32) {\n    logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n  }\n  return topic.toLowerCase();\n}\nfunction serializeTopics(topics) {\n  // Remove trailing null AND-topics; they are redundant\n  topics = topics.slice();\n  while (topics.length > 0 && topics[topics.length - 1] == null) {\n    topics.pop();\n  }\n  return topics.map(function (topic) {\n    if (Array.isArray(topic)) {\n      // Only track unique OR-topics\n      var unique = {};\n      topic.forEach(function (topic) {\n        unique[checkTopic(topic)] = true;\n      });\n      // The order of OR-topics does not matter\n      var sorted = Object.keys(unique);\n      sorted.sort();\n      return sorted.join(\"|\");\n    } else {\n      return checkTopic(topic);\n    }\n  }).join(\"&\");\n}\nfunction deserializeTopics(data) {\n  if (data === \"\") {\n    return [];\n  }\n  return data.split(/&/g).map(function (topic) {\n    if (topic === \"\") {\n      return [];\n    }\n    var comps = topic.split(\"|\").map(function (topic) {\n      return topic === \"null\" ? null : topic;\n    });\n    return comps.length === 1 ? comps[0] : comps;\n  });\n}\nfunction getEventTag(eventName) {\n  if (typeof eventName === \"string\") {\n    eventName = eventName.toLowerCase();\n    if (hexDataLength(eventName) === 32) {\n      return \"tx:\" + eventName;\n    }\n    if (eventName.indexOf(\":\") === -1) {\n      return eventName;\n    }\n  } else if (Array.isArray(eventName)) {\n    return \"filter:*:\" + serializeTopics(eventName);\n  } else if (ForkEvent.isForkEvent(eventName)) {\n    logger.warn(\"not implemented\");\n    throw new Error(\"not implemented\");\n  } else if (eventName && typeof eventName === \"object\") {\n    return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n  }\n  throw new Error(\"invalid event - \" + eventName);\n}\n//////////////////////////////\n// Helper Object\nfunction getTime() {\n  return new Date().getTime();\n}\nfunction stall(duration) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, duration);\n  });\n}\n//////////////////////////////\n// Provider Object\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\nvar PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport var Event = /*#__PURE__*/function () {\n  function Event(tag, listener, once) {\n    _classCallCheck(this, Event);\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"listener\", listener);\n    defineReadOnly(this, \"once\", once);\n    this._lastBlockNumber = -2;\n    this._inflight = false;\n  }\n  _createClass(Event, [{\n    key: \"event\",\n    get: function get() {\n      switch (this.type) {\n        case \"tx\":\n          return this.hash;\n        case \"filter\":\n          return this.filter;\n      }\n      return this.tag;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.tag.split(\":\")[0];\n    }\n  }, {\n    key: \"hash\",\n    get: function get() {\n      var comps = this.tag.split(\":\");\n      if (comps[0] !== \"tx\") {\n        return null;\n      }\n      return comps[1];\n    }\n  }, {\n    key: \"filter\",\n    get: function get() {\n      var comps = this.tag.split(\":\");\n      if (comps[0] !== \"filter\") {\n        return null;\n      }\n      var address = comps[1];\n      var topics = deserializeTopics(comps[2]);\n      var filter = {};\n      if (topics.length > 0) {\n        filter.topics = topics;\n      }\n      if (address && address !== \"*\") {\n        filter.address = address;\n      }\n      return filter;\n    }\n  }, {\n    key: \"pollable\",\n    value: function pollable() {\n      return this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n    }\n  }]);\n  return Event;\n}();\n;\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nvar coinInfos = {\n  \"0\": {\n    symbol: \"btc\",\n    p2pkh: 0x00,\n    p2sh: 0x05,\n    prefix: \"bc\"\n  },\n  \"2\": {\n    symbol: \"ltc\",\n    p2pkh: 0x30,\n    p2sh: 0x32,\n    prefix: \"ltc\"\n  },\n  \"3\": {\n    symbol: \"doge\",\n    p2pkh: 0x1e,\n    p2sh: 0x16\n  },\n  \"60\": {\n    symbol: \"eth\",\n    ilk: \"eth\"\n  },\n  \"61\": {\n    symbol: \"etc\",\n    ilk: \"eth\"\n  },\n  \"700\": {\n    symbol: \"xdai\",\n    ilk: \"eth\"\n  }\n};\nfunction bytes32ify(value) {\n  return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data) {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\nvar matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nvar matchers = [new RegExp(\"^(https):/\\/(.*)$\", \"i\"), new RegExp(\"^(data):(.*)$\", \"i\"), matcherIpfs, new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\")];\nfunction _parseString(result, start) {\n  try {\n    return toUtf8String(_parseBytes(result, start));\n  } catch (error) {}\n  return null;\n}\nfunction _parseBytes(result, start) {\n  if (result === \"0x\") {\n    return null;\n  }\n  var offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n  var length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n  return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link) {\n  if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n    link = link.substring(12);\n  } else if (link.match(/^ipfs:\\/\\//i)) {\n    link = link.substring(7);\n  } else {\n    logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n  }\n  return \"https://gateway.ipfs.io/ipfs/\".concat(link);\n}\nfunction numPad(value) {\n  var result = arrayify(value);\n  if (result.length > 32) {\n    throw new Error(\"internal; should not happen\");\n  }\n  var padded = new Uint8Array(32);\n  padded.set(result, 32 - result.length);\n  return padded;\n}\nfunction bytesPad(value) {\n  if (value.length % 32 === 0) {\n    return value;\n  }\n  var result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n  result.set(value);\n  return result;\n}\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas) {\n  var result = [];\n  var byteCount = 0;\n  // Add place-holders for pointers as we add items\n  for (var i = 0; i < datas.length; i++) {\n    result.push(null);\n    byteCount += 32;\n  }\n  for (var _i = 0; _i < datas.length; _i++) {\n    var data = arrayify(datas[_i]);\n    // Update the bytes offset\n    result[_i] = numPad(byteCount);\n    // The length and padded value of data\n    result.push(numPad(data.length));\n    result.push(bytesPad(data));\n    byteCount += 32 + Math.ceil(data.length / 32) * 32;\n  }\n  return hexConcat(result);\n}\nexport var Resolver = /*#__PURE__*/function () {\n  // The resolvedAddress is only for creating a ReverseLookup resolver\n  function Resolver(provider, address, name, resolvedAddress) {\n    _classCallCheck(this, Resolver);\n    defineReadOnly(this, \"provider\", provider);\n    defineReadOnly(this, \"name\", name);\n    defineReadOnly(this, \"address\", provider.formatter.address(address));\n    defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n  }\n  _createClass(Resolver, [{\n    key: \"supportsWildcard\",\n    value: function supportsWildcard() {\n      var _this = this;\n      if (!this._supportsEip2544) {\n        // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n        this._supportsEip2544 = this.provider.call({\n          to: this.address,\n          data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n        }).then(function (result) {\n          return BigNumber.from(result).eq(1);\n        }).catch(function (error) {\n          if (error.code === Logger.errors.CALL_EXCEPTION) {\n            return false;\n          }\n          // Rethrow the error: link is down, etc. Let future attempts retry.\n          _this._supportsEip2544 = null;\n          throw error;\n        });\n      }\n      return this._supportsEip2544;\n    }\n  }, {\n    key: \"_fetch\",\n    value: function _fetch(selector, parameters) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var tx, parseBytes, result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              // e.g. keccak256(\"addr(bytes32,uint256)\")\n              tx = {\n                to: this.address,\n                ccipReadEnabled: true,\n                data: hexConcat([selector, namehash(this.name), parameters || \"0x\"])\n              }; // Wildcard support; use EIP-2544 to resolve the request\n              parseBytes = false;\n              _context.next = 4;\n              return this.supportsWildcard();\n            case 4:\n              if (!_context.sent) {\n                _context.next = 7;\n                break;\n              }\n              parseBytes = true;\n              // selector(\"resolve(bytes,bytes)\")\n              tx.data = hexConcat([\"0x9061b923\", encodeBytes([dnsEncode(this.name), tx.data])]);\n            case 7:\n              _context.prev = 7;\n              _context.next = 10;\n              return this.provider.call(tx);\n            case 10:\n              result = _context.sent;\n              if (arrayify(result).length % 32 === 4) {\n                logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                  transaction: tx,\n                  data: result\n                });\n              }\n              if (parseBytes) {\n                result = _parseBytes(result, 0);\n              }\n              return _context.abrupt(\"return\", result);\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](7);\n              if (!(_context.t0.code === Logger.errors.CALL_EXCEPTION)) {\n                _context.next = 20;\n                break;\n              }\n              return _context.abrupt(\"return\", null);\n            case 20:\n              throw _context.t0;\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[7, 16]]);\n      }));\n    }\n  }, {\n    key: \"_fetchBytes\",\n    value: function _fetchBytes(selector, parameters) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this._fetch(selector, parameters);\n            case 2:\n              result = _context2.sent;\n              if (!(result != null)) {\n                _context2.next = 5;\n                break;\n              }\n              return _context2.abrupt(\"return\", _parseBytes(result, 0));\n            case 5:\n              return _context2.abrupt(\"return\", null);\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"_getAddress\",\n    value: function _getAddress(coinType, hexBytes) {\n      var coinInfo = coinInfos[String(coinType)];\n      if (coinInfo == null) {\n        logger.throwError(\"unsupported coin type: \".concat(coinType), Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"getAddress(\".concat(coinType, \")\")\n        });\n      }\n      if (coinInfo.ilk === \"eth\") {\n        return this.provider.formatter.address(hexBytes);\n      }\n      var bytes = arrayify(hexBytes);\n      // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n      if (coinInfo.p2pkh != null) {\n        var p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n        if (p2pkh) {\n          var length = parseInt(p2pkh[1], 16);\n          if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n            return base58Encode(concat([[coinInfo.p2pkh], \"0x\" + p2pkh[2]]));\n          }\n        }\n      }\n      // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n      if (coinInfo.p2sh != null) {\n        var p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n        if (p2sh) {\n          var _length = parseInt(p2sh[1], 16);\n          if (p2sh[2].length === _length * 2 && _length >= 1 && _length <= 75) {\n            return base58Encode(concat([[coinInfo.p2sh], \"0x\" + p2sh[2]]));\n          }\n        }\n      }\n      // Bech32\n      if (coinInfo.prefix != null) {\n        var _length2 = bytes[1];\n        // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n        var _version = bytes[0];\n        if (_version === 0x00) {\n          if (_length2 !== 20 && _length2 !== 32) {\n            _version = -1;\n          }\n        } else {\n          _version = -1;\n        }\n        if (_version >= 0 && bytes.length === 2 + _length2 && _length2 >= 1 && _length2 <= 75) {\n          var words = bech32.toWords(bytes.slice(2));\n          words.unshift(_version);\n          return bech32.encode(coinInfo.prefix, words);\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress(coinType) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var result, hexBytes, address;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (coinType == null) {\n                coinType = 60;\n              }\n              // If Ethereum, use the standard `addr(bytes32)`\n              if (!(coinType === 60)) {\n                _context3.next = 16;\n                break;\n              }\n              _context3.prev = 2;\n              _context3.next = 5;\n              return this._fetch(\"0x3b3b57de\");\n            case 5:\n              result = _context3.sent;\n              if (!(result === \"0x\" || result === HashZero)) {\n                _context3.next = 8;\n                break;\n              }\n              return _context3.abrupt(\"return\", null);\n            case 8:\n              return _context3.abrupt(\"return\", this.provider.formatter.callAddress(result));\n            case 11:\n              _context3.prev = 11;\n              _context3.t0 = _context3[\"catch\"](2);\n              if (!(_context3.t0.code === Logger.errors.CALL_EXCEPTION)) {\n                _context3.next = 15;\n                break;\n              }\n              return _context3.abrupt(\"return\", null);\n            case 15:\n              throw _context3.t0;\n            case 16:\n              _context3.next = 18;\n              return this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n            case 18:\n              hexBytes = _context3.sent;\n              if (!(hexBytes == null || hexBytes === \"0x\")) {\n                _context3.next = 21;\n                break;\n              }\n              return _context3.abrupt(\"return\", null);\n            case 21:\n              // Compute the address\n              address = this._getAddress(coinType, hexBytes);\n              if (address == null) {\n                logger.throwError(\"invalid or unsupported coin data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"getAddress(\".concat(coinType, \")\"),\n                  coinType: coinType,\n                  data: hexBytes\n                });\n              }\n              return _context3.abrupt(\"return\", address);\n            case 24:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[2, 11]]);\n      }));\n    }\n  }, {\n    key: \"getAvatar\",\n    value: function getAvatar() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var linkage, avatar, i, match, scheme, selector, owner, comps, addr, tokenId, tokenOwner, balance, tx, metadataUrl, metadata, imageUrl, ipfs;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              linkage = [{\n                type: \"name\",\n                content: this.name\n              }];\n              _context4.prev = 1;\n              _context4.next = 4;\n              return this.getText(\"avatar\");\n            case 4:\n              avatar = _context4.sent;\n              if (!(avatar == null)) {\n                _context4.next = 7;\n                break;\n              }\n              return _context4.abrupt(\"return\", null);\n            case 7:\n              i = 0;\n            case 8:\n              if (!(i < matchers.length)) {\n                _context4.next = 91;\n                break;\n              }\n              match = avatar.match(matchers[i]);\n              if (!(match == null)) {\n                _context4.next = 12;\n                break;\n              }\n              return _context4.abrupt(\"continue\", 88);\n            case 12:\n              scheme = match[1].toLowerCase();\n              _context4.t0 = scheme;\n              _context4.next = _context4.t0 === \"https\" ? 16 : _context4.t0 === \"data\" ? 18 : _context4.t0 === \"ipfs\" ? 20 : _context4.t0 === \"erc721\" ? 22 : _context4.t0 === \"erc1155\" ? 22 : 88;\n              break;\n            case 16:\n              linkage.push({\n                type: \"url\",\n                content: avatar\n              });\n              return _context4.abrupt(\"return\", {\n                linkage: linkage,\n                url: avatar\n              });\n            case 18:\n              linkage.push({\n                type: \"data\",\n                content: avatar\n              });\n              return _context4.abrupt(\"return\", {\n                linkage: linkage,\n                url: avatar\n              });\n            case 20:\n              linkage.push({\n                type: \"ipfs\",\n                content: avatar\n              });\n              return _context4.abrupt(\"return\", {\n                linkage: linkage,\n                url: getIpfsLink(avatar)\n              });\n            case 22:\n              // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n              selector = scheme === \"erc721\" ? \"0xc87b56dd\" : \"0x0e89341c\";\n              linkage.push({\n                type: scheme,\n                content: avatar\n              });\n              // The owner of this name\n              _context4.t1 = this._resolvedAddress;\n              if (_context4.t1) {\n                _context4.next = 29;\n                break;\n              }\n              _context4.next = 28;\n              return this.getAddress();\n            case 28:\n              _context4.t1 = _context4.sent;\n            case 29:\n              owner = _context4.t1;\n              comps = (match[2] || \"\").split(\"/\");\n              if (!(comps.length !== 2)) {\n                _context4.next = 33;\n                break;\n              }\n              return _context4.abrupt(\"return\", null);\n            case 33:\n              _context4.next = 35;\n              return this.provider.formatter.address(comps[0]);\n            case 35:\n              addr = _context4.sent;\n              tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32); // Check that this account owns the token\n              if (!(scheme === \"erc721\")) {\n                _context4.next = 48;\n                break;\n              }\n              _context4.t2 = this.provider.formatter;\n              _context4.next = 41;\n              return this.provider.call({\n                to: addr,\n                data: hexConcat([\"0x6352211e\", tokenId])\n              });\n            case 41:\n              _context4.t3 = _context4.sent;\n              tokenOwner = _context4.t2.callAddress.call(_context4.t2, _context4.t3);\n              if (!(owner !== tokenOwner)) {\n                _context4.next = 45;\n                break;\n              }\n              return _context4.abrupt(\"return\", null);\n            case 45:\n              linkage.push({\n                type: \"owner\",\n                content: tokenOwner\n              });\n              _context4.next = 57;\n              break;\n            case 48:\n              if (!(scheme === \"erc1155\")) {\n                _context4.next = 57;\n                break;\n              }\n              _context4.t4 = BigNumber;\n              _context4.next = 52;\n              return this.provider.call({\n                to: addr,\n                data: hexConcat([\"0x00fdd58e\", hexZeroPad(owner, 32), tokenId])\n              });\n            case 52:\n              _context4.t5 = _context4.sent;\n              balance = _context4.t4.from.call(_context4.t4, _context4.t5);\n              if (!balance.isZero()) {\n                _context4.next = 56;\n                break;\n              }\n              return _context4.abrupt(\"return\", null);\n            case 56:\n              linkage.push({\n                type: \"balance\",\n                content: balance.toString()\n              });\n            case 57:\n              // Call the token contract for the metadata URL\n              tx = {\n                to: this.provider.formatter.address(comps[0]),\n                data: hexConcat([selector, tokenId])\n              };\n              _context4.t6 = _parseString;\n              _context4.next = 61;\n              return this.provider.call(tx);\n            case 61:\n              _context4.t7 = _context4.sent;\n              metadataUrl = (0, _context4.t6)(_context4.t7, 0);\n              if (!(metadataUrl == null)) {\n                _context4.next = 65;\n                break;\n              }\n              return _context4.abrupt(\"return\", null);\n            case 65:\n              linkage.push({\n                type: \"metadata-url-base\",\n                content: metadataUrl\n              });\n              // ERC-1155 allows a generic {id} in the URL\n              if (scheme === \"erc1155\") {\n                metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                linkage.push({\n                  type: \"metadata-url-expanded\",\n                  content: metadataUrl\n                });\n              }\n              // Transform IPFS metadata links\n              if (metadataUrl.match(/^ipfs:/i)) {\n                metadataUrl = getIpfsLink(metadataUrl);\n              }\n              linkage.push({\n                type: \"metadata-url\",\n                content: metadataUrl\n              });\n              // Get the token metadata\n              _context4.next = 71;\n              return fetchJson(metadataUrl);\n            case 71:\n              metadata = _context4.sent;\n              if (metadata) {\n                _context4.next = 74;\n                break;\n              }\n              return _context4.abrupt(\"return\", null);\n            case 74:\n              linkage.push({\n                type: \"metadata\",\n                content: JSON.stringify(metadata)\n              });\n              // Pull the image URL out\n              imageUrl = metadata.image;\n              if (!(typeof imageUrl !== \"string\")) {\n                _context4.next = 78;\n                break;\n              }\n              return _context4.abrupt(\"return\", null);\n            case 78:\n              if (!imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                _context4.next = 81;\n                break;\n              }\n              _context4.next = 86;\n              break;\n            case 81:\n              // Transform IPFS link to gateway\n              ipfs = imageUrl.match(matcherIpfs);\n              if (!(ipfs == null)) {\n                _context4.next = 84;\n                break;\n              }\n              return _context4.abrupt(\"return\", null);\n            case 84:\n              linkage.push({\n                type: \"url-ipfs\",\n                content: imageUrl\n              });\n              imageUrl = getIpfsLink(imageUrl);\n            case 86:\n              linkage.push({\n                type: \"url\",\n                content: imageUrl\n              });\n              return _context4.abrupt(\"return\", {\n                linkage: linkage,\n                url: imageUrl\n              });\n            case 88:\n              i++;\n              _context4.next = 8;\n              break;\n            case 91:\n              _context4.next = 95;\n              break;\n            case 93:\n              _context4.prev = 93;\n              _context4.t8 = _context4[\"catch\"](1);\n            case 95:\n              return _context4.abrupt(\"return\", null);\n            case 96:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[1, 93]]);\n      }));\n    }\n  }, {\n    key: \"getContentHash\",\n    value: function getContentHash() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var hexBytes, ipfs, length, ipns, _length3, swarm, skynet, urlSafe, hash;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this._fetchBytes(\"0xbc1c58d1\");\n            case 2:\n              hexBytes = _context5.sent;\n              if (!(hexBytes == null || hexBytes === \"0x\")) {\n                _context5.next = 5;\n                break;\n              }\n              return _context5.abrupt(\"return\", null);\n            case 5:\n              // IPFS (CID: 1, Type: DAG-PB)\n              ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n              if (!ipfs) {\n                _context5.next = 10;\n                break;\n              }\n              length = parseInt(ipfs[3], 16);\n              if (!(ipfs[4].length === length * 2)) {\n                _context5.next = 10;\n                break;\n              }\n              return _context5.abrupt(\"return\", \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]));\n            case 10:\n              // IPNS (CID: 1, Type: libp2p-key)\n              ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n              if (!ipns) {\n                _context5.next = 15;\n                break;\n              }\n              _length3 = parseInt(ipns[3], 16);\n              if (!(ipns[4].length === _length3 * 2)) {\n                _context5.next = 15;\n                break;\n              }\n              return _context5.abrupt(\"return\", \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]));\n            case 15:\n              // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n              swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n              if (!swarm) {\n                _context5.next = 19;\n                break;\n              }\n              if (!(swarm[1].length === 32 * 2)) {\n                _context5.next = 19;\n                break;\n              }\n              return _context5.abrupt(\"return\", \"bzz:/\\/\" + swarm[1]);\n            case 19:\n              skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n              if (!skynet) {\n                _context5.next = 25;\n                break;\n              }\n              if (!(skynet[1].length === 34 * 2)) {\n                _context5.next = 25;\n                break;\n              }\n              // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n              urlSafe = {\n                \"=\": \"\",\n                \"+\": \"-\",\n                \"/\": \"_\"\n              };\n              hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, function (a) {\n                return urlSafe[a];\n              });\n              return _context5.abrupt(\"return\", \"sia:/\\/\" + hash);\n            case 25:\n              return _context5.abrupt(\"return\", logger.throwError(\"invalid or unsupported content hash data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"getContentHash()\",\n                data: hexBytes\n              }));\n            case 26:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"getText\",\n    value: function getText(key) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var keyBytes, hexBytes;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              // The key encoded as parameter to fetchBytes\n              keyBytes = toUtf8Bytes(key); // The nodehash consumes the first slot, so the string pointer targets\n              // offset 64, with the length at offset 64 and data starting at offset 96\n              keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);\n              // Pad to word-size (32 bytes)\n              if (keyBytes.length % 32 !== 0) {\n                keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - key.length % 32)]);\n              }\n              _context6.next = 5;\n              return this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n            case 5:\n              hexBytes = _context6.sent;\n              if (!(hexBytes == null || hexBytes === \"0x\")) {\n                _context6.next = 8;\n                break;\n              }\n              return _context6.abrupt(\"return\", null);\n            case 8:\n              return _context6.abrupt(\"return\", toUtf8String(hexBytes));\n            case 9:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n    }\n  }]);\n  return Resolver;\n}();\nvar defaultFormatter = null;\nvar nextPollId = 1;\nexport var BaseProvider = /*#__PURE__*/function (_Provider) {\n  _inherits(BaseProvider, _Provider);\n  var _super = _createSuper(BaseProvider);\n  /**\n   *  ready\n   *\n   *  A Promise<Network> that resolves only once the provider is ready.\n   *\n   *  Sub-classes that call the super with a network without a chainId\n   *  MUST set this. Standard named networks have a known chainId.\n   *\n   */\n  function BaseProvider(network) {\n    var _this2;\n    _classCallCheck(this, BaseProvider);\n    _this2 = _super.call(this);\n    // Events being listened to\n    _this2._events = [];\n    _this2._emitted = {\n      block: -2\n    };\n    _this2.disableCcipRead = false;\n    _this2.formatter = (this instanceof BaseProvider ? this.constructor : void 0).getFormatter();\n    // If network is any, this Provider allows the underlying\n    // network to change dynamically, and we auto-detect the\n    // current network\n    defineReadOnly(_assertThisInitialized(_this2), \"anyNetwork\", network === \"any\");\n    if (_this2.anyNetwork) {\n      network = _this2.detectNetwork();\n    }\n    if (network instanceof Promise) {\n      _this2._networkPromise = network;\n      // Squash any \"unhandled promise\" errors; that do not need to be handled\n      network.catch(function (error) {});\n      // Trigger initial network setting (async)\n      _this2._ready().catch(function (error) {});\n    } else {\n      var knownNetwork = getStatic(this instanceof BaseProvider ? this.constructor : void 0, \"getNetwork\")(network);\n      if (knownNetwork) {\n        defineReadOnly(_assertThisInitialized(_this2), \"_network\", knownNetwork);\n        _this2.emit(\"network\", knownNetwork, null);\n      } else {\n        logger.throwArgumentError(\"invalid network\", \"network\", network);\n      }\n    }\n    _this2._maxInternalBlockNumber = -1024;\n    _this2._lastBlockNumber = -2;\n    _this2._maxFilterBlockRange = 10;\n    _this2._pollingInterval = 4000;\n    _this2._fastQueryDate = 0;\n    return _this2;\n  }\n  _createClass(BaseProvider, [{\n    key: \"_ready\",\n    value: function _ready() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var network;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              if (!(this._network == null)) {\n                _context7.next = 17;\n                break;\n              }\n              network = null;\n              if (!this._networkPromise) {\n                _context7.next = 11;\n                break;\n              }\n              _context7.prev = 3;\n              _context7.next = 6;\n              return this._networkPromise;\n            case 6:\n              network = _context7.sent;\n              _context7.next = 11;\n              break;\n            case 9:\n              _context7.prev = 9;\n              _context7.t0 = _context7[\"catch\"](3);\n            case 11:\n              if (!(network == null)) {\n                _context7.next = 15;\n                break;\n              }\n              _context7.next = 14;\n              return this.detectNetwork();\n            case 14:\n              network = _context7.sent;\n            case 15:\n              // This should never happen; every Provider sub-class should have\n              // suggested a network by here (or have thrown).\n              if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n              }\n              // Possible this call stacked so do not call defineReadOnly again\n              if (this._network == null) {\n                if (this.anyNetwork) {\n                  this._network = network;\n                } else {\n                  defineReadOnly(this, \"_network\", network);\n                }\n                this.emit(\"network\", network, null);\n              }\n            case 17:\n              return _context7.abrupt(\"return\", this._network);\n            case 18:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this, [[3, 9]]);\n      }));\n    }\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n  }, {\n    key: \"ready\",\n    get: function get() {\n      var _this3 = this;\n      return poll(function () {\n        return _this3._ready().then(function (network) {\n          return network;\n        }, function (error) {\n          // If the network isn't running yet, we will wait\n          if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n            return undefined;\n          }\n          throw error;\n        });\n      });\n    }\n    // @TODO: Remove this and just create a singleton formatter\n  }, {\n    key: \"ccipReadFetch\",\n    value: function ccipReadFetch(tx, calldata, urls) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var sender, data, errorMessages, i, url, href, json, result, errorMessage;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              if (!(this.disableCcipRead || urls.length === 0)) {\n                _context8.next = 2;\n                break;\n              }\n              return _context8.abrupt(\"return\", null);\n            case 2:\n              sender = tx.to.toLowerCase();\n              data = calldata.toLowerCase();\n              errorMessages = [];\n              i = 0;\n            case 6:\n              if (!(i < urls.length)) {\n                _context8.next = 22;\n                break;\n              }\n              url = urls[i]; // URL expansion\n              href = url.replace(\"{sender}\", sender).replace(\"{data}\", data); // If no {data} is present, use POST; otherwise GET\n              json = url.indexOf(\"{data}\") >= 0 ? null : JSON.stringify({\n                data: data,\n                sender: sender\n              });\n              _context8.next = 12;\n              return fetchJson({\n                url: href,\n                errorPassThrough: true\n              }, json, function (value, response) {\n                value.status = response.statusCode;\n                return value;\n              });\n            case 12:\n              result = _context8.sent;\n              if (!result.data) {\n                _context8.next = 15;\n                break;\n              }\n              return _context8.abrupt(\"return\", result.data);\n            case 15:\n              errorMessage = result.message || \"unknown error\"; // 4xx indicates the result is not present; stop\n              if (!(result.status >= 400 && result.status < 500)) {\n                _context8.next = 18;\n                break;\n              }\n              return _context8.abrupt(\"return\", logger.throwError(\"response not found during CCIP fetch: \".concat(errorMessage), Logger.errors.SERVER_ERROR, {\n                url: url,\n                errorMessage: errorMessage\n              }));\n            case 18:\n              // 5xx indicates server issue; try the next url\n              errorMessages.push(errorMessage);\n            case 19:\n              i++;\n              _context8.next = 6;\n              break;\n            case 22:\n              return _context8.abrupt(\"return\", logger.throwError(\"error encountered during CCIP fetch: \".concat(errorMessages.map(function (m) {\n                return JSON.stringify(m);\n              }).join(\", \")), Logger.errors.SERVER_ERROR, {\n                urls: urls,\n                errorMessages: errorMessages\n              }));\n            case 23:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n    }\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n  }, {\n    key: \"_getInternalBlockNumber\",\n    value: function _getInternalBlockNumber(maxAge) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var _this4 = this;\n        var internalBlockNumber, result, reqTime, checkInternalBlockNumber;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return this._ready();\n            case 2:\n              if (!(maxAge > 0)) {\n                _context9.next = 20;\n                break;\n              }\n            case 3:\n              if (!this._internalBlockNumber) {\n                _context9.next = 20;\n                break;\n              }\n              // ...\"remember\" which fetch we started with\n              internalBlockNumber = this._internalBlockNumber;\n              _context9.prev = 5;\n              _context9.next = 8;\n              return internalBlockNumber;\n            case 8:\n              result = _context9.sent;\n              if (!(getTime() - result.respTime <= maxAge)) {\n                _context9.next = 11;\n                break;\n              }\n              return _context9.abrupt(\"return\", result.blockNumber);\n            case 11:\n              return _context9.abrupt(\"break\", 20);\n            case 14:\n              _context9.prev = 14;\n              _context9.t0 = _context9[\"catch\"](5);\n              if (!(this._internalBlockNumber === internalBlockNumber)) {\n                _context9.next = 18;\n                break;\n              }\n              return _context9.abrupt(\"break\", 20);\n            case 18:\n              _context9.next = 3;\n              break;\n            case 20:\n              reqTime = getTime();\n              checkInternalBlockNumber = resolveProperties({\n                blockNumber: this.perform(\"getBlockNumber\", {}),\n                networkError: this.getNetwork().then(function (network) {\n                  return null;\n                }, function (error) {\n                  return error;\n                })\n              }).then(function (_ref) {\n                var blockNumber = _ref.blockNumber,\n                  networkError = _ref.networkError;\n                if (networkError) {\n                  // Unremember this bad internal block number\n                  if (_this4._internalBlockNumber === checkInternalBlockNumber) {\n                    _this4._internalBlockNumber = null;\n                  }\n                  throw networkError;\n                }\n                var respTime = getTime();\n                blockNumber = BigNumber.from(blockNumber).toNumber();\n                if (blockNumber < _this4._maxInternalBlockNumber) {\n                  blockNumber = _this4._maxInternalBlockNumber;\n                }\n                _this4._maxInternalBlockNumber = blockNumber;\n                _this4._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n                return {\n                  blockNumber: blockNumber,\n                  reqTime: reqTime,\n                  respTime: respTime\n                };\n              });\n              this._internalBlockNumber = checkInternalBlockNumber;\n              // Swallow unhandled exceptions; if needed they are handled else where\n              checkInternalBlockNumber.catch(function (error) {\n                // Don't null the dead (rejected) fetch, if it has already been updated\n                if (_this4._internalBlockNumber === checkInternalBlockNumber) {\n                  _this4._internalBlockNumber = null;\n                }\n              });\n              _context9.next = 26;\n              return checkInternalBlockNumber;\n            case 26:\n              return _context9.abrupt(\"return\", _context9.sent.blockNumber);\n            case 27:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this, [[5, 14]]);\n      }));\n    }\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var _this5 = this;\n        var pollId, runners, blockNumber, i;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              pollId = nextPollId++; // Track all running promises, so we can trigger a post-poll once they are complete\n              runners = [];\n              blockNumber = null;\n              _context10.prev = 3;\n              _context10.next = 6;\n              return this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n            case 6:\n              blockNumber = _context10.sent;\n              _context10.next = 13;\n              break;\n            case 9:\n              _context10.prev = 9;\n              _context10.t0 = _context10[\"catch\"](3);\n              this.emit(\"error\", _context10.t0);\n              return _context10.abrupt(\"return\");\n            case 13:\n              this._setFastBlockNumber(blockNumber);\n              // Emit a poll event after we have the latest (fast) block number\n              this.emit(\"poll\", pollId, blockNumber);\n              // If the block has not changed, meh.\n              if (!(blockNumber === this._lastBlockNumber)) {\n                _context10.next = 18;\n                break;\n              }\n              this.emit(\"didPoll\", pollId);\n              return _context10.abrupt(\"return\");\n            case 18:\n              // First polling cycle, trigger a \"block\" events\n              if (this._emitted.block === -2) {\n                this._emitted.block = blockNumber - 1;\n              }\n              if (Math.abs(this._emitted.block - blockNumber) > 1000) {\n                logger.warn(\"network block skew detected; skipping block events (emitted=\".concat(this._emitted.block, \" blockNumber\").concat(blockNumber, \")\"));\n                this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                  blockNumber: blockNumber,\n                  event: \"blockSkew\",\n                  previousBlockNumber: this._emitted.block\n                }));\n                this.emit(\"block\", blockNumber);\n              } else {\n                // Notify all listener for each block that has passed\n                for (i = this._emitted.block + 1; i <= blockNumber; i++) {\n                  this.emit(\"block\", i);\n                }\n              }\n              // The emitted block was updated, check for obsolete events\n              if (this._emitted.block !== blockNumber) {\n                this._emitted.block = blockNumber;\n                Object.keys(this._emitted).forEach(function (key) {\n                  // The block event does not expire\n                  if (key === \"block\") {\n                    return;\n                  }\n                  // The block we were at when we emitted this event\n                  var eventBlockNumber = _this5._emitted[key];\n                  // We cannot garbage collect pending transactions or blocks here\n                  // They should be garbage collected by the Provider when setting\n                  // \"pending\" events\n                  if (eventBlockNumber === \"pending\") {\n                    return;\n                  }\n                  // Evict any transaction hashes or block hashes over 12 blocks\n                  // old, since they should not return null anyways\n                  if (blockNumber - eventBlockNumber > 12) {\n                    delete _this5._emitted[key];\n                  }\n                });\n              }\n              // First polling cycle\n              if (this._lastBlockNumber === -2) {\n                this._lastBlockNumber = blockNumber - 1;\n              }\n              // Find all transaction hashes we are waiting on\n              this._events.forEach(function (event) {\n                switch (event.type) {\n                  case \"tx\":\n                    {\n                      var hash = event.hash;\n                      var runner = _this5.getTransactionReceipt(hash).then(function (receipt) {\n                        if (!receipt || receipt.blockNumber == null) {\n                          return null;\n                        }\n                        _this5._emitted[\"t:\" + hash] = receipt.blockNumber;\n                        _this5.emit(hash, receipt);\n                        return null;\n                      }).catch(function (error) {\n                        _this5.emit(\"error\", error);\n                      });\n                      runners.push(runner);\n                      break;\n                    }\n                  case \"filter\":\n                    {\n                      // We only allow a single getLogs to be in-flight at a time\n                      if (!event._inflight) {\n                        event._inflight = true;\n                        // Filter from the last known event; due to load-balancing\n                        // and some nodes returning updated block numbers before\n                        // indexing events, a logs result with 0 entries cannot be\n                        // trusted and we must retry a range which includes it again\n                        var filter = event.filter;\n                        filter.fromBlock = event._lastBlockNumber + 1;\n                        filter.toBlock = blockNumber;\n                        // Prevent fitler ranges from growing too wild\n                        if (filter.toBlock - _this5._maxFilterBlockRange > filter.fromBlock) {\n                          filter.fromBlock = filter.toBlock - _this5._maxFilterBlockRange;\n                        }\n                        var _runner = _this5.getLogs(filter).then(function (logs) {\n                          // Allow the next getLogs\n                          event._inflight = false;\n                          if (logs.length === 0) {\n                            return;\n                          }\n                          logs.forEach(function (log) {\n                            // Only when we get an event for a given block number\n                            // can we trust the events are indexed\n                            if (log.blockNumber > event._lastBlockNumber) {\n                              event._lastBlockNumber = log.blockNumber;\n                            }\n                            // Make sure we stall requests to fetch blocks and txs\n                            _this5._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                            _this5._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                            _this5.emit(filter, log);\n                          });\n                        }).catch(function (error) {\n                          _this5.emit(\"error\", error);\n                          // Allow another getLogs (the range was not updated)\n                          event._inflight = false;\n                        });\n                        runners.push(_runner);\n                      }\n                      break;\n                    }\n                }\n              });\n              this._lastBlockNumber = blockNumber;\n              // Once all events for this loop have been processed, emit \"didPoll\"\n              Promise.all(runners).then(function () {\n                _this5.emit(\"didPoll\", pollId);\n              }).catch(function (error) {\n                _this5.emit(\"error\", error);\n              });\n              return _context10.abrupt(\"return\");\n            case 26:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this, [[3, 9]]);\n      }));\n    }\n    // Deprecated; do not use this\n  }, {\n    key: \"resetEventsBlock\",\n    value: function resetEventsBlock(blockNumber) {\n      this._lastBlockNumber = blockNumber - 1;\n      if (this.polling) {\n        this.poll();\n      }\n    }\n  }, {\n    key: \"network\",\n    get: function get() {\n      return this._network;\n    }\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n  }, {\n    key: \"detectNetwork\",\n    value: function detectNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              return _context11.abrupt(\"return\", logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"provider.detectNetwork\"\n              }));\n            case 1:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11);\n      }));\n    }\n  }, {\n    key: \"getNetwork\",\n    value: function getNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var network, currentNetwork, error;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return this._ready();\n            case 2:\n              network = _context12.sent;\n              _context12.next = 5;\n              return this.detectNetwork();\n            case 5:\n              currentNetwork = _context12.sent;\n              if (!(network.chainId !== currentNetwork.chainId)) {\n                _context12.next = 23;\n                break;\n              }\n              if (!this.anyNetwork) {\n                _context12.next = 20;\n                break;\n              }\n              this._network = currentNetwork;\n              // Reset all internal block number guards and caches\n              this._lastBlockNumber = -2;\n              this._fastBlockNumber = null;\n              this._fastBlockNumberPromise = null;\n              this._fastQueryDate = 0;\n              this._emitted.block = -2;\n              this._maxInternalBlockNumber = -1024;\n              this._internalBlockNumber = null;\n              // The \"network\" event MUST happen before this method resolves\n              // so any events have a chance to unregister, so we stall an\n              // additional event loop before returning from /this/ call\n              this.emit(\"network\", currentNetwork, network);\n              _context12.next = 19;\n              return stall(0);\n            case 19:\n              return _context12.abrupt(\"return\", this._network);\n            case 20:\n              error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                event: \"changed\",\n                network: network,\n                detectedNetwork: currentNetwork\n              });\n              this.emit(\"error\", error);\n              throw error;\n            case 23:\n              return _context12.abrupt(\"return\", network);\n            case 24:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this);\n      }));\n    }\n  }, {\n    key: \"blockNumber\",\n    get: function get() {\n      var _this6 = this;\n      this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(function (blockNumber) {\n        _this6._setFastBlockNumber(blockNumber);\n      }, function (error) {});\n      return this._fastBlockNumber != null ? this._fastBlockNumber : -1;\n    }\n  }, {\n    key: \"polling\",\n    get: function get() {\n      return this._poller != null;\n    },\n    set: function set(value) {\n      var _this7 = this;\n      if (value && !this._poller) {\n        this._poller = setInterval(function () {\n          _this7.poll();\n        }, this.pollingInterval);\n        if (!this._bootstrapPoll) {\n          this._bootstrapPoll = setTimeout(function () {\n            _this7.poll();\n            // We block additional polls until the polling interval\n            // is done, to prevent overwhelming the poll function\n            _this7._bootstrapPoll = setTimeout(function () {\n              // If polling was disabled, something may require a poke\n              // since starting the bootstrap poll and it was disabled\n              if (!_this7._poller) {\n                _this7.poll();\n              }\n              // Clear out the bootstrap so we can do another\n              _this7._bootstrapPoll = null;\n            }, _this7.pollingInterval);\n          }, 0);\n        }\n      } else if (!value && this._poller) {\n        clearInterval(this._poller);\n        this._poller = null;\n      }\n    }\n  }, {\n    key: \"pollingInterval\",\n    get: function get() {\n      return this._pollingInterval;\n    },\n    set: function set(value) {\n      var _this8 = this;\n      if (typeof value !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n        throw new Error(\"invalid polling interval\");\n      }\n      this._pollingInterval = value;\n      if (this._poller) {\n        clearInterval(this._poller);\n        this._poller = setInterval(function () {\n          _this8.poll();\n        }, this._pollingInterval);\n      }\n    }\n  }, {\n    key: \"_getFastBlockNumber\",\n    value: function _getFastBlockNumber() {\n      var _this9 = this;\n      var now = getTime();\n      // Stale block number, request a newer value\n      if (now - this._fastQueryDate > 2 * this._pollingInterval) {\n        this._fastQueryDate = now;\n        this._fastBlockNumberPromise = this.getBlockNumber().then(function (blockNumber) {\n          if (_this9._fastBlockNumber == null || blockNumber > _this9._fastBlockNumber) {\n            _this9._fastBlockNumber = blockNumber;\n          }\n          return _this9._fastBlockNumber;\n        });\n      }\n      return this._fastBlockNumberPromise;\n    }\n  }, {\n    key: \"_setFastBlockNumber\",\n    value: function _setFastBlockNumber(blockNumber) {\n      // Older block, maybe a stale request\n      if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n        return;\n      }\n      // Update the time we updated the blocknumber\n      this._fastQueryDate = getTime();\n      // Newer block number, use  it\n      if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n        this._fastBlockNumber = blockNumber;\n        this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n      }\n    }\n  }, {\n    key: \"waitForTransaction\",\n    value: function waitForTransaction(transactionHash, confirmations, timeout) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              return _context13.abrupt(\"return\", this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null));\n            case 1:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee13, this);\n      }));\n    }\n  }, {\n    key: \"_waitForTransaction\",\n    value: function _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n        var _this10 = this;\n        var receipt;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.next = 2;\n              return this.getTransactionReceipt(transactionHash);\n            case 2:\n              receipt = _context16.sent;\n              if (!((receipt ? receipt.confirmations : 0) >= confirmations)) {\n                _context16.next = 5;\n                break;\n              }\n              return _context16.abrupt(\"return\", receipt);\n            case 5:\n              return _context16.abrupt(\"return\", new Promise(function (resolve, reject) {\n                var cancelFuncs = [];\n                var done = false;\n                var alreadyDone = function alreadyDone() {\n                  if (done) {\n                    return true;\n                  }\n                  done = true;\n                  cancelFuncs.forEach(function (func) {\n                    func();\n                  });\n                  return false;\n                };\n                var minedHandler = function minedHandler(receipt) {\n                  if (receipt.confirmations < confirmations) {\n                    return;\n                  }\n                  if (alreadyDone()) {\n                    return;\n                  }\n                  resolve(receipt);\n                };\n                _this10.on(transactionHash, minedHandler);\n                cancelFuncs.push(function () {\n                  _this10.removeListener(transactionHash, minedHandler);\n                });\n                if (replaceable) {\n                  var lastBlockNumber = replaceable.startBlock;\n                  var scannedBlock = null;\n                  var replaceHandler = function replaceHandler(blockNumber) {\n                    return __awaiter(_this10, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n                      var _this11 = this;\n                      return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n                        while (1) switch (_context15.prev = _context15.next) {\n                          case 0:\n                            if (!done) {\n                              _context15.next = 2;\n                              break;\n                            }\n                            return _context15.abrupt(\"return\");\n                          case 2:\n                            _context15.next = 4;\n                            return stall(1000);\n                          case 4:\n                            this.getTransactionCount(replaceable.from).then(function (nonce) {\n                              return __awaiter(_this11, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n                                var mined, block, ti, tx, _receipt, reason;\n                                return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n                                  while (1) switch (_context14.prev = _context14.next) {\n                                    case 0:\n                                      if (!done) {\n                                        _context14.next = 2;\n                                        break;\n                                      }\n                                      return _context14.abrupt(\"return\");\n                                    case 2:\n                                      if (!(nonce <= replaceable.nonce)) {\n                                        _context14.next = 6;\n                                        break;\n                                      }\n                                      lastBlockNumber = blockNumber;\n                                      _context14.next = 41;\n                                      break;\n                                    case 6:\n                                      _context14.next = 8;\n                                      return this.getTransaction(transactionHash);\n                                    case 8:\n                                      mined = _context14.sent;\n                                      if (!(mined && mined.blockNumber != null)) {\n                                        _context14.next = 11;\n                                        break;\n                                      }\n                                      return _context14.abrupt(\"return\");\n                                    case 11:\n                                      // First time scanning. We start a little earlier for some\n                                      // wiggle room here to handle the eventually consistent nature\n                                      // of blockchain (e.g. the getTransactionCount was for a\n                                      // different block)\n                                      if (scannedBlock == null) {\n                                        scannedBlock = lastBlockNumber - 3;\n                                        if (scannedBlock < replaceable.startBlock) {\n                                          scannedBlock = replaceable.startBlock;\n                                        }\n                                      }\n                                    case 12:\n                                      if (!(scannedBlock <= blockNumber)) {\n                                        _context14.next = 41;\n                                        break;\n                                      }\n                                      if (!done) {\n                                        _context14.next = 15;\n                                        break;\n                                      }\n                                      return _context14.abrupt(\"return\");\n                                    case 15:\n                                      _context14.next = 17;\n                                      return this.getBlockWithTransactions(scannedBlock);\n                                    case 17:\n                                      block = _context14.sent;\n                                      ti = 0;\n                                    case 19:\n                                      if (!(ti < block.transactions.length)) {\n                                        _context14.next = 38;\n                                        break;\n                                      }\n                                      tx = block.transactions[ti]; // Successfully mined!\n                                      if (!(tx.hash === transactionHash)) {\n                                        _context14.next = 23;\n                                        break;\n                                      }\n                                      return _context14.abrupt(\"return\");\n                                    case 23:\n                                      if (!(tx.from === replaceable.from && tx.nonce === replaceable.nonce)) {\n                                        _context14.next = 35;\n                                        break;\n                                      }\n                                      if (!done) {\n                                        _context14.next = 26;\n                                        break;\n                                      }\n                                      return _context14.abrupt(\"return\");\n                                    case 26:\n                                      _context14.next = 28;\n                                      return this.waitForTransaction(tx.hash, confirmations);\n                                    case 28:\n                                      _receipt = _context14.sent;\n                                      if (!alreadyDone()) {\n                                        _context14.next = 31;\n                                        break;\n                                      }\n                                      return _context14.abrupt(\"return\");\n                                    case 31:\n                                      // The reason we were replaced\n                                      reason = \"replaced\";\n                                      if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                        reason = \"repriced\";\n                                      } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                        reason = \"cancelled\";\n                                      }\n                                      // Explain why we were replaced\n                                      reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                        cancelled: reason === \"replaced\" || reason === \"cancelled\",\n                                        reason: reason,\n                                        replacement: this._wrapTransaction(tx),\n                                        hash: transactionHash,\n                                        receipt: _receipt\n                                      }));\n                                      return _context14.abrupt(\"return\");\n                                    case 35:\n                                      ti++;\n                                      _context14.next = 19;\n                                      break;\n                                    case 38:\n                                      scannedBlock++;\n                                      _context14.next = 12;\n                                      break;\n                                    case 41:\n                                      if (!done) {\n                                        _context14.next = 43;\n                                        break;\n                                      }\n                                      return _context14.abrupt(\"return\");\n                                    case 43:\n                                      this.once(\"block\", replaceHandler);\n                                    case 44:\n                                    case \"end\":\n                                      return _context14.stop();\n                                  }\n                                }, _callee14, this);\n                              }));\n                            }, function (error) {\n                              if (done) {\n                                return;\n                              }\n                              _this11.once(\"block\", replaceHandler);\n                            });\n                          case 5:\n                          case \"end\":\n                            return _context15.stop();\n                        }\n                      }, _callee15, this);\n                    }));\n                  };\n                  if (done) {\n                    return;\n                  }\n                  _this10.once(\"block\", replaceHandler);\n                  cancelFuncs.push(function () {\n                    _this10.removeListener(\"block\", replaceHandler);\n                  });\n                }\n                if (typeof timeout === \"number\" && timeout > 0) {\n                  var timer = setTimeout(function () {\n                    if (alreadyDone()) {\n                      return;\n                    }\n                    reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, {\n                      timeout: timeout\n                    }));\n                  }, timeout);\n                  if (timer.unref) {\n                    timer.unref();\n                  }\n                  cancelFuncs.push(function () {\n                    clearTimeout(timer);\n                  });\n                }\n              }));\n            case 6:\n            case \"end\":\n              return _context16.stop();\n          }\n        }, _callee16, this);\n      }));\n    }\n  }, {\n    key: \"getBlockNumber\",\n    value: function getBlockNumber() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) switch (_context17.prev = _context17.next) {\n            case 0:\n              return _context17.abrupt(\"return\", this._getInternalBlockNumber(0));\n            case 1:\n            case \"end\":\n              return _context17.stop();\n          }\n        }, _callee17, this);\n      }));\n    }\n  }, {\n    key: \"getGasPrice\",\n    value: function getGasPrice() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) switch (_context18.prev = _context18.next) {\n            case 0:\n              _context18.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context18.next = 4;\n              return this.perform(\"getGasPrice\", {});\n            case 4:\n              result = _context18.sent;\n              _context18.prev = 5;\n              return _context18.abrupt(\"return\", BigNumber.from(result));\n            case 9:\n              _context18.prev = 9;\n              _context18.t0 = _context18[\"catch\"](5);\n              return _context18.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getGasPrice\",\n                result: result,\n                error: _context18.t0\n              }));\n            case 12:\n            case \"end\":\n              return _context18.stop();\n          }\n        }, _callee18, this, [[5, 9]]);\n      }));\n    }\n  }, {\n    key: \"getBalance\",\n    value: function getBalance(addressOrName, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) switch (_context19.prev = _context19.next) {\n            case 0:\n              _context19.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context19.next = 4;\n              return resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n              });\n            case 4:\n              params = _context19.sent;\n              _context19.next = 7;\n              return this.perform(\"getBalance\", params);\n            case 7:\n              result = _context19.sent;\n              _context19.prev = 8;\n              return _context19.abrupt(\"return\", BigNumber.from(result));\n            case 12:\n              _context19.prev = 12;\n              _context19.t0 = _context19[\"catch\"](8);\n              return _context19.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getBalance\",\n                params: params,\n                result: result,\n                error: _context19.t0\n              }));\n            case 15:\n            case \"end\":\n              return _context19.stop();\n          }\n        }, _callee19, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"getTransactionCount\",\n    value: function getTransactionCount(addressOrName, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) switch (_context20.prev = _context20.next) {\n            case 0:\n              _context20.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context20.next = 4;\n              return resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n              });\n            case 4:\n              params = _context20.sent;\n              _context20.next = 7;\n              return this.perform(\"getTransactionCount\", params);\n            case 7:\n              result = _context20.sent;\n              _context20.prev = 8;\n              return _context20.abrupt(\"return\", BigNumber.from(result).toNumber());\n            case 12:\n              _context20.prev = 12;\n              _context20.t0 = _context20[\"catch\"](8);\n              return _context20.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getTransactionCount\",\n                params: params,\n                result: result,\n                error: _context20.t0\n              }));\n            case 15:\n            case \"end\":\n              return _context20.stop();\n          }\n        }, _callee20, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"getCode\",\n    value: function getCode(addressOrName, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) switch (_context21.prev = _context21.next) {\n            case 0:\n              _context21.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context21.next = 4;\n              return resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n              });\n            case 4:\n              params = _context21.sent;\n              _context21.next = 7;\n              return this.perform(\"getCode\", params);\n            case 7:\n              result = _context21.sent;\n              _context21.prev = 8;\n              return _context21.abrupt(\"return\", hexlify(result));\n            case 12:\n              _context21.prev = 12;\n              _context21.t0 = _context21[\"catch\"](8);\n              return _context21.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getCode\",\n                params: params,\n                result: result,\n                error: _context21.t0\n              }));\n            case 15:\n            case \"end\":\n              return _context21.stop();\n          }\n        }, _callee21, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"getStorageAt\",\n    value: function getStorageAt(addressOrName, position, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n          while (1) switch (_context22.prev = _context22.next) {\n            case 0:\n              _context22.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context22.next = 4;\n              return resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag),\n                position: Promise.resolve(position).then(function (p) {\n                  return hexValue(p);\n                })\n              });\n            case 4:\n              params = _context22.sent;\n              _context22.next = 7;\n              return this.perform(\"getStorageAt\", params);\n            case 7:\n              result = _context22.sent;\n              _context22.prev = 8;\n              return _context22.abrupt(\"return\", hexlify(result));\n            case 12:\n              _context22.prev = 12;\n              _context22.t0 = _context22[\"catch\"](8);\n              return _context22.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getStorageAt\",\n                params: params,\n                result: result,\n                error: _context22.t0\n              }));\n            case 15:\n            case \"end\":\n              return _context22.stop();\n          }\n        }, _callee22, this, [[8, 12]]);\n      }));\n    }\n    // This should be called by any subclass wrapping a TransactionResponse\n  }, {\n    key: \"_wrapTransaction\",\n    value: function _wrapTransaction(tx, hash, startBlock) {\n      var _this12 = this;\n      if (hash != null && hexDataLength(hash) !== 32) {\n        throw new Error(\"invalid response - sendTransaction\");\n      }\n      var result = tx;\n      // Check the hash we expect is the same as the hash the server reported\n      if (hash != null && tx.hash !== hash) {\n        logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, {\n          expectedHash: tx.hash,\n          returnedHash: hash\n        });\n      }\n      result.wait = function (confirms, timeout) {\n        return __awaiter(_this12, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {\n          var replacement, receipt;\n          return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n            while (1) switch (_context23.prev = _context23.next) {\n              case 0:\n                if (confirms == null) {\n                  confirms = 1;\n                }\n                if (timeout == null) {\n                  timeout = 0;\n                }\n                // Get the details to detect replacement\n                replacement = undefined;\n                if (confirms !== 0 && startBlock != null) {\n                  replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock: startBlock\n                  };\n                }\n                _context23.next = 6;\n                return this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n              case 6:\n                receipt = _context23.sent;\n                if (!(receipt == null && confirms === 0)) {\n                  _context23.next = 9;\n                  break;\n                }\n                return _context23.abrupt(\"return\", null);\n              case 9:\n                // No longer pending, allow the polling loop to garbage collect this\n                this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n                if (receipt.status === 0) {\n                  logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                  });\n                }\n                return _context23.abrupt(\"return\", receipt);\n              case 12:\n              case \"end\":\n                return _context23.stop();\n            }\n          }, _callee23, this);\n        }));\n      };\n      return result;\n    }\n  }, {\n    key: \"sendTransaction\",\n    value: function sendTransaction(signedTransaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {\n        var hexTx, tx, blockNumber, hash;\n        return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n          while (1) switch (_context24.prev = _context24.next) {\n            case 0:\n              _context24.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context24.next = 4;\n              return Promise.resolve(signedTransaction).then(function (t) {\n                return hexlify(t);\n              });\n            case 4:\n              hexTx = _context24.sent;\n              tx = this.formatter.transaction(signedTransaction);\n              if (tx.confirmations == null) {\n                tx.confirmations = 0;\n              }\n              _context24.next = 9;\n              return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            case 9:\n              blockNumber = _context24.sent;\n              _context24.prev = 10;\n              _context24.next = 13;\n              return this.perform(\"sendTransaction\", {\n                signedTransaction: hexTx\n              });\n            case 13:\n              hash = _context24.sent;\n              return _context24.abrupt(\"return\", this._wrapTransaction(tx, hash, blockNumber));\n            case 17:\n              _context24.prev = 17;\n              _context24.t0 = _context24[\"catch\"](10);\n              _context24.t0.transaction = tx;\n              _context24.t0.transactionHash = tx.hash;\n              throw _context24.t0;\n            case 22:\n            case \"end\":\n              return _context24.stop();\n          }\n        }, _callee24, this, [[10, 17]]);\n      }));\n    }\n  }, {\n    key: \"_getTransactionRequest\",\n    value: function _getTransactionRequest(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee25() {\n        var _this13 = this;\n        var values, tx;\n        return _regeneratorRuntime().wrap(function _callee25$(_context25) {\n          while (1) switch (_context25.prev = _context25.next) {\n            case 0:\n              _context25.next = 2;\n              return transaction;\n            case 2:\n              values = _context25.sent;\n              tx = {};\n              [\"from\", \"to\"].forEach(function (key) {\n                if (values[key] == null) {\n                  return;\n                }\n                tx[key] = Promise.resolve(values[key]).then(function (v) {\n                  return v ? _this13._getAddress(v) : null;\n                });\n              });\n              [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach(function (key) {\n                if (values[key] == null) {\n                  return;\n                }\n                tx[key] = Promise.resolve(values[key]).then(function (v) {\n                  return v ? BigNumber.from(v) : null;\n                });\n              });\n              [\"type\"].forEach(function (key) {\n                if (values[key] == null) {\n                  return;\n                }\n                tx[key] = Promise.resolve(values[key]).then(function (v) {\n                  return v != null ? v : null;\n                });\n              });\n              if (values.accessList) {\n                tx.accessList = this.formatter.accessList(values.accessList);\n              }\n              [\"data\"].forEach(function (key) {\n                if (values[key] == null) {\n                  return;\n                }\n                tx[key] = Promise.resolve(values[key]).then(function (v) {\n                  return v ? hexlify(v) : null;\n                });\n              });\n              _context25.t0 = this.formatter;\n              _context25.next = 12;\n              return resolveProperties(tx);\n            case 12:\n              _context25.t1 = _context25.sent;\n              return _context25.abrupt(\"return\", _context25.t0.transactionRequest.call(_context25.t0, _context25.t1));\n            case 14:\n            case \"end\":\n              return _context25.stop();\n          }\n        }, _callee25, this);\n      }));\n    }\n  }, {\n    key: \"_getFilter\",\n    value: function _getFilter(filter) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee26() {\n        var _this14 = this;\n        var result;\n        return _regeneratorRuntime().wrap(function _callee26$(_context26) {\n          while (1) switch (_context26.prev = _context26.next) {\n            case 0:\n              _context26.next = 2;\n              return filter;\n            case 2:\n              filter = _context26.sent;\n              result = {};\n              if (filter.address != null) {\n                result.address = this._getAddress(filter.address);\n              }\n              [\"blockHash\", \"topics\"].forEach(function (key) {\n                if (filter[key] == null) {\n                  return;\n                }\n                result[key] = filter[key];\n              });\n              [\"fromBlock\", \"toBlock\"].forEach(function (key) {\n                if (filter[key] == null) {\n                  return;\n                }\n                result[key] = _this14._getBlockTag(filter[key]);\n              });\n              _context26.t0 = this.formatter;\n              _context26.next = 10;\n              return resolveProperties(result);\n            case 10:\n              _context26.t1 = _context26.sent;\n              return _context26.abrupt(\"return\", _context26.t0.filter.call(_context26.t0, _context26.t1));\n            case 12:\n            case \"end\":\n              return _context26.stop();\n          }\n        }, _callee26, this);\n      }));\n    }\n  }, {\n    key: \"_call\",\n    value: function _call(transaction, blockTag, attempt) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee27() {\n        var txSender, result, data, sender, urls, urlsOffset, urlsLength, urlsData, u, url, calldata, callbackSelector, extraData, ccipResult, tx;\n        return _regeneratorRuntime().wrap(function _callee27$(_context27) {\n          while (1) switch (_context27.prev = _context27.next) {\n            case 0:\n              if (attempt >= MAX_CCIP_REDIRECTS) {\n                logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n                  redirects: attempt,\n                  transaction: transaction\n                });\n              }\n              txSender = transaction.to;\n              _context27.next = 4;\n              return this.perform(\"call\", {\n                transaction: transaction,\n                blockTag: blockTag\n              });\n            case 4:\n              result = _context27.sent;\n              if (!(attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && hexDataLength(result) % 32 === 4)) {\n                _context27.next = 31;\n                break;\n              }\n              _context27.prev = 6;\n              data = hexDataSlice(result, 4); // Check the sender of the OffchainLookup matches the transaction\n              sender = hexDataSlice(data, 0, 32);\n              if (!BigNumber.from(sender).eq(txSender)) {\n                logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                  name: \"OffchainLookup\",\n                  signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                  transaction: transaction,\n                  data: result\n                });\n              }\n              // Read the URLs from the response\n              urls = [];\n              urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n              urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n              urlsData = hexDataSlice(data, urlsOffset + 32);\n              for (u = 0; u < urlsLength; u++) {\n                url = _parseString(urlsData, u * 32);\n                if (url == null) {\n                  logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                    name: \"OffchainLookup\",\n                    signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                    transaction: transaction,\n                    data: result\n                  });\n                }\n                urls.push(url);\n              }\n              // Get the CCIP calldata to forward\n              calldata = _parseBytes(data, 64); // Get the callbackSelector (bytes4)\n              if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                  name: \"OffchainLookup\",\n                  signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                  transaction: transaction,\n                  data: result\n                });\n              }\n              callbackSelector = hexDataSlice(data, 96, 100); // Get the extra data to send back to the contract as context\n              extraData = _parseBytes(data, 128);\n              _context27.next = 21;\n              return this.ccipReadFetch(transaction, calldata, urls);\n            case 21:\n              ccipResult = _context27.sent;\n              if (ccipResult == null) {\n                logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                  name: \"OffchainLookup\",\n                  signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                  transaction: transaction,\n                  data: result\n                });\n              }\n              tx = {\n                to: txSender,\n                data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])\n              };\n              return _context27.abrupt(\"return\", this._call(tx, blockTag, attempt + 1));\n            case 27:\n              _context27.prev = 27;\n              _context27.t0 = _context27[\"catch\"](6);\n              if (!(_context27.t0.code === Logger.errors.SERVER_ERROR)) {\n                _context27.next = 31;\n                break;\n              }\n              throw _context27.t0;\n            case 31:\n              _context27.prev = 31;\n              return _context27.abrupt(\"return\", hexlify(result));\n            case 35:\n              _context27.prev = 35;\n              _context27.t1 = _context27[\"catch\"](31);\n              return _context27.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"call\",\n                params: {\n                  transaction: transaction,\n                  blockTag: blockTag\n                },\n                result: result,\n                error: _context27.t1\n              }));\n            case 38:\n            case \"end\":\n              return _context27.stop();\n          }\n        }, _callee27, this, [[6, 27], [31, 35]]);\n      }));\n    }\n  }, {\n    key: \"call\",\n    value: function call(transaction, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee28() {\n        var resolved;\n        return _regeneratorRuntime().wrap(function _callee28$(_context28) {\n          while (1) switch (_context28.prev = _context28.next) {\n            case 0:\n              _context28.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context28.next = 4;\n              return resolveProperties({\n                transaction: this._getTransactionRequest(transaction),\n                blockTag: this._getBlockTag(blockTag),\n                ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n              });\n            case 4:\n              resolved = _context28.sent;\n              return _context28.abrupt(\"return\", this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1));\n            case 6:\n            case \"end\":\n              return _context28.stop();\n          }\n        }, _callee28, this);\n      }));\n    }\n  }, {\n    key: \"estimateGas\",\n    value: function estimateGas(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee29() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee29$(_context29) {\n          while (1) switch (_context29.prev = _context29.next) {\n            case 0:\n              _context29.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context29.next = 4;\n              return resolveProperties({\n                transaction: this._getTransactionRequest(transaction)\n              });\n            case 4:\n              params = _context29.sent;\n              _context29.next = 7;\n              return this.perform(\"estimateGas\", params);\n            case 7:\n              result = _context29.sent;\n              _context29.prev = 8;\n              return _context29.abrupt(\"return\", BigNumber.from(result));\n            case 12:\n              _context29.prev = 12;\n              _context29.t0 = _context29[\"catch\"](8);\n              return _context29.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"estimateGas\",\n                params: params,\n                result: result,\n                error: _context29.t0\n              }));\n            case 15:\n            case \"end\":\n              return _context29.stop();\n          }\n        }, _callee29, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"_getAddress\",\n    value: function _getAddress(addressOrName) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee30() {\n        var address;\n        return _regeneratorRuntime().wrap(function _callee30$(_context30) {\n          while (1) switch (_context30.prev = _context30.next) {\n            case 0:\n              _context30.next = 2;\n              return addressOrName;\n            case 2:\n              addressOrName = _context30.sent;\n              if (typeof addressOrName !== \"string\") {\n                logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n              }\n              _context30.next = 6;\n              return this.resolveName(addressOrName);\n            case 6:\n              address = _context30.sent;\n              if (address == null) {\n                logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"resolveName(\".concat(JSON.stringify(addressOrName), \")\")\n                });\n              }\n              return _context30.abrupt(\"return\", address);\n            case 9:\n            case \"end\":\n              return _context30.stop();\n          }\n        }, _callee30, this);\n      }));\n    }\n  }, {\n    key: \"_getBlock\",\n    value: function _getBlock(blockHashOrBlockTag, includeTransactions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee32() {\n        var _this15 = this;\n        var blockNumber, params;\n        return _regeneratorRuntime().wrap(function _callee32$(_context32) {\n          while (1) switch (_context32.prev = _context32.next) {\n            case 0:\n              _context32.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context32.next = 4;\n              return blockHashOrBlockTag;\n            case 4:\n              blockHashOrBlockTag = _context32.sent;\n              // If blockTag is a number (not \"latest\", etc), this is the block number\n              blockNumber = -128;\n              params = {\n                includeTransactions: !!includeTransactions\n              };\n              if (!isHexString(blockHashOrBlockTag, 32)) {\n                _context32.next = 11;\n                break;\n              }\n              params.blockHash = blockHashOrBlockTag;\n              _context32.next = 21;\n              break;\n            case 11:\n              _context32.prev = 11;\n              _context32.next = 14;\n              return this._getBlockTag(blockHashOrBlockTag);\n            case 14:\n              params.blockTag = _context32.sent;\n              if (isHexString(params.blockTag)) {\n                blockNumber = parseInt(params.blockTag.substring(2), 16);\n              }\n              _context32.next = 21;\n              break;\n            case 18:\n              _context32.prev = 18;\n              _context32.t0 = _context32[\"catch\"](11);\n              logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n            case 21:\n              return _context32.abrupt(\"return\", poll(function () {\n                return __awaiter(_this15, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {\n                  var _this16 = this;\n                  var block, _blockNumber, i, tx, confirmations, blockWithTxs;\n                  return _regeneratorRuntime().wrap(function _callee31$(_context31) {\n                    while (1) switch (_context31.prev = _context31.next) {\n                      case 0:\n                        _context31.next = 2;\n                        return this.perform(\"getBlock\", params);\n                      case 2:\n                        block = _context31.sent;\n                        if (!(block == null)) {\n                          _context31.next = 11;\n                          break;\n                        }\n                        if (!(params.blockHash != null)) {\n                          _context31.next = 7;\n                          break;\n                        }\n                        if (!(this._emitted[\"b:\" + params.blockHash] == null)) {\n                          _context31.next = 7;\n                          break;\n                        }\n                        return _context31.abrupt(\"return\", null);\n                      case 7:\n                        if (!(params.blockTag != null)) {\n                          _context31.next = 10;\n                          break;\n                        }\n                        if (!(blockNumber > this._emitted.block)) {\n                          _context31.next = 10;\n                          break;\n                        }\n                        return _context31.abrupt(\"return\", null);\n                      case 10:\n                        return _context31.abrupt(\"return\", undefined);\n                      case 11:\n                        if (!includeTransactions) {\n                          _context31.next = 34;\n                          break;\n                        }\n                        _blockNumber = null;\n                        i = 0;\n                      case 14:\n                        if (!(i < block.transactions.length)) {\n                          _context31.next = 31;\n                          break;\n                        }\n                        tx = block.transactions[i];\n                        if (!(tx.blockNumber == null)) {\n                          _context31.next = 20;\n                          break;\n                        }\n                        tx.confirmations = 0;\n                        _context31.next = 28;\n                        break;\n                      case 20:\n                        if (!(tx.confirmations == null)) {\n                          _context31.next = 28;\n                          break;\n                        }\n                        if (!(_blockNumber == null)) {\n                          _context31.next = 25;\n                          break;\n                        }\n                        _context31.next = 24;\n                        return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                      case 24:\n                        _blockNumber = _context31.sent;\n                      case 25:\n                        // Add the confirmations using the fast block number (pessimistic)\n                        confirmations = _blockNumber - tx.blockNumber + 1;\n                        if (confirmations <= 0) {\n                          confirmations = 1;\n                        }\n                        tx.confirmations = confirmations;\n                      case 28:\n                        i++;\n                        _context31.next = 14;\n                        break;\n                      case 31:\n                        blockWithTxs = this.formatter.blockWithTransactions(block);\n                        blockWithTxs.transactions = blockWithTxs.transactions.map(function (tx) {\n                          return _this16._wrapTransaction(tx);\n                        });\n                        return _context31.abrupt(\"return\", blockWithTxs);\n                      case 34:\n                        return _context31.abrupt(\"return\", this.formatter.block(block));\n                      case 35:\n                      case \"end\":\n                        return _context31.stop();\n                    }\n                  }, _callee31, this);\n                }));\n              }, {\n                oncePoll: this\n              }));\n            case 22:\n            case \"end\":\n              return _context32.stop();\n          }\n        }, _callee32, this, [[11, 18]]);\n      }));\n    }\n  }, {\n    key: \"getBlock\",\n    value: function getBlock(blockHashOrBlockTag) {\n      return this._getBlock(blockHashOrBlockTag, false);\n    }\n  }, {\n    key: \"getBlockWithTransactions\",\n    value: function getBlockWithTransactions(blockHashOrBlockTag) {\n      return this._getBlock(blockHashOrBlockTag, true);\n    }\n  }, {\n    key: \"getTransaction\",\n    value: function getTransaction(transactionHash) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee34() {\n        var _this17 = this;\n        var params;\n        return _regeneratorRuntime().wrap(function _callee34$(_context34) {\n          while (1) switch (_context34.prev = _context34.next) {\n            case 0:\n              _context34.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context34.next = 4;\n              return transactionHash;\n            case 4:\n              transactionHash = _context34.sent;\n              params = {\n                transactionHash: this.formatter.hash(transactionHash, true)\n              };\n              return _context34.abrupt(\"return\", poll(function () {\n                return __awaiter(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee33() {\n                  var result, tx, blockNumber, confirmations;\n                  return _regeneratorRuntime().wrap(function _callee33$(_context33) {\n                    while (1) switch (_context33.prev = _context33.next) {\n                      case 0:\n                        _context33.next = 2;\n                        return this.perform(\"getTransaction\", params);\n                      case 2:\n                        result = _context33.sent;\n                        if (!(result == null)) {\n                          _context33.next = 7;\n                          break;\n                        }\n                        if (!(this._emitted[\"t:\" + transactionHash] == null)) {\n                          _context33.next = 6;\n                          break;\n                        }\n                        return _context33.abrupt(\"return\", null);\n                      case 6:\n                        return _context33.abrupt(\"return\", undefined);\n                      case 7:\n                        tx = this.formatter.transactionResponse(result);\n                        if (!(tx.blockNumber == null)) {\n                          _context33.next = 12;\n                          break;\n                        }\n                        tx.confirmations = 0;\n                        _context33.next = 19;\n                        break;\n                      case 12:\n                        if (!(tx.confirmations == null)) {\n                          _context33.next = 19;\n                          break;\n                        }\n                        _context33.next = 15;\n                        return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                      case 15:\n                        blockNumber = _context33.sent;\n                        // Add the confirmations using the fast block number (pessimistic)\n                        confirmations = blockNumber - tx.blockNumber + 1;\n                        if (confirmations <= 0) {\n                          confirmations = 1;\n                        }\n                        tx.confirmations = confirmations;\n                      case 19:\n                        return _context33.abrupt(\"return\", this._wrapTransaction(tx));\n                      case 20:\n                      case \"end\":\n                        return _context33.stop();\n                    }\n                  }, _callee33, this);\n                }));\n              }, {\n                oncePoll: this\n              }));\n            case 7:\n            case \"end\":\n              return _context34.stop();\n          }\n        }, _callee34, this);\n      }));\n    }\n  }, {\n    key: \"getTransactionReceipt\",\n    value: function getTransactionReceipt(transactionHash) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee36() {\n        var _this18 = this;\n        var params;\n        return _regeneratorRuntime().wrap(function _callee36$(_context36) {\n          while (1) switch (_context36.prev = _context36.next) {\n            case 0:\n              _context36.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context36.next = 4;\n              return transactionHash;\n            case 4:\n              transactionHash = _context36.sent;\n              params = {\n                transactionHash: this.formatter.hash(transactionHash, true)\n              };\n              return _context36.abrupt(\"return\", poll(function () {\n                return __awaiter(_this18, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee35() {\n                  var result, receipt, blockNumber, confirmations;\n                  return _regeneratorRuntime().wrap(function _callee35$(_context35) {\n                    while (1) switch (_context35.prev = _context35.next) {\n                      case 0:\n                        _context35.next = 2;\n                        return this.perform(\"getTransactionReceipt\", params);\n                      case 2:\n                        result = _context35.sent;\n                        if (!(result == null)) {\n                          _context35.next = 7;\n                          break;\n                        }\n                        if (!(this._emitted[\"t:\" + transactionHash] == null)) {\n                          _context35.next = 6;\n                          break;\n                        }\n                        return _context35.abrupt(\"return\", null);\n                      case 6:\n                        return _context35.abrupt(\"return\", undefined);\n                      case 7:\n                        if (!(result.blockHash == null)) {\n                          _context35.next = 9;\n                          break;\n                        }\n                        return _context35.abrupt(\"return\", undefined);\n                      case 9:\n                        receipt = this.formatter.receipt(result);\n                        if (!(receipt.blockNumber == null)) {\n                          _context35.next = 14;\n                          break;\n                        }\n                        receipt.confirmations = 0;\n                        _context35.next = 21;\n                        break;\n                      case 14:\n                        if (!(receipt.confirmations == null)) {\n                          _context35.next = 21;\n                          break;\n                        }\n                        _context35.next = 17;\n                        return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                      case 17:\n                        blockNumber = _context35.sent;\n                        // Add the confirmations using the fast block number (pessimistic)\n                        confirmations = blockNumber - receipt.blockNumber + 1;\n                        if (confirmations <= 0) {\n                          confirmations = 1;\n                        }\n                        receipt.confirmations = confirmations;\n                      case 21:\n                        return _context35.abrupt(\"return\", receipt);\n                      case 22:\n                      case \"end\":\n                        return _context35.stop();\n                    }\n                  }, _callee35, this);\n                }));\n              }, {\n                oncePoll: this\n              }));\n            case 7:\n            case \"end\":\n              return _context36.stop();\n          }\n        }, _callee36, this);\n      }));\n    }\n  }, {\n    key: \"getLogs\",\n    value: function getLogs(filter) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee37() {\n        var params, logs;\n        return _regeneratorRuntime().wrap(function _callee37$(_context37) {\n          while (1) switch (_context37.prev = _context37.next) {\n            case 0:\n              _context37.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context37.next = 4;\n              return resolveProperties({\n                filter: this._getFilter(filter)\n              });\n            case 4:\n              params = _context37.sent;\n              _context37.next = 7;\n              return this.perform(\"getLogs\", params);\n            case 7:\n              logs = _context37.sent;\n              logs.forEach(function (log) {\n                if (log.removed == null) {\n                  log.removed = false;\n                }\n              });\n              return _context37.abrupt(\"return\", Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs));\n            case 10:\n            case \"end\":\n              return _context37.stop();\n          }\n        }, _callee37, this);\n      }));\n    }\n  }, {\n    key: \"getEtherPrice\",\n    value: function getEtherPrice() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee38() {\n        return _regeneratorRuntime().wrap(function _callee38$(_context38) {\n          while (1) switch (_context38.prev = _context38.next) {\n            case 0:\n              _context38.next = 2;\n              return this.getNetwork();\n            case 2:\n              return _context38.abrupt(\"return\", this.perform(\"getEtherPrice\", {}));\n            case 3:\n            case \"end\":\n              return _context38.stop();\n          }\n        }, _callee38, this);\n      }));\n    }\n  }, {\n    key: \"_getBlockTag\",\n    value: function _getBlockTag(blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee39() {\n        var blockNumber;\n        return _regeneratorRuntime().wrap(function _callee39$(_context39) {\n          while (1) switch (_context39.prev = _context39.next) {\n            case 0:\n              _context39.next = 2;\n              return blockTag;\n            case 2:\n              blockTag = _context39.sent;\n              if (!(typeof blockTag === \"number\" && blockTag < 0)) {\n                _context39.next = 11;\n                break;\n              }\n              if (blockTag % 1) {\n                logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n              }\n              _context39.next = 7;\n              return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            case 7:\n              blockNumber = _context39.sent;\n              blockNumber += blockTag;\n              if (blockNumber < 0) {\n                blockNumber = 0;\n              }\n              return _context39.abrupt(\"return\", this.formatter.blockTag(blockNumber));\n            case 11:\n              return _context39.abrupt(\"return\", this.formatter.blockTag(blockTag));\n            case 12:\n            case \"end\":\n              return _context39.stop();\n          }\n        }, _callee39, this);\n      }));\n    }\n  }, {\n    key: \"getResolver\",\n    value: function getResolver(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee40() {\n        var currentName, addr, resolver;\n        return _regeneratorRuntime().wrap(function _callee40$(_context40) {\n          while (1) switch (_context40.prev = _context40.next) {\n            case 0:\n              currentName = name;\n            case 1:\n              if (!true) {\n                _context40.next = 22;\n                break;\n              }\n              if (!(currentName === \"\" || currentName === \".\")) {\n                _context40.next = 4;\n                break;\n              }\n              return _context40.abrupt(\"return\", null);\n            case 4:\n              if (!(name !== \"eth\" && currentName === \"eth\")) {\n                _context40.next = 6;\n                break;\n              }\n              return _context40.abrupt(\"return\", null);\n            case 6:\n              _context40.next = 8;\n              return this._getResolver(currentName, \"getResolver\");\n            case 8:\n              addr = _context40.sent;\n              if (!(addr != null)) {\n                _context40.next = 19;\n                break;\n              }\n              resolver = new Resolver(this, addr, name); // Legacy resolver found, using EIP-2544 so it isn't safe to use\n              _context40.t0 = currentName !== name;\n              if (!_context40.t0) {\n                _context40.next = 16;\n                break;\n              }\n              _context40.next = 15;\n              return resolver.supportsWildcard();\n            case 15:\n              _context40.t0 = !_context40.sent;\n            case 16:\n              if (!_context40.t0) {\n                _context40.next = 18;\n                break;\n              }\n              return _context40.abrupt(\"return\", null);\n            case 18:\n              return _context40.abrupt(\"return\", resolver);\n            case 19:\n              // Get the parent node\n              currentName = currentName.split(\".\").slice(1).join(\".\");\n              _context40.next = 1;\n              break;\n            case 22:\n            case \"end\":\n              return _context40.stop();\n          }\n        }, _callee40, this);\n      }));\n    }\n  }, {\n    key: \"_getResolver\",\n    value: function _getResolver(name, operation) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee41() {\n        var network, addrData;\n        return _regeneratorRuntime().wrap(function _callee41$(_context41) {\n          while (1) switch (_context41.prev = _context41.next) {\n            case 0:\n              if (operation == null) {\n                operation = \"ENS\";\n              }\n              _context41.next = 3;\n              return this.getNetwork();\n            case 3:\n              network = _context41.sent;\n              // No ENS...\n              if (!network.ensAddress) {\n                logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: operation,\n                  network: network.name\n                });\n              }\n              _context41.prev = 5;\n              _context41.next = 8;\n              return this.call({\n                to: network.ensAddress,\n                data: \"0x0178b8bf\" + namehash(name).substring(2)\n              });\n            case 8:\n              addrData = _context41.sent;\n              return _context41.abrupt(\"return\", this.formatter.callAddress(addrData));\n            case 12:\n              _context41.prev = 12;\n              _context41.t0 = _context41[\"catch\"](5);\n            case 14:\n              return _context41.abrupt(\"return\", null);\n            case 15:\n            case \"end\":\n              return _context41.stop();\n          }\n        }, _callee41, this, [[5, 12]]);\n      }));\n    }\n  }, {\n    key: \"resolveName\",\n    value: function resolveName(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee42() {\n        var resolver;\n        return _regeneratorRuntime().wrap(function _callee42$(_context42) {\n          while (1) switch (_context42.prev = _context42.next) {\n            case 0:\n              _context42.next = 2;\n              return name;\n            case 2:\n              name = _context42.sent;\n              _context42.prev = 3;\n              return _context42.abrupt(\"return\", Promise.resolve(this.formatter.address(name)));\n            case 7:\n              _context42.prev = 7;\n              _context42.t0 = _context42[\"catch\"](3);\n              if (!isHexString(name)) {\n                _context42.next = 11;\n                break;\n              }\n              throw _context42.t0;\n            case 11:\n              if (typeof name !== \"string\") {\n                logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n              }\n              // Get the addr from the resolver\n              _context42.next = 14;\n              return this.getResolver(name);\n            case 14:\n              resolver = _context42.sent;\n              if (resolver) {\n                _context42.next = 17;\n                break;\n              }\n              return _context42.abrupt(\"return\", null);\n            case 17:\n              _context42.next = 19;\n              return resolver.getAddress();\n            case 19:\n              return _context42.abrupt(\"return\", _context42.sent);\n            case 20:\n            case \"end\":\n              return _context42.stop();\n          }\n        }, _callee42, this, [[3, 7]]);\n      }));\n    }\n  }, {\n    key: \"lookupAddress\",\n    value: function lookupAddress(address) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee43() {\n        var node, resolverAddr, name, addr;\n        return _regeneratorRuntime().wrap(function _callee43$(_context43) {\n          while (1) switch (_context43.prev = _context43.next) {\n            case 0:\n              _context43.next = 2;\n              return address;\n            case 2:\n              address = _context43.sent;\n              address = this.formatter.address(address);\n              node = address.substring(2).toLowerCase() + \".addr.reverse\";\n              _context43.next = 7;\n              return this._getResolver(node, \"lookupAddress\");\n            case 7:\n              resolverAddr = _context43.sent;\n              if (!(resolverAddr == null)) {\n                _context43.next = 10;\n                break;\n              }\n              return _context43.abrupt(\"return\", null);\n            case 10:\n              _context43.t0 = _parseString;\n              _context43.next = 13;\n              return this.call({\n                to: resolverAddr,\n                data: \"0x691f3431\" + namehash(node).substring(2)\n              });\n            case 13:\n              _context43.t1 = _context43.sent;\n              name = (0, _context43.t0)(_context43.t1, 0);\n              _context43.next = 17;\n              return this.resolveName(name);\n            case 17:\n              addr = _context43.sent;\n              if (!(addr != address)) {\n                _context43.next = 20;\n                break;\n              }\n              return _context43.abrupt(\"return\", null);\n            case 20:\n              return _context43.abrupt(\"return\", name);\n            case 21:\n            case \"end\":\n              return _context43.stop();\n          }\n        }, _callee43, this);\n      }));\n    }\n  }, {\n    key: \"getAvatar\",\n    value: function getAvatar(nameOrAddress) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee44() {\n        var resolver, address, node, resolverAddress, _avatar, name, avatar;\n        return _regeneratorRuntime().wrap(function _callee44$(_context44) {\n          while (1) switch (_context44.prev = _context44.next) {\n            case 0:\n              resolver = null;\n              if (!isHexString(nameOrAddress)) {\n                _context44.next = 40;\n                break;\n              }\n              // Address; reverse lookup\n              address = this.formatter.address(nameOrAddress);\n              node = address.substring(2).toLowerCase() + \".addr.reverse\";\n              _context44.next = 6;\n              return this._getResolver(node, \"getAvatar\");\n            case 6:\n              resolverAddress = _context44.sent;\n              if (resolverAddress) {\n                _context44.next = 9;\n                break;\n              }\n              return _context44.abrupt(\"return\", null);\n            case 9:\n              // Try resolving the avatar against the addr.reverse resolver\n              resolver = new Resolver(this, resolverAddress, node);\n              _context44.prev = 10;\n              _context44.next = 13;\n              return resolver.getAvatar();\n            case 13:\n              _avatar = _context44.sent;\n              if (!_avatar) {\n                _context44.next = 16;\n                break;\n              }\n              return _context44.abrupt(\"return\", _avatar.url);\n            case 16:\n              _context44.next = 22;\n              break;\n            case 18:\n              _context44.prev = 18;\n              _context44.t0 = _context44[\"catch\"](10);\n              if (!(_context44.t0.code !== Logger.errors.CALL_EXCEPTION)) {\n                _context44.next = 22;\n                break;\n              }\n              throw _context44.t0;\n            case 22:\n              _context44.prev = 22;\n              _context44.t1 = _parseString;\n              _context44.next = 26;\n              return this.call({\n                to: resolverAddress,\n                data: \"0x691f3431\" + namehash(node).substring(2)\n              });\n            case 26:\n              _context44.t2 = _context44.sent;\n              name = (0, _context44.t1)(_context44.t2, 0);\n              _context44.next = 30;\n              return this.getResolver(name);\n            case 30:\n              resolver = _context44.sent;\n              _context44.next = 38;\n              break;\n            case 33:\n              _context44.prev = 33;\n              _context44.t3 = _context44[\"catch\"](22);\n              if (!(_context44.t3.code !== Logger.errors.CALL_EXCEPTION)) {\n                _context44.next = 37;\n                break;\n              }\n              throw _context44.t3;\n            case 37:\n              return _context44.abrupt(\"return\", null);\n            case 38:\n              _context44.next = 45;\n              break;\n            case 40:\n              _context44.next = 42;\n              return this.getResolver(nameOrAddress);\n            case 42:\n              resolver = _context44.sent;\n              if (resolver) {\n                _context44.next = 45;\n                break;\n              }\n              return _context44.abrupt(\"return\", null);\n            case 45:\n              _context44.next = 47;\n              return resolver.getAvatar();\n            case 47:\n              avatar = _context44.sent;\n              if (!(avatar == null)) {\n                _context44.next = 50;\n                break;\n              }\n              return _context44.abrupt(\"return\", null);\n            case 50:\n              return _context44.abrupt(\"return\", avatar.url);\n            case 51:\n            case \"end\":\n              return _context44.stop();\n          }\n        }, _callee44, this, [[10, 18], [22, 33]]);\n      }));\n    }\n  }, {\n    key: \"perform\",\n    value: function perform(method, params) {\n      return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n        operation: method\n      });\n    }\n  }, {\n    key: \"_startEvent\",\n    value: function _startEvent(event) {\n      this.polling = this._events.filter(function (e) {\n        return e.pollable();\n      }).length > 0;\n    }\n  }, {\n    key: \"_stopEvent\",\n    value: function _stopEvent(event) {\n      this.polling = this._events.filter(function (e) {\n        return e.pollable();\n      }).length > 0;\n    }\n  }, {\n    key: \"_addEventListener\",\n    value: function _addEventListener(eventName, listener, once) {\n      var event = new Event(getEventTag(eventName), listener, once);\n      this._events.push(event);\n      this._startEvent(event);\n      return this;\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventName, listener) {\n      return this._addEventListener(eventName, listener, false);\n    }\n  }, {\n    key: \"once\",\n    value: function once(eventName, listener) {\n      return this._addEventListener(eventName, listener, true);\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventName) {\n      var _this19 = this;\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      var result = false;\n      var stopped = [];\n      var eventTag = getEventTag(eventName);\n      this._events = this._events.filter(function (event) {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n        setTimeout(function () {\n          event.listener.apply(_this19, args);\n        }, 0);\n        result = true;\n        if (event.once) {\n          stopped.push(event);\n          return false;\n        }\n        return true;\n      });\n      stopped.forEach(function (event) {\n        _this19._stopEvent(event);\n      });\n      return result;\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount(eventName) {\n      if (!eventName) {\n        return this._events.length;\n      }\n      var eventTag = getEventTag(eventName);\n      return this._events.filter(function (event) {\n        return event.tag === eventTag;\n      }).length;\n    }\n  }, {\n    key: \"listeners\",\n    value: function listeners(eventName) {\n      if (eventName == null) {\n        return this._events.map(function (event) {\n          return event.listener;\n        });\n      }\n      var eventTag = getEventTag(eventName);\n      return this._events.filter(function (event) {\n        return event.tag === eventTag;\n      }).map(function (event) {\n        return event.listener;\n      });\n    }\n  }, {\n    key: \"off\",\n    value: function off(eventName, listener) {\n      var _this20 = this;\n      if (listener == null) {\n        return this.removeAllListeners(eventName);\n      }\n      var stopped = [];\n      var found = false;\n      var eventTag = getEventTag(eventName);\n      this._events = this._events.filter(function (event) {\n        if (event.tag !== eventTag || event.listener != listener) {\n          return true;\n        }\n        if (found) {\n          return true;\n        }\n        found = true;\n        stopped.push(event);\n        return false;\n      });\n      stopped.forEach(function (event) {\n        _this20._stopEvent(event);\n      });\n      return this;\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventName) {\n      var _this21 = this;\n      var stopped = [];\n      if (eventName == null) {\n        stopped = this._events;\n        this._events = [];\n      } else {\n        var eventTag = getEventTag(eventName);\n        this._events = this._events.filter(function (event) {\n          if (event.tag !== eventTag) {\n            return true;\n          }\n          stopped.push(event);\n          return false;\n        });\n      }\n      stopped.forEach(function (event) {\n        _this21._stopEvent(event);\n      });\n      return this;\n    }\n  }], [{\n    key: \"getFormatter\",\n    value: function getFormatter() {\n      if (defaultFormatter == null) {\n        defaultFormatter = new Formatter();\n      }\n      return defaultFormatter;\n    }\n    // @TODO: Remove this and just use getNetwork\n  }, {\n    key: \"getNetwork\",\n    value: function getNetwork(network) {\n      return _getNetwork(network == null ? \"homestead\" : network);\n    }\n  }]);\n  return BaseProvider;\n}(Provider);","map":{"version":3,"names":["_assertThisInitialized","_inherits","_createSuper","_regeneratorRuntime","_classCallCheck","_createClass","ForkEvent","Provider","encode","base64Encode","Base58","BigNumber","arrayify","concat","hexConcat","hexDataLength","hexDataSlice","hexlify","hexValue","hexZeroPad","isHexString","HashZero","dnsEncode","namehash","getNetwork","defineReadOnly","getStatic","resolveProperties","sha256","toUtf8Bytes","toUtf8String","fetchJson","poll","bech32","Logger","version","logger","Formatter","MAX_CCIP_REDIRECTS","checkTopic","topic","throwArgumentError","toLowerCase","serializeTopics","topics","slice","length","pop","map","Array","isArray","unique","forEach","sorted","Object","keys","sort","join","deserializeTopics","data","split","comps","getEventTag","eventName","indexOf","isForkEvent","warn","Error","address","getTime","Date","stall","duration","Promise","resolve","setTimeout","PollableEvents","Event","tag","listener","once","_lastBlockNumber","_inflight","key","get","type","hash","filter","value","pollable","coinInfos","symbol","p2pkh","p2sh","prefix","ilk","bytes32ify","from","toHexString","base58Encode","matcherIpfs","RegExp","matchers","_parseString","result","start","_parseBytes","error","offset","toNumber","getIpfsLink","link","match","substring","numPad","padded","Uint8Array","set","bytesPad","Math","ceil","encodeBytes","datas","byteCount","i","push","Resolver","provider","name","resolvedAddress","formatter","supportsWildcard","_this","_supportsEip2544","call","to","then","eq","catch","code","errors","CALL_EXCEPTION","_fetch","selector","parameters","tx","ccipReadEnabled","parseBytes","_context","next","sent","prev","throwError","transaction","abrupt","t0","stop","_callee","_fetchBytes","_context2","_callee2","_getAddress","coinType","hexBytes","coinInfo","String","UNSUPPORTED_OPERATION","operation","bytes","parseInt","words","toWords","unshift","getAddress","_context3","callAddress","_callee3","getAvatar","linkage","content","_context4","getText","avatar","scheme","url","t1","_resolvedAddress","owner","addr","tokenId","t2","t3","tokenOwner","t4","t5","balance","isZero","toString","t6","t7","metadataUrl","replace","metadata","JSON","stringify","imageUrl","image","ipfs","t8","_callee4","getContentHash","_context5","ipns","swarm","skynet","urlSafe","a","_callee5","keyBytes","_context6","_callee6","defaultFormatter","nextPollId","BaseProvider","_Provider","_super","network","_this2","_events","_emitted","block","disableCcipRead","constructor","getFormatter","anyNetwork","detectNetwork","_networkPromise","_ready","knownNetwork","emit","_maxInternalBlockNumber","_maxFilterBlockRange","_pollingInterval","_fastQueryDate","_network","_context7","UNKNOWN_ERROR","_callee7","_this3","NETWORK_ERROR","event","undefined","ccipReadFetch","calldata","urls","_context8","sender","errorMessages","href","json","errorPassThrough","response","status","statusCode","errorMessage","message","SERVER_ERROR","m","_callee8","_getInternalBlockNumber","maxAge","_context9","_internalBlockNumber","internalBlockNumber","respTime","blockNumber","reqTime","checkInternalBlockNumber","perform","networkError","_ref","_this4","_setFastBlockNumber","_callee9","pollId","runners","_context10","pollingInterval","abs","makeError","previousBlockNumber","eventBlockNumber","_this5","runner","getTransactionReceipt","receipt","fromBlock","toBlock","getLogs","logs","log","blockHash","transactionHash","all","_callee10","resetEventsBlock","polling","_context11","_callee11","_context12","currentNetwork","chainId","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_callee12","_this6","_poller","_this7","setInterval","_bootstrapPoll","clearInterval","_this8","_getFastBlockNumber","_this9","now","getBlockNumber","waitForTransaction","confirmations","timeout","_waitForTransaction","_context13","_callee13","replaceable","_context16","reject","cancelFuncs","done","alreadyDone","func","minedHandler","_this10","on","removeListener","lastBlockNumber","startBlock","scannedBlock","replaceHandler","__awaiter","mark","_callee15","_this11","wrap","_callee15$","_context15","getTransactionCount","nonce","_callee14","mined","ti","_receipt","reason","_callee14$","_context14","getTransaction","getBlockWithTransactions","transactions","TRANSACTION_REPLACED","cancelled","replacement","_wrapTransaction","timer","TIMEOUT","unref","clearTimeout","_callee16","_context17","_callee17","getGasPrice","_context18","method","_callee18","getBalance","addressOrName","blockTag","_context19","_getBlockTag","params","_callee19","_context20","_callee20","getCode","_context21","_callee21","getStorageAt","position","_context22","p","_callee22","_this12","expectedHash","returnedHash","wait","confirms","_callee23","_callee23$","_context23","sendTransaction","signedTransaction","_context24","t","hexTx","_callee24","_getTransactionRequest","values","_context25","v","_this13","accessList","transactionRequest","_callee25","_getFilter","_context26","_this14","_callee26","_call","attempt","redirects","txSender","_context27","signature","urlsOffset","urlsLength","urlsData","u","callbackSelector","extraData","ccipResult","_callee27","_context28","resolved","_callee28","estimateGas","_context29","_callee29","_context30","resolveName","_callee30","_getBlock","blockHashOrBlockTag","includeTransactions","_context32","_this15","_callee31","_this16","_blockNumber","blockWithTxs","_callee31$","_context31","blockWithTransactions","oncePoll","_callee32","getBlock","_context34","_this17","_callee33","_callee33$","_context33","transactionResponse","_callee34","_context36","_this18","_callee35","_callee35$","_context35","_callee36","_context37","removed","arrayOf","filterLog","bind","_callee37","getEtherPrice","_context38","_callee38","_context39","_callee39","getResolver","currentName","_context40","_getResolver","resolver","_callee40","_context41","ensAddress","addrData","_callee41","_context42","_callee42","lookupAddress","_context43","node","resolverAddr","_callee43","nameOrAddress","_context44","resolverAddress","_callee44","NOT_IMPLEMENTED","_startEvent","e","_stopEvent","_addEventListener","_this19","_len","arguments","args","_key","stopped","eventTag","apply","listenerCount","listeners","off","_this20","removeAllListeners","found","_this21"],"sources":["D:\\Projects\\RainbowKit\\connectwallet\\node_modules\\ethers\\node_modules\\@ethersproject\\providers\\src.ts\\base-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport {\n    Block, BlockTag, BlockWithTransactions, EventType, Filter, FilterByBlockHash, ForkEvent,\n    Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse\n} from \"@ethersproject/abstract-provider\";\nimport { encode as base64Encode } from \"@ethersproject/base64\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork, Network, Networkish } from \"@ethersproject/networks\";\nimport { Deferrable, defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { Transaction } from \"@ethersproject/transactions\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\n\nimport bech32 from \"bech32\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Formatter } from \"./formatter\";\n\nconst MAX_CCIP_REDIRECTS = 10;\n\n//////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic: string): string {\n     if (topic == null) { return \"null\"; }\n     if (hexDataLength(topic) !== 32) {\n         logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n     }\n     return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics: Array<string | Array<string>>): string {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) { topics.pop(); }\n\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n\n            // Only track unique OR-topics\n            const unique: { [ topic: string ]: boolean } = { }\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n\n            return sorted.join(\"|\");\n\n        } else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\n\nfunction deserializeTopics(data: string): Array<string | Array<string>> {\n    if (data === \"\") { return [ ]; }\n\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") { return [ ]; }\n\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null: topic);\n        });\n\n        return ((comps.length === 1) ? comps[0]: comps);\n    });\n}\n\nfunction getEventTag(eventName: EventType): string {\n    if (typeof(eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n\n    } else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n\n    } else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n\n    } else if (eventName && typeof(eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n\n    throw new Error(\"invalid event - \" + eventName);\n}\n\n//////////////////////////////\n// Helper Object\n\nfunction getTime() {\n    return (new Date()).getTime();\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\n//////////////////////////////\n// Provider Object\n\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\nconst PollableEvents = [ \"block\", \"network\", \"pending\", \"poll\" ];\n\nexport class Event {\n    readonly listener: Listener;\n    readonly once: boolean;\n    readonly tag: string;\n\n    _lastBlockNumber: number\n    _inflight: boolean;\n\n    constructor(tag: string, listener: Listener, once: boolean) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n\n        this._lastBlockNumber = -2;\n        this._inflight = false;\n    }\n\n    get event(): EventType {\n        switch (this.type) {\n            case \"tx\":\n               return this.hash;\n            case \"filter\":\n               return this.filter;\n        }\n        return this.tag;\n    }\n\n    get type(): string {\n        return this.tag.split(\":\")[0]\n    }\n\n    get hash(): string {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") { return null; }\n        return comps[1];\n    }\n\n    get filter(): Filter {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") { return null; }\n        const address = comps[1];\n\n        const topics = deserializeTopics(comps[2]);\n        const filter: Filter = { };\n\n        if (topics.length > 0) { filter.topics = topics; }\n        if (address && address !== \"*\") { filter.address = address; }\n\n        return filter;\n    }\n\n    pollable(): boolean {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n\nexport interface EnsResolver {\n\n    // Name this Resolver is associated with\n    readonly name: string;\n\n    // The address of the resolver\n    readonly address: string;\n\n    // Multichain address resolution (also normal address resolution)\n    // See: https://eips.ethereum.org/EIPS/eip-2304\n    getAddress(coinType?: 60): Promise<null | string>\n\n    // Contenthash field\n    // See: https://eips.ethereum.org/EIPS/eip-1577\n    getContentHash(): Promise<null | string>;\n\n    // Storage of text records\n    // See: https://eips.ethereum.org/EIPS/eip-634\n    getText(key: string): Promise<null | string>;\n};\n\nexport interface EnsProvider {\n    resolveName(name: string): Promise<null | string>;\n    lookupAddress(address: string): Promise<null | string>;\n    getResolver(name: string): Promise<null | EnsResolver>;\n}\n\ntype CoinInfo = {\n    symbol: string,\n    ilk?: string,     // General family\n    prefix?: string,  // Bech32 prefix\n    p2pkh?: number,   // Pay-to-Public-Key-Hash Version\n    p2sh?: number,    // Pay-to-Script-Hash Version\n};\n\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos: { [ coinType: string ]: CoinInfo } = {\n    \"0\":   { symbol: \"btc\",  p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\":   { symbol: \"ltc\",  p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\":   { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\":  { symbol: \"eth\",  ilk: \"eth\" },\n    \"61\":  { symbol: \"etc\",  ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\n\nfunction bytes32ify(value: number): string {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data: Uint8Array): string {\n    return Base58.encode(concat([ data, hexDataSlice(sha256(sha256(data)), 0, 4) ]));\n}\n\nexport interface Avatar {\n    url: string;\n    linkage: Array<{ type: string, content: string }>;\n}\n\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\n\nfunction _parseString(result: string, start: number): null | string {\n    try {\n        return toUtf8String(_parseBytes(result, start));\n    } catch(error) { }\n    return null;\n}\n\nfunction _parseBytes(result: string, start: number): null | string {\n    if (result === \"0x\") { return null; }\n\n    const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link: string): string {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    } else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    } else {\n        logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n\n    return `https:/\\/gateway.ipfs.io/ipfs/${ link }`;\n}\n\nfunction numPad(value: number): Uint8Array {\n    const result = arrayify(value);\n    if (result.length > 32) { throw new Error(\"internal; should not happen\"); }\n\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\n\nfunction bytesPad(value: Uint8Array): Uint8Array {\n    if ((value.length % 32) === 0) { return value; }\n\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas: Array<BytesLike>) {\n    const result: Array<Uint8Array> = [ ];\n\n    let byteCount = 0;\n\n    // Add place-holders for pointers as we add items\n    for (let i = 0; i < datas.length; i++) {\n        result.push(null);\n        byteCount += 32;\n    }\n\n    for (let i = 0; i < datas.length; i++) {\n        const data = arrayify(datas[i]);\n\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n\n    return hexConcat(result);\n}\n\nexport class Resolver implements EnsResolver {\n    readonly provider: BaseProvider;\n\n    readonly name: string;\n    readonly address: string;\n\n    readonly _resolvedAddress: null | string;\n\n    // For EIP-2544 names, the ancestor that provided the resolver\n    _supportsEip2544: null | Promise<boolean>;\n\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider: BaseProvider, address: string, name: string, resolvedAddress?: string) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n\n    supportsWildcard(): Promise<boolean> {\n        if (!this._supportsEip2544) {\n            // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n            this._supportsEip2544 = this.provider.call({\n                to: this.address,\n                data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n            }).then((result) => {\n                return BigNumber.from(result).eq(1);\n            }).catch((error) => {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return false; }\n                // Rethrow the error: link is down, etc. Let future attempts retry.\n                this._supportsEip2544 = null;\n                throw error;\n            });\n        }\n\n        return this._supportsEip2544;\n    }\n\n    async _fetch(selector: string, parameters?: string): Promise<null | string> {\n\n        // e.g. keccak256(\"addr(bytes32,uint256)\")\n        const tx = {\n            to: this.address,\n            ccipReadEnabled: true,\n            data: hexConcat([ selector, namehash(this.name), (parameters || \"0x\") ])\n        };\n\n        // Wildcard support; use EIP-2544 to resolve the request\n        let parseBytes = false;\n        if (await this.supportsWildcard()) {\n            parseBytes = true;\n\n            // selector(\"resolve(bytes,bytes)\")\n            tx.data = hexConcat([ \"0x9061b923\", encodeBytes([ dnsEncode(this.name), tx.data ]) ]);\n        }\n\n        try {\n            let result = await this.provider.call(tx);\n            if ((arrayify(result).length % 32) === 4) {\n                logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                    transaction: tx, data: result\n                });\n            }\n            if (parseBytes) { result = _parseBytes(result, 0); }\n            return result;\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            throw error;\n        }\n    }\n\n    async _fetchBytes(selector: string, parameters?: string): Promise<null | string> {\n        const result = await this._fetch(selector, parameters);\n        if (result != null) { return _parseBytes(result, 0); }\n        return null;\n    }\n\n    _getAddress(coinType: number, hexBytes: string): string {\n        const coinInfo = coinInfos[String(coinType)];\n\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${ coinType }`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`\n            });\n        }\n\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n\n        const bytes = arrayify(hexBytes);\n\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2pkh ], (\"0x\" + p2pkh[2]) ]));\n                }\n            }\n        }\n\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2sh ], (\"0x\" + p2sh[2]) ]));\n                }\n            }\n        }\n\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            } else {\n                version = -1;\n            }\n\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n\n        return null;\n    }\n\n\n    async getAddress(coinType?: number): Promise<string> {\n        if (coinType == null) { coinType = 60; }\n\n        // If Ethereum, use the standard `addr(bytes32)`\n        if (coinType === 60) {\n            try {\n                // keccak256(\"addr(bytes32)\")\n                const result = await this._fetch(\"0x3b3b57de\");\n\n                // No address\n                if (result === \"0x\" || result === HashZero) { return null; }\n\n                return this.provider.formatter.callAddress(result);\n            } catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n                throw error;\n            }\n        }\n\n        // keccak256(\"addr(bytes32,uint256\")\n        const hexBytes = await this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n\n        // No address\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // Compute the address\n        const address = this._getAddress(coinType, hexBytes);\n\n        if (address == null) {\n            logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`,\n                coinType: coinType,\n                data: hexBytes\n            });\n        }\n\n        return address;\n    }\n\n    async getAvatar(): Promise<null | Avatar> {\n        const linkage: Array<{ type: string, content: string }> = [ { type: \"name\", content: this.name } ];\n        try {\n            // test data for ricmoo.eth\n            //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n            const avatar = await this.getText(\"avatar\");\n            if (avatar == null) { return null; }\n\n            for (let i = 0; i < matchers.length; i++) {\n                const match = avatar.match(matchers[i]);\n                if (match == null) { continue; }\n\n                const scheme = match[1].toLowerCase();\n\n                switch (scheme) {\n                    case \"https\":\n                        linkage.push({ type: \"url\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"data\":\n                        linkage.push({ type: \"data\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"ipfs\":\n                        linkage.push({ type: \"ipfs\", content: avatar });\n                        return { linkage, url: getIpfsLink(avatar) };\n\n                    case \"erc721\":\n                    case \"erc1155\": {\n                        // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                        const selector = (scheme === \"erc721\") ? \"0xc87b56dd\": \"0x0e89341c\";\n                        linkage.push({ type: scheme, content: avatar });\n\n                        // The owner of this name\n                        const owner = (this._resolvedAddress || await this.getAddress());\n\n                        const comps = (match[2] || \"\").split(\"/\");\n                        if (comps.length !== 2) { return null; }\n\n                        const addr = await this.provider.formatter.address(comps[0]);\n                        const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n\n                        // Check that this account owns the token\n                        if (scheme === \"erc721\") {\n                            // ownerOf(uint256 tokenId)\n                            const tokenOwner = this.provider.formatter.callAddress(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x6352211e\", tokenId ])\n                            }));\n                            if (owner !== tokenOwner) { return null; }\n                            linkage.push({ type: \"owner\", content: tokenOwner });\n\n                        } else if (scheme === \"erc1155\") {\n                            // balanceOf(address owner, uint256 tokenId)\n                            const balance = BigNumber.from(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x00fdd58e\", hexZeroPad(owner, 32), tokenId ])\n                            }));\n                            if (balance.isZero()) { return null; }\n                            linkage.push({ type: \"balance\", content: balance.toString() });\n                        }\n\n                        // Call the token contract for the metadata URL\n                        const tx = {\n                            to: this.provider.formatter.address(comps[0]),\n                            data: hexConcat([ selector, tokenId ])\n                        };\n\n                        let metadataUrl = _parseString(await this.provider.call(tx), 0);\n                        if (metadataUrl == null) { return null; }\n                        linkage.push({ type: \"metadata-url-base\", content: metadataUrl });\n\n                        // ERC-1155 allows a generic {id} in the URL\n                        if (scheme === \"erc1155\") {\n                            metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                            linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                        }\n\n                        // Transform IPFS metadata links\n                        if (metadataUrl.match(/^ipfs:/i)) {\n                            metadataUrl = getIpfsLink(metadataUrl);\n                        }\n\n                        linkage.push({ type: \"metadata-url\", content: metadataUrl });\n\n                        // Get the token metadata\n                        const metadata = await fetchJson(metadataUrl);\n                        if (!metadata) { return null; }\n                        linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n\n                        // Pull the image URL out\n                        let imageUrl = metadata.image;\n                        if (typeof(imageUrl) !== \"string\") { return null; }\n\n                        if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                            // Allow\n                        } else {\n                            // Transform IPFS link to gateway\n                            const ipfs = imageUrl.match(matcherIpfs);\n                            if (ipfs == null) { return null; }\n\n                            linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                            imageUrl = getIpfsLink(imageUrl);\n                        }\n\n                        linkage.push({ type: \"url\", content: imageUrl });\n\n                        return { linkage, url: imageUrl };\n                    }\n                }\n            }\n        } catch (error) { }\n\n        return null;\n    }\n\n    async getContentHash(): Promise<string> {\n\n        // keccak256(\"contenthash()\")\n        const hexBytes = await this._fetchBytes(\"0xbc1c58d1\");\n\n        // No contenthash\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // IPFS (CID: 1, Type: DAG-PB)\n        const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipfs) {\n            const length = parseInt(ipfs[3], 16);\n            if (ipfs[4].length === length * 2) {\n                return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n            }\n        }\n\n        // IPNS (CID: 1, Type: libp2p-key)\n        const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipns) {\n            const length = parseInt(ipns[3], 16);\n            if (ipns[4].length === length * 2) {\n                return \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]);\n            }\n        }\n\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n        const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/)\n        if (swarm) {\n            if (swarm[1].length === (32 * 2)) {\n                return \"bzz:/\\/\" + swarm[1]\n            }\n        }\n\n        const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n        if (skynet) {\n            if (skynet[1].length === (34 * 2)) {\n                // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n                const urlSafe: Record<string, string> = { \"=\": \"\", \"+\": \"-\", \"/\": \"_\" };\n                const hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, (a) => (urlSafe[a]));\n                return \"sia:/\\/\" + hash;\n            }\n        }\n\n        return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"getContentHash()\",\n            data: hexBytes\n        });\n    }\n\n    async getText(key: string): Promise<string> {\n\n        // The key encoded as parameter to fetchBytes\n        let keyBytes = toUtf8Bytes(key);\n\n        // The nodehash consumes the first slot, so the string pointer targets\n        // offset 64, with the length at offset 64 and data starting at offset 96\n        keyBytes = concat([ bytes32ify(64), bytes32ify(keyBytes.length), keyBytes ]);\n\n        // Pad to word-size (32 bytes)\n        if ((keyBytes.length % 32) !== 0) {\n            keyBytes = concat([ keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32)) ])\n        }\n\n        const hexBytes = await this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        return toUtf8String(hexBytes);\n    }\n}\n\nlet defaultFormatter: Formatter = null;\n\nlet nextPollId = 1;\n\nexport class BaseProvider extends Provider implements EnsProvider {\n    _networkPromise: Promise<Network>;\n    _network: Network;\n\n    _events: Array<Event>;\n\n    formatter: Formatter;\n\n    // To help mitigate the eventually consistent nature of the blockchain\n    // we keep a mapping of events we emit. If we emit an event X, we expect\n    // that a user should be able to query for that event in the callback,\n    // if the node returns null, we stall the response until we get back a\n    // meaningful value, since we may be hitting a re-org, or a node that\n    // has not indexed the event yet.\n    // Events:\n    //   - t:{hash}    - Transaction hash\n    //   - b:{hash}    - BlockHash\n    //   - block       - The most recent emitted block\n    _emitted: { [ eventName: string ]: number | \"pending\" };\n\n    _pollingInterval: number;\n    _poller: NodeJS.Timer;\n    _bootstrapPoll: NodeJS.Timer;\n\n    _lastBlockNumber: number;\n    _maxFilterBlockRange: number;\n\n    _fastBlockNumber: number;\n    _fastBlockNumberPromise: Promise<number>;\n    _fastQueryDate: number;\n\n    _maxInternalBlockNumber: number;\n    _internalBlockNumber: Promise<{ blockNumber: number, reqTime: number, respTime: number }>;\n\n    readonly anyNetwork: boolean;\n\n    disableCcipRead: boolean;\n\n\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n\n    constructor(network: Networkish | Promise<Network>) {\n        super();\n\n        // Events being listened to\n        this._events = [];\n\n        this._emitted = { block: -2 };\n\n        this.disableCcipRead = false;\n\n        this.formatter = new.target.getFormatter();\n\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) { network = this.detectNetwork(); }\n\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n\n        } else {\n            const knownNetwork = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n\n            } else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n\n        this._maxInternalBlockNumber = -1024;\n\n        this._lastBlockNumber = -2;\n        this._maxFilterBlockRange = 10;\n\n        this._pollingInterval = 4000;\n\n        this._fastQueryDate = 0;\n    }\n\n    async _ready(): Promise<Network> {\n        if (this._network == null) {\n            let network: Network = null;\n            if (this._networkPromise) {\n                try {\n                    network = await this._networkPromise;\n                } catch (error) { }\n            }\n\n            // Try the Provider's network detection (this MUST throw if it cannot)\n            if (network == null) {\n                network = await this.detectNetwork();\n            }\n\n            // This should never happen; every Provider sub-class should have\n            // suggested a network by here (or have thrown).\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // Possible this call stacked so do not call defineReadOnly again\n            if (this._network == null) {\n                if (this.anyNetwork) {\n                    this._network = network;\n                } else {\n                    defineReadOnly(this, \"_network\", network);\n                }\n                this.emit(\"network\", network, null);\n            }\n        }\n\n        return this._network;\n    }\n\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready(): Promise<Network> {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter(): Formatter {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network: Networkish): Network {\n        return getNetwork((network == null) ? \"homestead\": network);\n    }\n\n    async ccipReadFetch(tx: Transaction, calldata: string, urls: Array<string>): Promise<null | string> {\n        if (this.disableCcipRead || urls.length === 0) { return null; }\n\n        const sender = tx.to.toLowerCase();\n        const data = calldata.toLowerCase();\n\n        const errorMessages: Array<string> = [ ];\n\n        for (let i = 0; i < urls.length; i++) {\n            const url = urls[i];\n\n            // URL expansion\n            const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n\n            // If no {data} is present, use POST; otherwise GET\n            const json: string | null = (url.indexOf(\"{data}\") >= 0) ? null: JSON.stringify({ data, sender });\n\n            const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n                value.status = response.statusCode;\n                return value;\n            });\n\n            if (result.data) { return result.data; }\n\n            const errorMessage = (result.message || \"unknown error\");\n\n            // 4xx indicates the result is not present; stop\n            if (result.status >= 400 && result.status < 500) {\n                return logger.throwError(`response not found during CCIP fetch: ${ errorMessage }`, Logger.errors.SERVER_ERROR, { url, errorMessage });\n            }\n\n            // 5xx indicates server issue; try the next url\n            errorMessages.push(errorMessage);\n        }\n\n        return logger.throwError(`error encountered during CCIP fetch: ${ errorMessages.map((m) => JSON.stringify(m)).join(\", \") }`, Logger.errors.SERVER_ERROR, {\n            urls, errorMessages\n        });\n    }\n\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    async _getInternalBlockNumber(maxAge: number): Promise<number> {\n        await this._ready();\n\n        // Allowing stale data up to maxAge old\n        if (maxAge > 0) {\n\n            // While there are pending internal block requests...\n            while (this._internalBlockNumber) {\n\n                // ...\"remember\" which fetch we started with\n                const internalBlockNumber = this._internalBlockNumber;\n\n                try {\n                    // Check the result is not too stale\n                    const result = await internalBlockNumber;\n                    if ((getTime() - result.respTime) <= maxAge) {\n                        return result.blockNumber;\n                    }\n\n                    // Too old; fetch a new value\n                    break;\n\n                } catch(error) {\n\n                    // The fetch rejected; if we are the first to get the\n                    // rejection, drop through so we replace it with a new\n                    // fetch; all others blocked will then get that fetch\n                    // which won't match the one they \"remembered\" and loop\n                    if (this._internalBlockNumber === internalBlockNumber) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        const reqTime = getTime();\n\n        const checkInternalBlockNumber = resolveProperties({\n            blockNumber: this.perform(\"getBlockNumber\", { }),\n            networkError: this.getNetwork().then((network) => (null), (error) => (error))\n        }).then(({ blockNumber, networkError }) => {\n            if (networkError) {\n                // Unremember this bad internal block number\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n                throw networkError;\n            }\n\n            const respTime = getTime();\n\n            blockNumber = BigNumber.from(blockNumber).toNumber();\n            if (blockNumber < this._maxInternalBlockNumber) { blockNumber = this._maxInternalBlockNumber; }\n\n            this._maxInternalBlockNumber = blockNumber;\n            this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n            return { blockNumber, reqTime, respTime };\n        });\n\n        this._internalBlockNumber = checkInternalBlockNumber;\n\n        // Swallow unhandled exceptions; if needed they are handled else where\n        checkInternalBlockNumber.catch((error) => {\n            // Don't null the dead (rejected) fetch, if it has already been updated\n            if (this._internalBlockNumber === checkInternalBlockNumber) {\n                this._internalBlockNumber = null;\n            }\n        });\n\n        return (await checkInternalBlockNumber).blockNumber;\n    }\n\n    async poll(): Promise<void> {\n        const pollId = nextPollId++;\n\n        // Track all running promises, so we can trigger a post-poll once they are complete\n        const runners: Array<Promise<void>> = [];\n\n        let blockNumber: number = null;\n        try {\n            blockNumber = await this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n        } catch (error) {\n            this.emit(\"error\", error);\n            return;\n        }\n        this._setFastBlockNumber(blockNumber);\n\n        // Emit a poll event after we have the latest (fast) block number\n        this.emit(\"poll\", pollId, blockNumber);\n\n        // If the block has not changed, meh.\n        if (blockNumber === this._lastBlockNumber) {\n            this.emit(\"didPoll\", pollId);\n            return;\n        }\n\n        // First polling cycle, trigger a \"block\" events\n        if (this._emitted.block === -2) {\n            this._emitted.block = blockNumber - 1;\n        }\n\n        if (Math.abs((<number>(this._emitted.block)) - blockNumber) > 1000) {\n            logger.warn(`network block skew detected; skipping block events (emitted=${ this._emitted.block } blockNumber${ blockNumber })`);\n            this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                blockNumber: blockNumber,\n                event: \"blockSkew\",\n                previousBlockNumber: this._emitted.block\n            }));\n            this.emit(\"block\", blockNumber);\n\n        } else {\n            // Notify all listener for each block that has passed\n            for (let i = (<number>this._emitted.block) + 1; i <= blockNumber; i++) {\n                this.emit(\"block\", i);\n            }\n        }\n\n        // The emitted block was updated, check for obsolete events\n        if ((<number>this._emitted.block) !== blockNumber) {\n            this._emitted.block = blockNumber;\n\n            Object.keys(this._emitted).forEach((key) => {\n                // The block event does not expire\n                if (key === \"block\") { return; }\n\n                // The block we were at when we emitted this event\n                const eventBlockNumber = this._emitted[key];\n\n                // We cannot garbage collect pending transactions or blocks here\n                // They should be garbage collected by the Provider when setting\n                // \"pending\" events\n                if (eventBlockNumber === \"pending\") { return; }\n\n                // Evict any transaction hashes or block hashes over 12 blocks\n                // old, since they should not return null anyways\n                if (blockNumber - eventBlockNumber > 12) {\n                    delete this._emitted[key];\n                }\n            });\n        }\n\n        // First polling cycle\n        if (this._lastBlockNumber === -2) {\n            this._lastBlockNumber = blockNumber - 1;\n        }\n        // Find all transaction hashes we are waiting on\n        this._events.forEach((event) => {\n            switch (event.type) {\n                case \"tx\": {\n                    const hash = event.hash;\n                    let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt || receipt.blockNumber == null) { return null; }\n                        this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                        this.emit(hash, receipt);\n                        return null;\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n\n                    runners.push(runner);\n\n                    break;\n                }\n\n                case \"filter\": {\n                    // We only allow a single getLogs to be in-flight at a time\n                    if (!event._inflight) {\n                        event._inflight = true;\n\n                        // Filter from the last known event; due to load-balancing\n                        // and some nodes returning updated block numbers before\n                        // indexing events, a logs result with 0 entries cannot be\n                        // trusted and we must retry a range which includes it again\n                        const filter = event.filter;\n                        filter.fromBlock = event._lastBlockNumber + 1;\n                        filter.toBlock = blockNumber;\n\n                        // Prevent fitler ranges from growing too wild\n                        if (filter.toBlock - this._maxFilterBlockRange > filter.fromBlock) {\n                            filter.fromBlock = filter.toBlock - this._maxFilterBlockRange;\n                        }\n\n                        const runner = this.getLogs(filter).then((logs) => {\n                            // Allow the next getLogs\n                            event._inflight = false;\n\n                            if (logs.length === 0) { return; }\n\n                            logs.forEach((log: Log) => {\n                                // Only when we get an event for a given block number\n                                // can we trust the events are indexed\n                                if (log.blockNumber > event._lastBlockNumber) {\n                                    event._lastBlockNumber = log.blockNumber;\n                                }\n\n                                // Make sure we stall requests to fetch blocks and txs\n                                this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n\n                                this.emit(filter, log);\n                            });\n                        }).catch((error: Error) => {\n                            this.emit(\"error\", error);\n\n                            // Allow another getLogs (the range was not updated)\n                            event._inflight = false;\n                        });\n                        runners.push(runner);\n                    }\n\n                    break;\n                }\n            }\n        });\n\n        this._lastBlockNumber = blockNumber;\n\n        // Once all events for this loop have been processed, emit \"didPoll\"\n        Promise.all(runners).then(() => {\n            this.emit(\"didPoll\", pollId);\n        }).catch((error) => { this.emit(\"error\", error); });\n\n        return;\n    }\n\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber: number): void {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) { this.poll(); }\n    }\n\n    get network(): Network {\n        return this._network;\n    }\n\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    async detectNetwork(): Promise<Network> {\n        return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"provider.detectNetwork\"\n        });\n    }\n\n    async getNetwork(): Promise<Network> {\n        const network = await this._ready();\n\n        // Make sure we are still connected to the same network; this is\n        // only an external call for backends which can have the underlying\n        // network change spontaneously\n        const currentNetwork = await this.detectNetwork();\n        if (network.chainId !== currentNetwork.chainId) {\n\n            // We are allowing network changes, things can get complex fast;\n            // make sure you know what you are doing if you use \"any\"\n            if (this.anyNetwork) {\n                this._network = currentNetwork;\n\n                // Reset all internal block number guards and caches\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null;\n\n                // The \"network\" event MUST happen before this method resolves\n                // so any events have a chance to unregister, so we stall an\n                // additional event loop before returning from /this/ call\n                this.emit(\"network\", currentNetwork, network);\n                await stall(0);\n\n                return this._network;\n            }\n\n            const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                event: \"changed\",\n                network: network,\n                detectedNetwork: currentNetwork\n            });\n\n            this.emit(\"error\", error);\n            throw error;\n        }\n\n        return network;\n    }\n\n    get blockNumber(): number {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber: -1;\n    }\n\n    get polling(): boolean {\n        return (this._poller != null);\n    }\n\n    set polling(value: boolean) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) { this.poll(); }\n\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n\n        } else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n\n    get pollingInterval(): number {\n        return this._pollingInterval;\n    }\n\n    set pollingInterval(value: number) {\n        if (typeof(value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n\n        this._pollingInterval = value;\n\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n\n    _getFastBlockNumber(): Promise<number> {\n        const now = getTime();\n\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n\n        return this._fastBlockNumberPromise;\n    }\n\n    _setFastBlockNumber(blockNumber: number): void {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) { return; }\n\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n\n    async waitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt> {\n        return this._waitForTransaction(transactionHash, (confirmations == null) ? 1: confirmations, timeout || 0, null);\n    }\n\n    async _waitForTransaction(transactionHash: string, confirmations: number, timeout: number, replaceable: { data: string, from: string, nonce: number, to: string, value: BigNumber, startBlock: number }): Promise<TransactionReceipt> {\n        const receipt = await this.getTransactionReceipt(transactionHash);\n\n        // Receipt is already good\n        if ((receipt ? receipt.confirmations: 0) >= confirmations) { return receipt; }\n\n        // Poll until the receipt is good...\n        return new Promise((resolve, reject) => {\n            const cancelFuncs: Array<() => void> = [];\n\n            let done = false;\n            const alreadyDone = function() {\n                if (done) { return true; }\n                done = true;\n                cancelFuncs.forEach((func) => { func(); });\n                return false;\n            };\n\n            const minedHandler = (receipt: TransactionReceipt) => {\n                if (receipt.confirmations < confirmations) { return; }\n                if (alreadyDone()) { return; }\n                resolve(receipt);\n            }\n            this.on(transactionHash, minedHandler);\n            cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n\n            if (replaceable) {\n                let lastBlockNumber = replaceable.startBlock;\n                let scannedBlock: number = null;\n                const replaceHandler = async (blockNumber: number) => {\n                    if (done) { return; }\n\n                    // Wait 1 second; this is only used in the case of a fault, so\n                    // we will trade off a little bit of latency for more consistent\n                    // results and fewer JSON-RPC calls\n                    await stall(1000);\n\n                    this.getTransactionCount(replaceable.from).then(async (nonce) => {\n                        if (done) { return; }\n\n                        if (nonce <= replaceable.nonce) {\n                            lastBlockNumber = blockNumber;\n\n                        } else {\n                            // First check if the transaction was mined\n                            {\n                                const mined = await this.getTransaction(transactionHash);\n                                if (mined && mined.blockNumber != null) { return; }\n                            }\n\n                            // First time scanning. We start a little earlier for some\n                            // wiggle room here to handle the eventually consistent nature\n                            // of blockchain (e.g. the getTransactionCount was for a\n                            // different block)\n                            if (scannedBlock == null) {\n                                scannedBlock = lastBlockNumber - 3;\n                                if (scannedBlock < replaceable.startBlock) {\n                                    scannedBlock = replaceable.startBlock;\n                                }\n                            }\n\n                            while (scannedBlock <= blockNumber) {\n                                if (done) { return; }\n\n                                const block = await this.getBlockWithTransactions(scannedBlock);\n                                for (let ti = 0; ti < block.transactions.length; ti++) {\n                                    const tx = block.transactions[ti];\n\n                                    // Successfully mined!\n                                    if (tx.hash === transactionHash) { return; }\n\n                                    // Matches our transaction from and nonce; its a replacement\n                                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                        if (done) { return; }\n\n                                        // Get the receipt of the replacement\n                                        const receipt = await this.waitForTransaction(tx.hash, confirmations);\n\n                                        // Already resolved or rejected (prolly a timeout)\n                                        if (alreadyDone()) { return; }\n\n                                        // The reason we were replaced\n                                        let reason = \"replaced\";\n                                        if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                            reason = \"repriced\";\n                                        } else  if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                            reason = \"cancelled\"\n                                        }\n\n                                        // Explain why we were replaced\n                                        reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                            reason,\n                                            replacement: this._wrapTransaction(tx),\n                                            hash: transactionHash,\n                                            receipt\n                                        }));\n\n                                        return;\n                                    }\n                                }\n                                scannedBlock++;\n                            }\n                        }\n\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n\n                    }, (error) => {\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n                    });\n                };\n\n                if (done) { return; }\n                this.once(\"block\", replaceHandler);\n\n                cancelFuncs.push(() => {\n                    this.removeListener(\"block\", replaceHandler);\n                });\n            }\n\n            if (typeof(timeout) === \"number\" && timeout > 0) {\n                const timer = setTimeout(() => {\n                    if (alreadyDone()) { return; }\n                    reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                }, timeout);\n                if (timer.unref) { timer.unref(); }\n\n                cancelFuncs.push(() => { clearTimeout(timer); });\n            }\n        });\n    }\n\n    async getBlockNumber(): Promise<number> {\n        return this._getInternalBlockNumber(0);\n    }\n\n    async getGasPrice(): Promise<BigNumber> {\n        await this.getNetwork();\n\n        const result = await this.perform(\"getGasPrice\", { });\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getGasPrice\",\n                result, error\n            });\n        }\n    }\n\n    async getBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getBalance\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getBalance\",\n                params, result, error\n            });\n        }\n    }\n\n    async getTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getTransactionCount\", params);\n        try {\n            return BigNumber.from(result).toNumber();\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getTransactionCount\",\n                params, result, error\n            });\n        }\n    }\n\n    async getCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getCode\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getCode\",\n                params, result, error\n            });\n        }\n    }\n\n    async getStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag),\n            position: Promise.resolve(position).then((p) => hexValue(p))\n        });\n        const result = await this.perform(\"getStorageAt\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getStorageAt\",\n                params, result, error\n            });\n        }\n    }\n\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx: Transaction, hash?: string, startBlock?: number): TransactionResponse {\n        if (hash != null && hexDataLength(hash) !== 32) { throw new Error(\"invalid response - sendTransaction\"); }\n\n        const result = <TransactionResponse>tx;\n\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n\n        result.wait = async (confirms?: number, timeout?: number) => {\n            if (confirms == null) { confirms = 1; }\n            if (timeout == null) { timeout = 0; }\n\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n\n            const receipt = await this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) { return null; }\n\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        };\n\n        return result;\n    }\n\n    async sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        const hexTx = await Promise.resolve(signedTransaction).then(t => hexlify(t));\n        const tx = this.formatter.transaction(signedTransaction);\n        if (tx.confirmations == null) { tx.confirmations = 0; }\n        const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        try {\n            const hash = await this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n            return this._wrapTransaction(tx, hash, blockNumber);\n        } catch (error) {\n            (<any>error).transaction = tx;\n            (<any>error).transactionHash = tx.hash;\n            throw error;\n        }\n    }\n\n    async _getTransactionRequest(transaction: Deferrable<TransactionRequest>): Promise<Transaction> {\n        const values: any = await transaction;\n\n        const tx: any = { };\n\n        [\"from\", \"to\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v): null))\n        });\n\n        [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v): null));\n        });\n\n        [\"type\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v: null));\n        });\n\n        if (values.accessList) {\n            tx.accessList = this.formatter.accessList(values.accessList);\n        }\n\n        [\"data\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v): null));\n        });\n\n        return this.formatter.transactionRequest(await resolveProperties(tx));\n    }\n\n    async _getFilter(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Filter | FilterByBlockHash> {\n        filter = await filter;\n\n        const result: any = { };\n\n        if (filter.address != null) {\n            result.address = this._getAddress(filter.address);\n        }\n\n        [\"blockHash\", \"topics\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = (<any>filter)[key];\n        });\n\n        [\"fromBlock\", \"toBlock\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = this._getBlockTag((<any>filter)[key]);\n        });\n\n        return this.formatter.filter(await resolveProperties(result));\n    }\n\n    async _call(transaction: TransactionRequest, blockTag: BlockTag, attempt: number): Promise<string> {\n        if (attempt >= MAX_CCIP_REDIRECTS) {\n            logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n                redirects: attempt, transaction\n            });\n        }\n\n        const txSender = transaction.to;\n\n        const result = await this.perform(\"call\", { transaction, blockTag });\n\n        // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n        if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && (hexDataLength(result) % 32 === 4)) {\n            try {\n                const data = hexDataSlice(result, 4);\n\n                // Check the sender of the OffchainLookup matches the transaction\n                const sender = hexDataSlice(data, 0, 32);\n                if (!BigNumber.from(sender).eq(txSender)) {\n                    logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n\n                // Read the URLs from the response\n                const urls: Array<string> = [];\n                const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n                const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n                const urlsData = hexDataSlice(data, urlsOffset + 32);\n                for (let u = 0; u < urlsLength; u++) {\n                    const url = _parseString(urlsData, u * 32);\n                    if (url == null) {\n                        logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    urls.push(url);\n                }\n\n                // Get the CCIP calldata to forward\n                const calldata = _parseBytes(data, 64);\n\n                // Get the callbackSelector (bytes4)\n                if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                    logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n                const callbackSelector = hexDataSlice(data, 96, 100);\n\n                // Get the extra data to send back to the contract as context\n                const extraData = _parseBytes(data, 128);\n\n                const ccipResult = await this.ccipReadFetch(<Transaction>transaction, calldata, urls);\n                if (ccipResult == null) {\n                    logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n\n                const tx = {\n                    to: txSender,\n                    data: hexConcat([ callbackSelector, encodeBytes([ ccipResult, extraData ]) ])\n                };\n\n                return this._call(tx, blockTag, attempt + 1);\n\n            } catch (error) {\n                if (error.code === Logger.errors.SERVER_ERROR) { throw error; }\n            }\n        }\n\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"call\",\n                params: { transaction, blockTag }, result, error\n            });\n        }\n\n    }\n\n    async call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const resolved = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction),\n            blockTag: this._getBlockTag(blockTag),\n            ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n        });\n        return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0: -1);\n    }\n\n    async estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction)\n        });\n\n        const result = await this.perform(\"estimateGas\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"estimateGas\",\n                params, result, error\n            });\n        }\n    }\n\n    async _getAddress(addressOrName: string | Promise<string>): Promise<string> {\n        addressOrName = await addressOrName;\n        if (typeof(addressOrName) !== \"string\") {\n            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n        }\n\n        const address = await this.resolveName(addressOrName);\n        if (address == null) {\n            logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `resolveName(${ JSON.stringify(addressOrName) })`\n            });\n        }\n        return address;\n    }\n\n    async _getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>, includeTransactions?: boolean): Promise<Block | BlockWithTransactions> {\n        await this.getNetwork();\n\n        blockHashOrBlockTag = await blockHashOrBlockTag;\n\n        // If blockTag is a number (not \"latest\", etc), this is the block number\n        let blockNumber = -128;\n\n        const params: { [key: string]: any } = {\n            includeTransactions: !!includeTransactions\n        };\n\n        if (isHexString(blockHashOrBlockTag, 32)) {\n            params.blockHash = blockHashOrBlockTag;\n        } else {\n            try {\n                params.blockTag = await this._getBlockTag(blockHashOrBlockTag);\n                if (isHexString(params.blockTag)) {\n                    blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n            } catch (error) {\n                logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n            }\n        }\n\n        return poll(async () => {\n            const block = await this.perform(\"getBlock\", params);\n\n            // Block was not found\n            if (block == null) {\n\n                // For blockhashes, if we didn't say it existed, that blockhash may\n                // not exist. If we did see it though, perhaps from a log, we know\n                // it exists, and this node is just not caught up yet.\n                if (params.blockHash != null) {\n                    if (this._emitted[\"b:\" + params.blockHash] == null) { return null; }\n                }\n\n                // For block tags, if we are asking for a future block, we return null\n                if (params.blockTag != null) {\n                    if (blockNumber > this._emitted.block) { return null; }\n                }\n\n                // Retry on the next block\n                return undefined;\n            }\n\n            // Add transactions\n            if (includeTransactions) {\n                let blockNumber: number = null;\n                for (let i = 0; i < block.transactions.length; i++) {\n                    const tx = block.transactions[i];\n                    if (tx.blockNumber == null) {\n                        tx.confirmations = 0;\n\n                    } else if (tx.confirmations == null) {\n                        if (blockNumber == null) {\n                            blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                        }\n\n                        // Add the confirmations using the fast block number (pessimistic)\n                        let confirmations = (blockNumber - tx.blockNumber) + 1;\n                        if (confirmations <= 0) { confirmations = 1; }\n                        tx.confirmations = confirmations;\n                    }\n                }\n\n                const blockWithTxs: any = this.formatter.blockWithTransactions(block);\n                blockWithTxs.transactions = blockWithTxs.transactions.map((tx: TransactionResponse) => this._wrapTransaction(tx));\n                return blockWithTxs;\n            }\n\n            return this.formatter.block(block);\n\n        }, { oncePoll: this });\n    }\n\n    getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> {\n        return <Promise<Block>>(this._getBlock(blockHashOrBlockTag, false));\n    }\n\n    getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> {\n        return <Promise<BlockWithTransactions>>(this._getBlock(blockHashOrBlockTag, true));\n    }\n\n    async getTransaction(transactionHash: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransaction\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            const tx = this.formatter.transactionResponse(result);\n\n            if (tx.blockNumber == null) {\n                tx.confirmations = 0;\n\n            } else if (tx.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - tx.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                tx.confirmations = confirmations;\n            }\n\n            return this._wrapTransaction(tx);\n        }, { oncePoll: this });\n    }\n\n    async getTransactionReceipt(transactionHash: string | Promise<string>): Promise<TransactionReceipt> {\n        await this.getNetwork();\n\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransactionReceipt\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            // \"geth-etc\" returns receipts before they are ready\n            if (result.blockHash == null) { return undefined; }\n\n            const receipt = this.formatter.receipt(result);\n\n            if (receipt.blockNumber == null) {\n                receipt.confirmations = 0;\n\n            } else if (receipt.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                receipt.confirmations = confirmations;\n            }\n\n            return receipt;\n        }, { oncePoll: this });\n    }\n\n    async getLogs(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Array<Log>> {\n        await this.getNetwork();\n        const params = await resolveProperties({ filter: this._getFilter(filter) });\n        const logs: Array<Log> = await this.perform(\"getLogs\", params);\n        logs.forEach((log) => {\n            if (log.removed == null) { log.removed = false; }\n        });\n        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    }\n\n    async getEtherPrice(): Promise<number> {\n        await this.getNetwork();\n        return this.perform(\"getEtherPrice\", { });\n    }\n\n    async _getBlockTag(blockTag: BlockTag | Promise<BlockTag>): Promise<BlockTag> {\n        blockTag = await blockTag;\n\n        if (typeof(blockTag) === \"number\" && blockTag < 0) {\n            if (blockTag % 1) {\n                logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n            }\n\n            let blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            blockNumber += blockTag;\n            if (blockNumber < 0) { blockNumber = 0; }\n            return this.formatter.blockTag(blockNumber)\n        }\n\n        return this.formatter.blockTag(blockTag);\n    }\n\n\n    async getResolver(name: string): Promise<null | Resolver> {\n        let currentName = name;\n        while (true) {\n            if (currentName === \"\" || currentName === \".\") { return null; }\n\n            // Optimization since the eth node cannot change and does\n            // not have a wildcard resolver\n            if (name !== \"eth\" && currentName === \"eth\") { return null; }\n\n            // Check the current node for a resolver\n            const addr = await this._getResolver(currentName, \"getResolver\");\n\n            // Found a resolver!\n            if (addr != null) {\n                const resolver = new Resolver(this, addr, name);\n\n                // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                if (currentName !== name && !(await resolver.supportsWildcard())) { return null; }\n\n                return resolver;\n            }\n\n            // Get the parent node\n            currentName = currentName.split(\".\").slice(1).join(\".\");\n        }\n\n    }\n\n    async _getResolver(name: string, operation?: string): Promise<string> {\n        if (operation == null) { operation = \"ENS\"; }\n\n        const network = await this.getNetwork();\n\n        // No ENS...\n        if (!network.ensAddress) {\n            logger.throwError(\n                \"network does not support ENS\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { operation, network: network.name }\n            );\n        }\n\n        try {\n            // keccak256(\"resolver(bytes32)\")\n            const addrData = await this.call({\n                to: network.ensAddress,\n                data: (\"0x0178b8bf\" + namehash(name).substring(2))\n            });\n            return this.formatter.callAddress(addrData);\n        } catch (error) {\n            // ENS registry cannot throw errors on resolver(bytes32)\n        }\n\n        return null;\n    }\n\n    async resolveName(name: string | Promise<string>): Promise<null | string> {\n        name = await name;\n\n        // If it is already an address, nothing to resolve\n        try {\n            return Promise.resolve(this.formatter.address(name));\n        } catch (error) {\n            // If is is a hexstring, the address is bad (See #694)\n            if (isHexString(name)) { throw error; }\n        }\n\n        if (typeof(name) !== \"string\") {\n            logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n        }\n\n        // Get the addr from the resolver\n        const resolver = await this.getResolver(name);\n        if (!resolver) { return null; }\n\n        return await resolver.getAddress();\n    }\n\n    async lookupAddress(address: string | Promise<string>): Promise<null | string> {\n        address = await address;\n        address = this.formatter.address(address);\n\n        const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n        const resolverAddr = await this._getResolver(node, \"lookupAddress\");\n        if (resolverAddr == null) { return null; }\n\n        // keccak(\"name(bytes32)\")\n        const name = _parseString(await this.call({\n            to: resolverAddr,\n            data: (\"0x691f3431\" + namehash(node).substring(2))\n        }), 0);\n\n        const addr = await this.resolveName(name);\n        if (addr != address) { return null; }\n\n        return name;\n    }\n\n    async getAvatar(nameOrAddress: string): Promise<null | string> {\n        let resolver: Resolver = null;\n        if (isHexString(nameOrAddress)) {\n            // Address; reverse lookup\n            const address = this.formatter.address(nameOrAddress);\n\n            const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n            const resolverAddress = await this._getResolver(node, \"getAvatar\");\n            if (!resolverAddress) { return null; }\n\n            // Try resolving the avatar against the addr.reverse resolver\n            resolver = new Resolver(this, resolverAddress, node);\n            try {\n                const avatar = await resolver.getAvatar();\n                if (avatar) { return avatar.url; }\n            } catch (error) {\n                if (error.code !== Logger.errors.CALL_EXCEPTION) { throw error; }\n            }\n\n            // Try getting the name and performing forward lookup; allowing wildcards\n            try {\n                // keccak(\"name(bytes32)\")\n                const name = _parseString(await this.call({\n                    to: resolverAddress,\n                    data: (\"0x691f3431\" + namehash(node).substring(2))\n                }), 0);\n                resolver = await this.getResolver(name);\n            } catch (error) {\n                if (error.code !== Logger.errors.CALL_EXCEPTION) { throw error; }\n                return null;\n            }\n\n        } else {\n            // ENS name; forward lookup with wildcard\n            resolver = await this.getResolver(nameOrAddress);\n            if (!resolver) { return null; }\n        }\n\n        const avatar = await resolver.getAvatar();\n        if (avatar == null) { return null; }\n\n        return avatar.url;\n    }\n\n    perform(method: string, params: any): Promise<any> {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n\n    _startEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _stopEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _addEventListener(eventName: EventType, listener: Listener, once: boolean): this {\n        const event = new Event(getEventTag(eventName), listener, once)\n        this._events.push(event);\n        this._startEvent(event);\n\n        return this;\n    }\n\n    on(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, false);\n    }\n\n    once(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, true);\n    }\n\n\n    emit(eventName: EventType, ...args: Array<any>): boolean {\n        let result = false;\n\n        let stopped: Array<Event> = [ ];\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) { return true; }\n\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n\n            result = true;\n\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n\n            return true;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventType): number {\n        if (!eventName) { return this._events.length; }\n\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n\n    listeners(eventName?: EventType): Array<Listener> {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n\n    off(eventName: EventType, listener?: Listener): this {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n\n        const stopped: Array<Event> = [ ];\n\n        let found = false;\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) { return true; }\n            if (found) { return true; }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n\n    removeAllListeners(eventName?: EventType): this {\n        let stopped: Array<Event> = [ ];\n        if (eventName == null) {\n            stopped = this._events;\n\n            this._events = [ ];\n        } else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) { return true; }\n                stopped.push(event);\n                return false;\n            });\n        }\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}