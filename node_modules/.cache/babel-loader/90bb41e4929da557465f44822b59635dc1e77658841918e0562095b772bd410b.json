{"ast":null,"code":"var _regeneratorRuntime = require(\"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"D:/Projects/RainbowKit/connectwallet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar EthQuery = require('eth-query');\nvar pify = require('pify');\nvar BaseFilterWithHistory = require('./base-filter-history');\nvar _require = require('./hexUtils'),\n  bnToHex = _require.bnToHex,\n  hexToInt = _require.hexToInt,\n  incrementHexInt = _require.incrementHexInt,\n  minBlockRef = _require.minBlockRef,\n  blockRefIsNumber = _require.blockRefIsNumber;\nvar LogFilter = /*#__PURE__*/function (_BaseFilterWithHistor) {\n  \"use strict\";\n\n  _inherits(LogFilter, _BaseFilterWithHistor);\n  var _super = _createSuper(LogFilter);\n  function LogFilter(_ref) {\n    var _this;\n    var provider = _ref.provider,\n      params = _ref.params;\n    _classCallCheck(this, LogFilter);\n    _this = _super.call(this);\n    _this.type = 'log';\n    _this.ethQuery = new EthQuery(provider);\n    _this.params = Object.assign({\n      fromBlock: 'latest',\n      toBlock: 'latest',\n      address: undefined,\n      topics: []\n    }, params);\n    // normalize address parameter\n    if (_this.params.address) {\n      // ensure array\n      if (!Array.isArray(_this.params.address)) {\n        _this.params.address = [_this.params.address];\n      }\n      // ensure lowercase\n      _this.params.address = _this.params.address.map(function (address) {\n        return address.toLowerCase();\n      });\n    }\n    return _this;\n  }\n  _createClass(LogFilter, [{\n    key: \"initialize\",\n    value: function () {\n      var _initialize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref2) {\n        var currentBlock, fromBlock, toBlock, params, newLogs;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              currentBlock = _ref2.currentBlock;\n              // resolve params.fromBlock\n              fromBlock = this.params.fromBlock;\n              if (['latest', 'pending'].includes(fromBlock)) fromBlock = currentBlock;\n              if ('earliest' === fromBlock) fromBlock = '0x0';\n              this.params.fromBlock = fromBlock;\n              // set toBlock for initial lookup\n              toBlock = minBlockRef(this.params.toBlock, currentBlock);\n              params = Object.assign({}, this.params, {\n                toBlock: toBlock\n              }); // fetch logs and add to results\n              _context.next = 9;\n              return this._fetchLogs(params);\n            case 9:\n              newLogs = _context.sent;\n              this.addInitialResults(newLogs);\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function initialize(_x) {\n        return _initialize.apply(this, arguments);\n      }\n      return initialize;\n    }()\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref3) {\n        var _this2 = this;\n        var oldBlock, newBlock, toBlock, fromBlock, params, newLogs, matchingLogs;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              oldBlock = _ref3.oldBlock, newBlock = _ref3.newBlock;\n              // configure params for this update\n              toBlock = newBlock;\n              // oldBlock is empty on first sync\n              if (oldBlock) {\n                fromBlock = incrementHexInt(oldBlock);\n              } else {\n                fromBlock = newBlock;\n              }\n              // fetch logs\n              params = Object.assign({}, this.params, {\n                fromBlock: fromBlock,\n                toBlock: toBlock\n              });\n              _context2.next = 6;\n              return this._fetchLogs(params);\n            case 6:\n              newLogs = _context2.sent;\n              matchingLogs = newLogs.filter(function (log) {\n                return _this2.matchLog(log);\n              }); // add to results\n              this.addResults(matchingLogs);\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function update(_x2) {\n        return _update.apply(this, arguments);\n      }\n      return update;\n    }()\n  }, {\n    key: \"_fetchLogs\",\n    value: function () {\n      var _fetchLogs2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(params) {\n        var _this3 = this;\n        var newLogs;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return pify(function (cb) {\n                return _this3.ethQuery.getLogs(params, cb);\n              })();\n            case 2:\n              newLogs = _context3.sent;\n              return _context3.abrupt(\"return\", newLogs);\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      function _fetchLogs(_x3) {\n        return _fetchLogs2.apply(this, arguments);\n      }\n      return _fetchLogs;\n    }()\n  }, {\n    key: \"matchLog\",\n    value: function matchLog(log) {\n      // check if block number in bounds:\n      if (hexToInt(this.params.fromBlock) >= hexToInt(log.blockNumber)) return false;\n      if (blockRefIsNumber(this.params.toBlock) && hexToInt(this.params.toBlock) <= hexToInt(log.blockNumber)) return false;\n\n      // address is correct:\n      var normalizedLogAddress = log.address && log.address.toLowerCase();\n      if (this.params.address && normalizedLogAddress && !this.params.address.includes(normalizedLogAddress)) return false;\n\n      // topics match:\n      // topics are position-dependant\n      // topics can be nested to represent `or` [[a || b], c]\n      // topics can be null, representing a wild card for that position\n      var topicsMatch = this.params.topics.every(function (topicPattern, index) {\n        // pattern is longer than actual topics\n        var logTopic = log.topics[index];\n        if (!logTopic) return false;\n        logTopic = logTopic.toLowerCase();\n        // normalize subTopics\n        var subtopicsToMatch = Array.isArray(topicPattern) ? topicPattern : [topicPattern];\n        // check for wild card\n        var subtopicsIncludeWildcard = subtopicsToMatch.includes(null);\n        if (subtopicsIncludeWildcard) return true;\n        subtopicsToMatch = subtopicsToMatch.map(function (topic) {\n          return topic.toLowerCase();\n        });\n        // check each possible matching topic\n        var topicDoesMatch = subtopicsToMatch.includes(logTopic);\n        return topicDoesMatch;\n      });\n      return topicsMatch;\n    }\n  }]);\n  return LogFilter;\n}(BaseFilterWithHistory);\nmodule.exports = LogFilter;","map":{"version":3,"names":["EthQuery","require","pify","BaseFilterWithHistory","_require","bnToHex","hexToInt","incrementHexInt","minBlockRef","blockRefIsNumber","LogFilter","_BaseFilterWithHistor","_inherits","_super","_createSuper","_ref","_this","provider","params","_classCallCheck","call","type","ethQuery","Object","assign","fromBlock","toBlock","address","undefined","topics","Array","isArray","map","toLowerCase","_createClass","key","value","_initialize","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref2","currentBlock","newLogs","wrap","_callee$","_context","prev","next","includes","_fetchLogs","sent","addInitialResults","stop","initialize","_x","apply","arguments","_update","_callee2","_ref3","_this2","oldBlock","newBlock","matchingLogs","_callee2$","_context2","filter","log","matchLog","addResults","update","_x2","_fetchLogs2","_callee3","_this3","_callee3$","_context3","cb","getLogs","abrupt","_x3","blockNumber","normalizedLogAddress","topicsMatch","every","topicPattern","index","logTopic","subtopicsToMatch","subtopicsIncludeWildcard","topic","topicDoesMatch","module","exports"],"sources":["D:/Projects/RainbowKit/connectwallet/node_modules/eth-json-rpc-filters/log-filter.js"],"sourcesContent":["const EthQuery = require('eth-query')\nconst pify = require('pify')\nconst BaseFilterWithHistory = require('./base-filter-history')\nconst { bnToHex, hexToInt, incrementHexInt, minBlockRef, blockRefIsNumber } = require('./hexUtils')\n\nclass LogFilter extends BaseFilterWithHistory {\n\n  constructor ({ provider, params }) {\n    super()\n    this.type = 'log'\n    this.ethQuery = new EthQuery(provider)\n    this.params = Object.assign({\n      fromBlock: 'latest',\n      toBlock: 'latest',\n      address: undefined,\n      topics: [],\n    }, params)\n    // normalize address parameter\n    if (this.params.address) {\n      // ensure array\n      if (!Array.isArray(this.params.address)) {\n        this.params.address = [this.params.address]\n      }\n      // ensure lowercase\n      this.params.address = this.params.address.map(address => address.toLowerCase())\n    }\n  }\n\n  async initialize({ currentBlock }) {\n    // resolve params.fromBlock\n    let fromBlock = this.params.fromBlock\n    if (['latest', 'pending'].includes(fromBlock)) fromBlock = currentBlock\n    if ('earliest' === fromBlock) fromBlock = '0x0'\n    this.params.fromBlock = fromBlock\n    // set toBlock for initial lookup\n    const toBlock = minBlockRef(this.params.toBlock, currentBlock)\n    const params = Object.assign({}, this.params, { toBlock })\n    // fetch logs and add to results\n    const newLogs = await this._fetchLogs(params)\n    this.addInitialResults(newLogs)\n  }\n\n  async update ({ oldBlock, newBlock }) {\n    // configure params for this update\n    const toBlock = newBlock\n    let fromBlock\n    // oldBlock is empty on first sync\n    if (oldBlock) {\n      fromBlock = incrementHexInt(oldBlock)\n    } else {\n      fromBlock = newBlock\n    }\n    // fetch logs\n    const params = Object.assign({}, this.params, { fromBlock, toBlock })\n    const newLogs = await this._fetchLogs(params)\n    const matchingLogs = newLogs.filter(log => this.matchLog(log))\n\n    // add to results\n    this.addResults(matchingLogs)\n  }\n\n  async _fetchLogs (params) {\n    const newLogs = await pify(cb => this.ethQuery.getLogs(params, cb))()\n    // add to results\n    return newLogs\n  }\n\n  matchLog(log) {\n    // check if block number in bounds:\n    if (hexToInt(this.params.fromBlock) >= hexToInt(log.blockNumber)) return false\n    if (blockRefIsNumber(this.params.toBlock) && hexToInt(this.params.toBlock) <= hexToInt(log.blockNumber)) return false\n\n    // address is correct:\n    const normalizedLogAddress = log.address && log.address.toLowerCase()\n    if (this.params.address && normalizedLogAddress && !this.params.address.includes(normalizedLogAddress)) return false\n\n    // topics match:\n    // topics are position-dependant\n    // topics can be nested to represent `or` [[a || b], c]\n    // topics can be null, representing a wild card for that position\n    const topicsMatch = this.params.topics.every((topicPattern, index) => {\n      // pattern is longer than actual topics\n      let logTopic = log.topics[index]\n      if (!logTopic) return false\n      logTopic = logTopic.toLowerCase()\n      // normalize subTopics\n      let subtopicsToMatch = Array.isArray(topicPattern) ? topicPattern : [topicPattern]\n      // check for wild card\n      const subtopicsIncludeWildcard = subtopicsToMatch.includes(null)\n      if (subtopicsIncludeWildcard) return true\n      subtopicsToMatch = subtopicsToMatch.map(topic => topic.toLowerCase())\n      // check each possible matching topic\n      const topicDoesMatch = subtopicsToMatch.includes(logTopic)\n      return topicDoesMatch\n    })\n\n    return topicsMatch\n  }\n\n}\n\nmodule.exports = LogFilter\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}